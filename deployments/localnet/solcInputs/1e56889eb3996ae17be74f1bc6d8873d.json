{
  "language": "Solidity",
  "sources": {
    "@ensdomains/buffer/contracts/Buffer.sol": {
      "content": "// SPDX-License-Identifier: BSD-2-Clause\npragma solidity ^0.8.4;\n\n/**\n* @dev A library for working with mutable byte buffers in Solidity.\n*\n* Byte buffers are mutable and expandable, and provide a variety of primitives\n* for appending to them. At any time you can fetch a bytes object containing the\n* current contents of the buffer. The bytes object should not be stored between\n* operations, as it may change due to resizing of the buffer.\n*/\nlibrary Buffer {\n    /**\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\n    *      a capacity. The capacity may be longer than the current value, in\n    *      which case it can be extended without the need to allocate more memory.\n    */\n    struct buffer {\n        bytes buf;\n        uint capacity;\n    }\n\n    /**\n    * @dev Initializes a buffer with an initial capacity.\n    * @param buf The buffer to initialize.\n    * @param capacity The number of bytes of space to allocate the buffer.\n    * @return The buffer, for chaining.\n    */\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\n        if (capacity % 32 != 0) {\n            capacity += 32 - (capacity % 32);\n        }\n        // Allocate space for the buffer data\n        buf.capacity = capacity;\n        assembly {\n            let ptr := mload(0x40)\n            mstore(buf, ptr)\n            mstore(ptr, 0)\n            let fpm := add(32, add(ptr, capacity))\n            if lt(fpm, ptr) {\n                revert(0, 0)\n            }\n            mstore(0x40, fpm)\n        }\n        return buf;\n    }\n\n    /**\n    * @dev Initializes a new buffer from an existing bytes object.\n    *      Changes to the buffer may mutate the original value.\n    * @param b The bytes object to initialize the buffer with.\n    * @return A new buffer.\n    */\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\n        buffer memory buf;\n        buf.buf = b;\n        buf.capacity = b.length;\n        return buf;\n    }\n\n    function resize(buffer memory buf, uint capacity) private pure {\n        bytes memory oldbuf = buf.buf;\n        init(buf, capacity);\n        append(buf, oldbuf);\n    }\n\n    /**\n    * @dev Sets buffer length to 0.\n    * @param buf The buffer to truncate.\n    * @return The original buffer, for chaining..\n    */\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\n        assembly {\n            let bufptr := mload(buf)\n            mstore(bufptr, 0)\n        }\n        return buf;\n    }\n\n    /**\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\n    *      the capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @param len The number of bytes to copy.\n    * @return The original buffer, for chaining.\n    */\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\n        require(len <= data.length);\n\n        uint off = buf.buf.length;\n        uint newCapacity = off + len;\n        if (newCapacity > buf.capacity) {\n            resize(buf, newCapacity * 2);\n        }\n\n        uint dest;\n        uint src;\n        assembly {\n            // Memory address of the buffer data\n            let bufptr := mload(buf)\n            // Length of existing buffer data\n            let buflen := mload(bufptr)\n            // Start address = buffer address + offset + sizeof(buffer length)\n            dest := add(add(bufptr, 32), off)\n            // Update buffer length if we're extending it\n            if gt(newCapacity, buflen) {\n                mstore(bufptr, newCapacity)\n            }\n            src := add(data, 32)\n        }\n\n        // Copy word-length chunks while possible\n        for (; len >= 32; len -= 32) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n            dest += 32;\n            src += 32;\n        }\n\n        // Copy remaining bytes\n        unchecked {\n            uint mask = (256 ** (32 - len)) - 1;\n            assembly {\n                let srcpart := and(mload(src), not(mask))\n                let destpart := and(mload(dest), mask)\n                mstore(dest, or(destpart, srcpart))\n            }\n        }\n\n        return buf;\n    }\n\n    /**\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\n    *      the capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @return The original buffer, for chaining.\n    */\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\n        return append(buf, data, data.length);\n    }\n\n    /**\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\n    *      capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @return The original buffer, for chaining.\n    */\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\n        uint off = buf.buf.length;\n        uint offPlusOne = off + 1;\n        if (off >= buf.capacity) {\n            resize(buf, offPlusOne * 2);\n        }\n\n        assembly {\n            // Memory address of the buffer data\n            let bufptr := mload(buf)\n            // Address = buffer address + sizeof(buffer length) + off\n            let dest := add(add(bufptr, off), 32)\n            mstore8(dest, data)\n            // Update buffer length if we extended it\n            if gt(offPlusOne, mload(bufptr)) {\n                mstore(bufptr, offPlusOne)\n            }\n        }\n\n        return buf;\n    }\n\n    /**\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\n    *      exceed the capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @param len The number of bytes to write (left-aligned).\n    * @return The original buffer, for chaining.\n    */\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\n        uint off = buf.buf.length;\n        uint newCapacity = len + off;\n        if (newCapacity > buf.capacity) {\n            resize(buf, newCapacity * 2);\n        }\n\n        unchecked {\n            uint mask = (256 ** len) - 1;\n            // Right-align data\n            data = data >> (8 * (32 - len));\n            assembly {\n                // Memory address of the buffer data\n                let bufptr := mload(buf)\n                // Address = buffer address + sizeof(buffer length) + newCapacity\n                let dest := add(bufptr, newCapacity)\n                mstore(dest, or(and(mload(dest), not(mask)), data))\n                // Update buffer length if we extended it\n                if gt(newCapacity, mload(bufptr)) {\n                    mstore(bufptr, newCapacity)\n                }\n            }\n        }\n        return buf;\n    }\n\n    /**\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\n    *      the capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @return The original buffer, for chhaining.\n    */\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\n        return append(buf, bytes32(data), 20);\n    }\n\n    /**\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\n    *      the capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @return The original buffer, for chaining.\n    */\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\n        return append(buf, data, 32);\n    }\n\n    /**\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\n     *      exceed the capacity of the buffer.\n     * @param buf The buffer to append to.\n     * @param data The data to append.\n     * @param len The number of bytes to write (right-aligned).\n     * @return The original buffer.\n     */\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\n        uint off = buf.buf.length;\n        uint newCapacity = len + off;\n        if (newCapacity > buf.capacity) {\n            resize(buf, newCapacity * 2);\n        }\n\n        uint mask = (256 ** len) - 1;\n        assembly {\n            // Memory address of the buffer data\n            let bufptr := mload(buf)\n            // Address = buffer address + sizeof(buffer length) + newCapacity\n            let dest := add(bufptr, newCapacity)\n            mstore(dest, or(and(mload(dest), not(mask)), data))\n            // Update buffer length if we extended it\n            if gt(newCapacity, mload(bufptr)) {\n                mstore(bufptr, newCapacity)\n            }\n        }\n        return buf;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967Upgradeable {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/IERC1967Upgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport {Initializable} from \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport {Initializable} from \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/interfaces/IFilmountainPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface IFilmountainPool {\n    function borrow(uint256 _amount) external;\n    function pay(uint256 _amount) external;\n}"
    },
    "contracts/interfaces/ISPVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface ISPVault {\n    error Unauthorized();\n    error OwedMiner();\n    error NotOwnedMiner();\n    error IncorrectWithdrawal();\n    error OnlyFactory();\n\n    event AddMiner(address vault, uint64 minerId);\n    event RemoveMiner(address vault, uint64 minerId);\n    event Borrow(address borrower, uint256 amount);\n    event Pay(address payer, uint256 amount);\n    event Withdraw(address to, uint256 amount);\n    event PullFund(uint64 minerId, uint256 amount);\n    event PushFund(uint64 minerId, uint256 amount);\n    event SendPrincipal(uint256 amountToPool);\n    event SetAuthorized(bool flag);\n}"
    },
    "contracts/interfaces/ISPVaultFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface ISPVaultFactory {\n    event CreateVault(address vault);\n    event SetAuthorized(address target);\n\n    function isRegistered(address) external view returns (bool);\n    function isAuthorized(address) external view returns (bool);\n}"
    },
    "contracts/interfaces/IWFIL.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {WFIL} from \"fevmate/contracts/token/WFIL.sol\";\n\ninterface IWFIL is IERC20 {\n\t/**\n\t * @notice Deposit Fil into the contract, and mint WFIL 1:1.\n\t */\n\tfunction deposit() external payable;\n\n\t/**\n\t * @notice Burns _amount WFIL from caller's balance, and transfers them\n\t * the unwrapped Fil 1:1.\n\t *\n\t * Note: The fund transfer used here is address.call{value: _amount}(\"\"),\n\t * which does NOT work with the FVM's builtin Multisig actor. This is\n\t * because, under the hood, address.call acts like a message to an actor's\n\t * InvokeEVM method. The Multisig actor does not implement this method.\n\t *\n\t * This is a known issue, but we've decided to keep the method as-is,\n\t * because it's likely that the Multisig actor is eventually upgraded to\n\t * support this method. Even though a Multisig actor cannot directly\n\t * withdraw, it is still possible for Multisigs to deposit, transfer,\n\t * etc WFIL. So, if your Multisig actor needs to withdraw, you can\n\t * transfer your WFIL to another contract, which can perform the\n\t * withdrawal for you.\n\t *\n\t * (Though Multisig actors are not supported, BLS/SECPK/EthAccounts\n\t * and EVM contracts can use this method normally)\n\t */\n\tfunction withdraw(uint256 amount) external;\n}"
    },
    "contracts/libraries/SafeTransferLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\n\npragma solidity >=0.8.0;\n\n/**\n * Slightly modified Solmate SafeTransferLib library for safe transfers of tokens\n * original ERC20 token has been replaced by Filecoin-safe ERC20. Updated token version performs\n * address normalization and allows to send tokens to f0/f1/f3/f4 addresses. In FVM no\n * tokens could be sent to the native actors.\n */\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\nlibrary SafeTransferLib {\n\t/*//////////////////////////////////////////////////////////////\n                             ETH OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction safeTransferETH(address to, uint256 amount) internal {\n\t\tbool success;\n\n\t\t/// @solidity memory-safe-assembly\n\t\tassembly {\n\t\t\t// Transfer the ETH and store if it succeeded or not.\n\t\t\tsuccess := call(gas(), to, amount, 0, 0, 0, 0)\n\t\t}\n\n\t\trequire(success, \"ETH_TRANSFER_FAILED\");\n\t}\n\n\t/*//////////////////////////////////////////////////////////////\n                            ERC20 OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction safeTransferFrom(ERC20 token, address from, address to, uint256 amount) internal {\n\t\tbool success;\n\n\t\t/// @solidity memory-safe-assembly\n\t\tassembly {\n\t\t\t// Get a pointer to some free memory.\n\t\t\tlet freeMemoryPointer := mload(0x40)\n\n\t\t\t// Write the abi-encoded calldata into memory, beginning with the function selector.\n\t\t\tmstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n\t\t\tmstore(add(freeMemoryPointer, 4), from) // Append the \"from\" argument.\n\t\t\tmstore(add(freeMemoryPointer, 36), to) // Append the \"to\" argument.\n\t\t\tmstore(add(freeMemoryPointer, 68), amount) // Append the \"amount\" argument.\n\n\t\t\tsuccess := and(\n\t\t\t\t// Set success to whether the call reverted, if not we check it either\n\t\t\t\t// returned exactly 1 (can't just be non-zero data), or had no return data.\n\t\t\t\tor(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n\t\t\t\t// We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\n\t\t\t\t// We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n\t\t\t\t// Counterintuitively, this call must be positioned second to the or() call in the\n\t\t\t\t// surrounding and() call or else returndatasize() will be zero during the computation.\n\t\t\t\tcall(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\n\t\t\t)\n\t\t}\n\n\t\trequire(success, \"TRANSFER_FROM_FAILED\");\n\t}\n\n\tfunction safeTransfer(ERC20 token, address to, uint256 amount) internal {\n\t\tbool success;\n\n\t\t/// @solidity memory-safe-assembly\n\t\tassembly {\n\t\t\t// Get a pointer to some free memory.\n\t\t\tlet freeMemoryPointer := mload(0x40)\n\n\t\t\t// Write the abi-encoded calldata into memory, beginning with the function selector.\n\t\t\tmstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\n\t\t\tmstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\n\t\t\tmstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\n\n\t\t\tsuccess := and(\n\t\t\t\t// Set success to whether the call reverted, if not we check it either\n\t\t\t\t// returned exactly 1 (can't just be non-zero data), or had no return data.\n\t\t\t\tor(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n\t\t\t\t// We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n\t\t\t\t// We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n\t\t\t\t// Counterintuitively, this call must be positioned second to the or() call in the\n\t\t\t\t// surrounding and() call or else returndatasize() will be zero during the computation.\n\t\t\t\tcall(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n\t\t\t)\n\t\t}\n\n\t\trequire(success, \"TRANSFER_FAILED\");\n\t}\n\n\tfunction safeApprove(ERC20 token, address to, uint256 amount) internal {\n\t\tbool success;\n\n\t\t/// @solidity memory-safe-assembly\n\t\tassembly {\n\t\t\t// Get a pointer to some free memory.\n\t\t\tlet freeMemoryPointer := mload(0x40)\n\n\t\t\t// Write the abi-encoded calldata into memory, beginning with the function selector.\n\t\t\tmstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\n\t\t\tmstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\n\t\t\tmstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\n\n\t\t\tsuccess := and(\n\t\t\t\t// Set success to whether the call reverted, if not we check it either\n\t\t\t\t// returned exactly 1 (can't just be non-zero data), or had no return data.\n\t\t\t\tor(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n\t\t\t\t// We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n\t\t\t\t// We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n\t\t\t\t// Counterintuitively, this call must be positioned second to the or() call in the\n\t\t\t\t// surrounding and() call or else returndatasize() will be zero during the computation.\n\t\t\t\tcall(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n\t\t\t)\n\t\t}\n\n\t\trequire(success, \"APPROVE_FAILED\");\n\t}\n}"
    },
    "contracts/libraries/types/DataTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nlibrary DataTypes {\n    struct AddMinerCache {\n\t\taddress ownerAddr;\n\t\tbool isID;\n        uint64 thisId;\n\t\tuint64 sectorSize;\n        uint64 proposedId;\n\t\tuint64 ownerId;\n\t\tuint64 msgSenderId;\n        bytes actorIDBytes;\n    }\n\n    struct PullFundCache {\n        uint256 balance;\n        uint256 withdrawn;\n        bool abort;\n    }\n}"
    },
    "contracts/sp/logic/AddMinerLogic.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport {MinerAPI, MinerTypes, CommonTypes} from \"filecoin-solidity-api/contracts/v0.8/MinerAPI.sol\";\nimport {PrecompilesAPI} from \"filecoin-solidity-api/contracts/v0.8/PrecompilesAPI.sol\";\nimport {FilAddresses} from \"filecoin-solidity-api/contracts/v0.8/utils/FilAddresses.sol\";\nimport {FilAddress} from \"fevmate/contracts/utils/FilAddress.sol\";\nimport \"../../libraries/types/DataTypes.sol\";\n\nlibrary AddMinerLogic {\n    using FilAddress for address;\n    using MinerAPI for CommonTypes.FilActorId;\n\n    error InactiveActor();\n    error InvalidProposed();\n    error FailToChangeOwner();\n\n    event AddMiner(address vault, uint64 minerId);\n\n    function addMiner(uint64 _minerId) internal {\n        // 로컬 변수를 struct로 관리하여 stack too deep 방지\n        DataTypes.AddMinerCache memory addMinerCache;\n        \n        // -- proposed 된 주소가 Vault 컨트랙트 주소가 맞는지 체크 --\n        CommonTypes.FilActorId minerId = CommonTypes.FilActorId.wrap(_minerId);\n        // 현재 owner 주소와 proposed 주소 가져오기\n        (, MinerTypes.GetOwnerReturn memory ownerReturn) = MinerAPI.getOwner(minerId);\n        (addMinerCache.isID, addMinerCache.thisId) = address(this).normalize().getActorID();\n        addMinerCache.proposedId = PrecompilesAPI.resolveAddress(ownerReturn.proposed);\n        if (addMinerCache.proposedId != addMinerCache.thisId) revert InvalidProposed();\n\n        // -- miner actor 소유권 변경 --\n        // 기존 owner가 이 컨트랙트에 changeOwnerAddress()를 먼저 실행하여 제안\n        // 이 컨트랙트가 changeOwnerAddress()를 실행시키면 accept\n        addMinerCache.actorIDBytes = abi.encodePacked(addMinerCache.thisId);\n        CommonTypes.FilAddress memory actorIDAddress = FilAddresses.fromBytes(addMinerCache.actorIDBytes);\n        minerId.changeOwnerAddress(actorIDAddress);\n\n        // -- miner actor 소유권 변경 성공 여부 검사 --\n        // changeOwnerAddress() 이후 miner 소유자 주소 가져오기\n        (,ownerReturn) = MinerAPI.getOwner(minerId);\n        // miner 소유자의 actor ID 가져오기\n        addMinerCache.ownerId = PrecompilesAPI.resolveAddress(ownerReturn.owner);\n        // miner actor의 소유자가 정상적으로 바뀌었는지 체크\n        if (!addMinerCache.isID) revert InactiveActor();\n        if (addMinerCache.ownerId != addMinerCache.thisId) revert FailToChangeOwner();\n        emit AddMiner(address(this), _minerId);\n    }\n}"
    },
    "contracts/sp/logic/PullFundLogic.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport {MinerAPI, MinerTypes, CommonTypes} from \"filecoin-solidity-api/contracts/v0.8/MinerAPI.sol\";\nimport {BigInts} from \"filecoin-solidity-api/contracts/v0.8/utils/BigInts.sol\";\nimport \"../../libraries/types/DataTypes.sol\";\n\nlibrary PullFundLogic {\n    error BigNumConversion();\n    error NotEnoughBalance(uint256);\n    error IncorrectWithdrawal();\n\n    function pullFund(uint64 _minerId, uint256 _amount) internal returns (uint256) {\n        DataTypes.PullFundCache memory pullFundCache;\n        // -- Available 잔액이 충분한지 확인 --\n        CommonTypes.FilActorId minerId = CommonTypes.FilActorId.wrap(_minerId);\n        (, CommonTypes.BigInt memory bigBalance) = MinerAPI.getAvailableBalance(minerId);\n        (pullFundCache.balance, pullFundCache.abort) = BigInts.toUint256(bigBalance);\n        if (pullFundCache.abort) revert BigNumConversion();\n        if (_amount > pullFundCache.balance) revert NotEnoughBalance(pullFundCache.balance);\n\n        // -- miner available에서 FIL 꺼내기 --\n        (, CommonTypes.BigInt memory withdrawnBInt) = MinerAPI.withdrawBalance(\n            CommonTypes.FilActorId.wrap(_minerId),\n            BigInts.fromUint256(_amount)\n        );\n        // 제대로 꺼내졌는지 검사\n        (pullFundCache.withdrawn, pullFundCache.abort) = BigInts.toUint256(withdrawnBInt);\n        if (pullFundCache.abort) revert BigNumConversion();\n        if (pullFundCache.withdrawn != _amount) revert IncorrectWithdrawal();\n\n        return pullFundCache.withdrawn;\n    }\n}"
    },
    "contracts/sp/SPVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport {ISPVaultFactory} from \"../interfaces/ISPVaultFactory.sol\";\nimport {ISPVault} from \"../interfaces/ISPVault.sol\";\nimport {IWFIL} from \"../interfaces/IWFIL.sol\";\nimport {IFilmountainPool} from \"../interfaces/IFilmountainPool.sol\";\nimport {FilAddress} from \"fevmate/contracts/utils/FilAddress.sol\";\nimport {BigInts} from \"filecoin-solidity-api/contracts/v0.8/utils/BigInts.sol\";\nimport {FilAddresses} from \"filecoin-solidity-api/contracts/v0.8/utils/FilAddresses.sol\";\nimport {PrecompilesAPI} from \"filecoin-solidity-api/contracts/v0.8/PrecompilesAPI.sol\";\nimport {SendAPI} from \"filecoin-solidity-api/contracts/v0.8/SendAPI.sol\";\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {UUPSUpgradeable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport {DataTypes} from \"../libraries/types/DataTypes.sol\";\nimport {SafeTransferLib} from \"../libraries/SafeTransferLib.sol\";\nimport \"./logic/AddMinerLogic.sol\";\nimport \"./logic/PullFundLogic.sol\";\n\ncontract SPVault is \n    ISPVault,\n    Initializable,\n    OwnableUpgradeable,\n    UUPSUpgradeable\n{\n    using MinerAPI for CommonTypes.FilActorId;\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    IWFIL public wFIL;\n    IFilmountainPool public FilmountainPool;\n\n    // 보유한 miner actor들의 리스트\n    EnumerableSet.UintSet private ownedMinerSet;\n    ISPVaultFactory FACTORY;\n    address ZC;\n    uint64 ownerId;\n\n    constructor() initializer {}\n\n    function initialize(address _wFIL, address _ZC, address _owner, address _filmountainPool, uint64 _ownerId) initializer public {\n        __Ownable_init();\n        __UUPSUpgradeable_init();\n\n        transferOwnership(_owner);\n        wFIL = IWFIL(_wFIL);\n        ZC = _ZC;\n        FACTORY = ISPVaultFactory(msg.sender);\n        FilmountainPool = IFilmountainPool(_filmountainPool);\n        ownerId = _ownerId;\n    }\n\n    /* -=-=-=-=-=-=-=-=-=-=-=- REGISTRATION -=-=-=-=-=-=-=-=-=-=-=- */\n    function addMiner(uint64 _minerId) public {\n        AddMinerLogic.addMiner(_minerId);\n\n        // -- 추가된 miner 정보 저장 --\n        ownedMinerSet.add(_minerId);\n        emit AddMiner(address(this), _minerId);\n    }\n\n    function removeMiner(uint64 _minerId) public onlyOwner {\n        // -- Vault에 맡긴 miner가 아니라면 revert --\n        if(!ownedMinerSet.contains(_minerId)) revert NotOwnedMiner();\n        CommonTypes.FilActorId minerId = CommonTypes.FilActorId.wrap(_minerId);\n        bytes memory actorIDBytes = abi.encodePacked(ownerId);\n        CommonTypes.FilAddress memory actorIDAddress = FilAddresses.fromBytes(actorIDBytes);\n        minerId.changeOwnerAddress(actorIDAddress);\n        // -- 배열에서 정보 삭제 --\n        ownedMinerSet.remove(_minerId);\n        emit RemoveMiner(address(this), _minerId);\n    }\n\n    /* -=-=-=-=-=-=-=-=-=-=-=- SERVICE -=-=-=-=-=-=-=-=-=-=-=- */\n    function borrow(uint256 _amount) public onlyOwner {\n        // -- 대출 조건을 충족하는지 확인 --\n        // Vault 생성자만 실행 가능\n        // factory에서 authorized되어야 실행 가능(Vault를 생성해서 아무나 빌려가면 안되므로)\n        if(!FACTORY.isAuthorized(address(this))) revert Unauthorized();\n\n        // -- pool의 borrow 메서드 호출 --\n        FilmountainPool.borrow(_amount);\n        emit Borrow(msg.sender, _amount);\n    }\n\n    function pay(uint256 _amount) public onlyOwner {\n        // -- 수익분배 --\n        // 수수료 2% 제외 pool로 40% 전송 \n        uint256 amountToPool = _amount * 4 / 10;\n        uint256 feeToPool = amountToPool / 50;\n        sendToPool(amountToPool - feeToPool);\n\n        // 수수료 회사로 전송\n        uint256 amountToZC = feeToPool + (_amount - amountToPool) / 5;\n        wFIL.withdraw(amountToZC);\n        SafeTransferLib.safeTransferETH(ZC, amountToZC);\n        // SP의 몫\n        emit Pay(msg.sender, _amount);\n    }\n\n    function withdraw(address _to, uint256 _amount) public onlyOwner {\n        uint256 balanceWETH9 = wFIL.balanceOf(address(this));\n        // -- 꺼내려는 양이 wFIL balance 보다 많은지 체크 --\n        if (_amount > balanceWETH9) revert IncorrectWithdrawal();\n\n        // -- wFIL를 FIL로 unwrapping하고 miner로 전송 --\n        wFIL.withdraw(_amount);\n        SafeTransferLib.safeTransferETH(_to, _amount);\n        emit Withdraw(_to, _amount);\n    }\n\n    function pullFund(uint64 _minerId, uint256 _amount) public onlyOwner {\n        uint256 withdrawn = PullFundLogic.pullFund(_minerId, _amount);\n\n        // -- miner available에서 꺼내온 FIL을 wFIL로 wrapping --\n        wFIL.deposit{value: withdrawn}();\n        emit PullFund(_minerId, _amount);\n    }\n\n    function pushFund(uint64 _minerId, uint256 _amount) public onlyOwner {\n        uint256 balanceWETH9 = wFIL.balanceOf(address(this));\n        // -- 꺼내려는 양이 wFIL balance 보다 많은지 체크 --\n        if (_amount > balanceWETH9) revert IncorrectWithdrawal();\n\n        // -- wFIL를 FIL로 unwrapping하고 miner로 전송 --\n        wFIL.withdraw(_amount);\n        SendAPI.send(CommonTypes.FilActorId.wrap(_minerId), _amount);\n        emit PushFund(_minerId, _amount);\n    }\n\n    function sendToPool(uint256 _amountToPool) public onlyOwner {\n        wFIL.deposit{value: _amountToPool}();\n        wFIL.approve(address(FilmountainPool), _amountToPool);\n        FilmountainPool.pay(_amountToPool);\n        emit SendPrincipal(_amountToPool);\n    }\n\n    function minerList() public view returns (uint256[] memory) {\n        return ownedMinerSet.values();\n    }\n\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\n}\n"
    },
    "contracts/sp/SPVaultFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"../interfaces/ISPVaultFactory.sol\";\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {SPVault} from \"./SPVault.sol\";\nimport {Clones} from \"@openzeppelin/contracts/proxy/Clones.sol\";\n\ncontract SPVaultFactory is ISPVaultFactory, Ownable {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    EnumerableSet.AddressSet private registeredVaultSet;\n    EnumerableSet.AddressSet private AuthorizedVaultSet;\n    address public wFIL;\n    address public filmountainPool;\n    address public spVaultImplementation;\n\n    constructor(\n        address _wFIL,\n        address _filmountainPool,\n        address _spVaultImplementation\n    ) {\n        wFIL = _wFIL;\n        filmountainPool = _filmountainPool;\n        spVaultImplementation = _spVaultImplementation;\n    }\n\n    function isRegistered(address _target) public view returns (bool) {\n        return registeredVaultSet.contains(_target);\n    }\n\n    function createVault(uint64 _ownerId) public returns (address vault) {\n        // Create clone of the SPVault implementation\n        vault = Clones.clone(spVaultImplementation);\n        SPVault(vault).initialize(wFIL, owner(), msg.sender, filmountainPool, _ownerId);\n\n        // Register the created Vault address\n        registeredVaultSet.add(vault);\n        emit CreateVault(vault);\n    }\n\n    function setAuthorized(address _target) public onlyOwner {\n        // Anyone can create a Vault via createVault, but only authorized Vaults can borrow from the pool\n        AuthorizedVaultSet.add(_target);\n        emit SetAuthorized(_target);\n    }\n\n    function isAuthorized(address _target) public view returns (bool) {\n        return AuthorizedVaultSet.contains(_target);\n    }\n\n    function vaultList() public view returns (address[] memory) {\n        return registeredVaultSet.values();\n    }\n\n    function updateSPVaultImplementation(address _newImplementation) external onlyOwner {\n        spVaultImplementation = _newImplementation;\n    }\n}"
    },
    "fevmate/contracts/access/OwnedClaimable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"../utils/FilAddress.sol\";\n\n/**\n * @author fevmate (https://github.com/wadealexc/fevmate)\n * @notice Two-step owner transferrance mixin. Unlike many fevmate contracts,\n * no methods here normalize address inputs - so it is possible to transfer\n * ownership to an ID address. However, the acceptOwnership method enforces\n * that the pending owner address can actually be the msg.sender.\n *\n * This should mean it's possible for other Filecoin actor types to hold the\n * owner role - like BLS/SECP account actors.\n */\nabstract contract OwnedClaimable {    \n    \n    using FilAddress for *;\n\n    error Unauthorized();\n    error InvalidAddress();\n\n    /*//////////////////////////////////////\n                  OWNER INFO\n    //////////////////////////////////////*/\n\n    address public owner;\n    address pendingOwner;\n\n    /*//////////////////////////////////////\n                    EVENTS\n    //////////////////////////////////////*/\n\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\n    event OwnershipPending(address indexed currentOwner, address indexed pendingOwner);\n\n    /*//////////////////////////////////////\n                  CONSTRUCTOR\n    //////////////////////////////////////*/\n\n    constructor(address _owner) {\n        if (_owner == address(0)) revert InvalidAddress();\n        // normalize _owner to avoid setting an EVM actor's ID address as owner\n        owner = _owner.normalize();\n\n        emit OwnershipTransferred(address(0), owner);\n    }\n\n    /*//////////////////////////////////////\n                OWNABLE METHODS\n    //////////////////////////////////////*/\n\n    modifier onlyOwner() virtual {\n        if (msg.sender != owner) revert Unauthorized();\n        _;\n    }\n\n    /**\n     * @notice Allows the current owner to revoke the owner role, locking\n     * any onlyOwner functions.\n     *\n     * Note: this method requires that there is not currently a pending\n     * owner. To revoke ownership while there is a pending owner, the\n     * current owner must first set a new pending owner to address(0).\n     * Alternatively, the pending owner can claim ownership and then\n     * revoke it.\n     */\n    function revokeOwnership() public virtual onlyOwner {\n        if (pendingOwner != address(0)) revert Unauthorized();\n        owner = address(0);\n\n        emit OwnershipTransferred(msg.sender, address(0));\n    }\n\n    /**\n     * @notice Works like most 2-step ownership transfer methods. The current\n     * owner can call this to set a new pending owner.\n     * \n     * Note: the new owner address is NOT normalized - it is stored as-is.\n     * This is safe, because the acceptOwnership method enforces that the\n     * new owner can make a transaction as msg.sender.\n     */\n    function transferOwnership(address _newOwner) public virtual onlyOwner {\n        pendingOwner = _newOwner;\n\n        emit OwnershipPending(msg.sender, _newOwner);\n    }\n\n    /**\n     * @notice Used by the pending owner to accept the ownership transfer.\n     *\n     * Note: If this fails unexpectedly, check that the pendingOwner is not\n     * an ID address. The pending owner address should match the pending\n     * owner's msg.sender address.         \n     */\n    function acceptOwnership() public virtual {\n        if (msg.sender != pendingOwner) revert Unauthorized();\n\n        // Transfer ownership and set pendingOwner to 0\n        address oldOwner = owner;\n        owner = msg.sender;\n        delete pendingOwner;\n\n        emit OwnershipTransferred(oldOwner, msg.sender);\n    }\n}\n"
    },
    "fevmate/contracts/token/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"../utils/FilAddress.sol\";\n\n/**\n * @author fevmate (https://github.com/wadealexc/fevmate)\n * @notice ERC20 mixin for the FEVM. This contract implements the ERC20\n * standard, with additional safety features for the FEVM.\n *\n * All methods attempt to normalize address input. This means that if\n * they are provided ID addresses as input, they will attempt to convert\n * these addresses to standard Eth addresses. \n * \n * This is an important consideration when developing on the FEVM, and\n * you can read about it more in the README.\n */\nabstract contract ERC20 {\n\n    using FilAddress for *;\n\n    /*//////////////////////////////////////\n                  TOKEN INFO\n    //////////////////////////////////////*/\n\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    /*//////////////////////////////////////\n                 ERC-20 STORAGE\n    //////////////////////////////////////*/\n\n    uint public totalSupply;\n\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowances;\n\n    /*//////////////////////////////////////\n                    EVENTS\n    //////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /*//////////////////////////////////////\n                  CONSTRUCTOR\n    //////////////////////////////////////*/\n\n    constructor (\n        string memory _name, \n        string memory _symbol, \n        uint8 _decimals\n    ) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n    }\n\n    /*//////////////////////////////////////\n                 ERC-20 METHODS\n    //////////////////////////////////////*/\n\n    function transfer(address _to, uint _amount) public virtual returns (bool) {\n        // Attempt to convert destination to Eth address\n        _to = _to.normalize();\n        \n        balances[msg.sender] -= _amount;\n        balances[_to] += _amount;\n\n        emit Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n    \n    function transferFrom(address _owner, address _to, uint _amount) public virtual returns (bool) {\n        // Attempt to convert owner and destination to Eth addresses\n        _owner = _owner.normalize();\n        _to = _to.normalize();\n\n        // Reduce allowance for spender. If allowance is set to the\n        // max value, we leave it alone.\n        uint allowed = allowances[_owner][msg.sender];\n        if (allowed != type(uint).max)\n            allowances[_owner][msg.sender] = allowed - _amount;\n        \n        balances[_owner] -= _amount;\n        balances[_to] += _amount;\n\n        emit Transfer(_owner, _to, _amount);\n        return true;\n    }\n\n    function approve(address _spender, uint _amount) public virtual returns (bool) {\n        // Attempt to convert spender to Eth address\n        _spender = _spender.normalize();\n\n        allowances[msg.sender][_spender] = _amount;\n\n        emit Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    /*//////////////////////////////////////\n                 ERC-20 GETTERS\n    //////////////////////////////////////*/\n\n    function balanceOf(address _a) public virtual view returns (uint) {\n        return balances[_a.normalize()];\n    }\n\n    function allowance(address _owner, address _spender) public virtual view returns (uint) {\n        return allowances[_owner.normalize()][_spender.normalize()];\n    }\n\n    /*//////////////////////////////////////\n           MINT/BURN INTERNAL METHODS\n    //////////////////////////////////////*/\n\n    function _mint(address _to, uint _amount) internal virtual {\n        // Attempt to convert to Eth address\n        _to = _to.normalize();\n\n        totalSupply += _amount;\n        balances[_to] += _amount;\n\n        emit Transfer(address(0), _to, _amount);\n    }\n\n    function _burn(address _from, uint _amount) internal virtual {\n        // Attempt to convert to Eth address\n        _from = _from.normalize();\n\n        balances[_from] -= _amount;\n        totalSupply -= _amount;\n\n        emit Transfer(_from, address(0), _amount);\n    }\n}"
    },
    "fevmate/contracts/token/WFIL.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"./ERC20.sol\";\nimport \"../utils/FilAddress.sol\";\nimport \"../access/OwnedClaimable.sol\";\n\n/**\n * @author fevmate (https://github.com/wadealexc/fevmate)\n * @notice Wrapped filecoin implementation, using ERC20-FEVM mixin.\n */\ncontract WFIL is ERC20(\"Wrapped FIL\", \"WFIL\", 18), OwnedClaimable {\n\n    using FilAddress for *;\n\n    error TimelockActive();\n\n    /*//////////////////////////////////////\n                 WFIL STORAGE\n    //////////////////////////////////////*/\n\n    // Timelock for 6 months after contract is deployed\n    // Applies only to recoverDeposit. See comments there for info\n    uint public immutable recoveryTimelock = block.timestamp + 24 weeks;\n\n    /*//////////////////////////////////////\n                    EVENTS\n    //////////////////////////////////////*/\n\n    event Deposit(address indexed from, uint amount);\n    event Withdrawal(address indexed to, uint amount);\n    \n    /*//////////////////////////////////////\n                  CONSTRUCTOR\n    //////////////////////////////////////*/\n    \n    constructor(address _owner) OwnedClaimable(_owner) {}\n\n    /*//////////////////////////////////////\n                  WFIL METHODS\n    //////////////////////////////////////*/\n\n    /**\n     * @notice Fallback function - Fil transfers via standard address.call\n     * will end up here and trigger the deposit function, minting the caller\n     * with WFIL 1:1.\n     *\n     * Note that transfers of value via the FVM's METHOD_SEND bypass bytecode,\n     * and will not credit the sender with WFIL in return. Please ensure you\n     * do NOT send the contract Fil via METHOD_SEND - always use InvokeEVM.\n     *\n     * For more information on METHOD_SEND, see recoverDeposit below.\n     */\n    receive() external payable virtual {\n        deposit();\n    }\n\n    /**\n     * @notice Deposit Fil into the contract, and mint WFIL 1:1.\n     */\n    function deposit() public payable virtual {\n        _mint(msg.sender, msg.value);\n\n        emit Deposit(msg.sender, msg.value);\n    }\n\n    /**\n     * @notice Burns _amount WFIL from caller's balance, and transfers them\n     * the unwrapped Fil 1:1.\n     *\n     * Note: The fund transfer used here is address.call{value: _amount}(\"\"),\n     * which does NOT work with the FVM's builtin Multisig actor. This is\n     * because, under the hood, address.call acts like a message to an actor's\n     * InvokeEVM method. The Multisig actor does not implement this method.\n     * \n     * This is a known issue, but we've decided to keep the method as-is,\n     * because it's likely that the Multisig actor is eventually upgraded to\n     * support this method. Even though a Multisig actor cannot directly\n     * withdraw, it is still possible for Multisigs to deposit, transfer,\n     * etc WFIL. So, if your Multisig actor needs to withdraw, you can\n     * transfer your WFIL to another contract, which can perform the\n     * withdrawal for you.\n     *\n     * (Though Multisig actors are not supported, BLS/SECPK/EthAccounts\n     * and EVM contracts can use this method normally)\n     */\n    function withdraw(uint _amount) public virtual {\n        _burn(msg.sender, _amount);\n\n        emit Withdrawal(msg.sender, _amount);\n\n        payable(msg.sender).sendValue(_amount);\n    }\n\n    /**\n     * @notice Used by owner to unstick Fil that was directly transferred\n     * to the contract without triggering the deposit/receive functions.\n     * When called, _amount stuck Fil is converted to WFIL on behalf of\n     * the passed-in _depositor.\n     *\n     * This method ONLY converts Fil that would otherwise be permanently\n     * lost.\n     *\n     * --- About ---\n     *\n     * In the event someone accidentally sends Fil to this contract via\n     * FVM method METHOD_SEND (or via selfdestruct), the Fil will be\n     * lost rather than being converted to WFIL. This is because METHOD_SEND \n     * transfers value without invoking the recipient's code.\n     *\n     * If this occurs, the contract's Fil balance will go up, but no WFIL\n     * will be minted. Luckily, this means we can calculate the number of  \n     * stuck tokens as the contract's Fil balance minus WFIL totalSupply, \n     * and ensure we're only touching stuck tokens with this method.\n     *\n     * Please ensure you only ever send funds to this contract using the\n     * FVM method InvokeEVM! This method is not a get-out-of-jail free card,\n     * and comes with no guarantees.\n     *\n     * (If you're a lost EVM dev, address.call uses InvokeEVM under the\n     * hood. So in a purely contract-contract context, you don't need\n     * to do anything special - use address.call, or call the WFIL.deposit\n     * method as you would normally.)\n     */\n    function recoverDeposit(address _depositor, uint _amount) public virtual onlyOwner {\n        // This method is locked for 6 months after contract deployment.\n        // This is to give the deployers time to sort out the best/most\n        // equitable way to recover and distribute accidentally-locked\n        // tokens.\n        if (block.timestamp < recoveryTimelock) revert TimelockActive();\n\n        // Calculate number of locked tokens\n        uint lockedTokens = address(this).balance - totalSupply;\n        require(_amount <= lockedTokens);\n\n        // Normalize depositor. _mint also does this, but we want to\n        // emit the normalized address in the Deposit event below.\n        _depositor = _depositor.normalize();\n\n        _mint(_depositor, _amount);\n        emit Deposit(_depositor, _amount);\n    }\n}\n"
    },
    "fevmate/contracts/utils/FilAddress.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n/**\n * @author fevmate (https://github.com/wadealexc/fevmate)\n * @notice Utility functions for converting between id and\n * eth addresses. Helps implement address normalization.\n *\n * See README for more details about how to use this when\n * developing for the FEVM.\n */\nlibrary FilAddress {\n    \n    // Custom errors\n    error CallFailed();\n    error InvalidAddress();\n    error InsufficientFunds();\n\n    // Builtin Actor addresses (singletons)\n    address constant SYSTEM_ACTOR = 0xfF00000000000000000000000000000000000000;\n    address constant INIT_ACTOR = 0xff00000000000000000000000000000000000001;\n    address constant REWARD_ACTOR = 0xff00000000000000000000000000000000000002;\n    address constant CRON_ACTOR = 0xFF00000000000000000000000000000000000003;\n    address constant POWER_ACTOR = 0xFf00000000000000000000000000000000000004;\n    address constant MARKET_ACTOR = 0xff00000000000000000000000000000000000005;\n    address constant VERIFIED_REGISTRY_ACTOR = 0xFF00000000000000000000000000000000000006;\n    address constant DATACAP_TOKEN_ACTOR = 0xfF00000000000000000000000000000000000007;\n    address constant EAM_ACTOR = 0xfF0000000000000000000000000000000000000a;\n\n    // FEVM precompile addresses\n    address constant RESOLVE_ADDRESS = 0xFE00000000000000000000000000000000000001;\n    address constant LOOKUP_DELEGATED_ADDRESS = 0xfE00000000000000000000000000000000000002;\n    address constant CALL_ACTOR = 0xfe00000000000000000000000000000000000003;\n    // address constant GET_ACTOR_TYPE = 0xFe00000000000000000000000000000000000004; // (deprecated)\n    address constant CALL_ACTOR_BY_ID = 0xfe00000000000000000000000000000000000005;\n\n    // An ID address with id == 0. It's also equivalent to the system actor address\n    // This is useful for bitwise operations\n    address constant ZERO_ID_ADDRESS = SYSTEM_ACTOR;\n    \n    /**\n     * @notice Convert ID to Eth address. Returns input if conversion fails.\n     *\n     * Attempt to convert address _a from an ID address to an Eth address\n     * If _a is NOT an ID address, this returns _a\n     * If _a does NOT have a corresponding Eth address, this returns _a\n     * \n     * NOTE: It is possible this returns an ID address! If you want a method\n     *       that will NEVER return an ID address, see mustNormalize below.\n     */\n    function normalize(address _a) internal view returns (address) {\n        // First, check if we have an ID address. If we don't, return as-is\n        (bool isID, uint64 id) = isIDAddress(_a);\n        if (!isID) {\n            return _a;\n        }\n\n        // We have an ID address -- attempt the conversion\n        // If there is no corresponding Eth address, return _a\n        (bool success, address eth) = getEthAddress(id);\n        if (!success) {\n            return _a;\n        } else {\n            return eth;\n        }\n    }\n\n    /**\n     * @notice Convert ID to Eth address. Reverts if conversion fails.\n     *\n     * Attempt to convert address _a from an ID address to an Eth address\n     * If _a is NOT an ID address, this returns _a unchanged\n     * If _a does NOT have a corresponding Eth address, this method reverts\n     *\n     * This method can be used when you want a guarantee that an ID address is not\n     * returned. Note, though, that rejecting ID addresses may mean you don't support\n     * other Filecoin-native actors.\n     */\n    function mustNormalize(address _a) internal view returns (address) {\n        // First, check if we have an ID address. If we don't, return as-is\n        (bool isID, uint64 id) = isIDAddress(_a);\n        if (!isID) {\n            return _a;\n        }\n\n        // We have an ID address -- attempt the conversion\n        // If there is no corresponding Eth address, revert\n        (bool success, address eth) = getEthAddress(id);\n        if (!success) revert InvalidAddress();\n        return eth;\n    }\n\n    // Used to clear the last 8 bytes of an address    (addr & U64_MASK)\n    address constant U64_MASK = 0xFffFfFffffFfFFffffFFFffF0000000000000000;\n    // Used to retrieve the last 8 bytes of an address (addr & MAX_U64)\n    address constant MAX_U64 = 0x000000000000000000000000fFFFFFffFFFFfffF;\n\n    /**\n     * @notice Checks whether _a matches the ID address format.\n     * If it does, returns true and the id\n     * \n     * The ID address format is:\n     * 0xFF | bytes11(0) | uint64(id)\n     */\n    function isIDAddress(address _a) internal pure returns (bool isID, uint64 id) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Zeroes out the last 8 bytes of _a\n            let a_mask := and(_a, U64_MASK)\n\n            // If the result is equal to the ZERO_ID_ADDRESS,\n            // _a is an ID address.\n            if eq(a_mask, ZERO_ID_ADDRESS) {\n                isID := true\n                id := and(_a, MAX_U64)\n            }\n        }\n    }\n\n    /**\n     * @notice Given an Actor ID, converts it to an EVM-compatible address.\n     * \n     * If _id has a corresponding Eth address, we return that\n     * Otherwise, _id is returned as a 20-byte ID address\n     */\n    function toAddress(uint64 _id) internal view returns (address) {\n        (bool success, address eth) = getEthAddress(_id);\n        if (success) {\n            return eth;\n        } else {\n            return toIDAddress(_id);\n        }\n    }\n\n    /**\n     * @notice Given an Actor ID, converts it to a 20-byte ID address\n     * \n     * Note that this method does NOT check if the _id has a corresponding\n     * Eth address. If you want that, try toAddress above.\n     */\n    function toIDAddress(uint64 _id) internal pure returns (address addr) {\n        /// @solidity memory-safe-assembly\n        assembly { addr := or(ZERO_ID_ADDRESS, _id) }\n    }\n\n    // An address with all bits set. Used to clean higher-order bits\n    address constant ADDRESS_MASK = 0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF;\n\n    /**\n     * @notice Convert ID to Eth address by querying the lookup_delegated_address\n     * precompile.\n     *\n     * If the actor ID corresponds to an Eth address, this will return (true, addr)\n     * If the actor ID does NOT correspond to an Eth address, this will return (false, 0)\n     * \n     * --- About ---\n     * \n     * The lookup_delegated_address precompile retrieves the actor state corresponding\n     * to the id. If the actor has a delegated address, it is returned using fil\n     * address encoding (see below).\n     *\n     * f4, or delegated addresses, have a namespace as well as a subaddress that can\n     * be up to 54 bytes long. This is to support future address formats. Currently,\n     * though, the f4 format is only used to support Eth addresses.\n     *\n     * Consequently, the only addresses lookup_delegated_address should return have:\n     * - Prefix:     \"f4\" address      - 1 byte   - (0x04)\n     * - Namespace:  EAM actor id 10   - 1 byte   - (0x0A)\n     * - Subaddress: EVM-style address - 20 bytes - (EVM address)\n     * \n     * This method checks that the precompile output exactly matches this format:\n     * 22 bytes, starting with 0x040A.\n     * \n     * If we get anything else, we return (false, 0x00).\n     */\n    function getEthAddress(uint64 _id) internal view returns (bool success, address eth) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Call LOOKUP_DELEGATED_ADDRESS precompile\n            //\n            // Input: uint64 id, in standard EVM format (left-padded to 32 bytes)\n            //\n            // Output: LOOKUP_DELEGATED_ADDRESS returns an f4-encoded address. \n            // For Eth addresses, the format is a 20-byte address, prefixed with\n            // 0x040A. So, we expect exactly 22 bytes of returndata.\n            // \n            // Since we want to read an address from the returndata, we place the\n            // output at memory offset 10, which means the address is already\n            // word-aligned (10 + 22 == 32)\n            //\n            // NOTE: success and returndatasize checked at the end of the function\n            mstore(0, _id)\n            success := staticcall(gas(), LOOKUP_DELEGATED_ADDRESS, 0, 32, 10, 22)\n\n            // Read result. LOOKUP_DELEGATED_ADDRESS returns raw, unpadded\n            // bytes. Assuming we succeeded, we can extract the eth address\n            // by reading from offset 0 and cleaning any higher-order bits:\n            let result := mload(0)\n            eth := and(ADDRESS_MASK, result)\n\n            // Check that the returned address has the expected prefix. The\n            // prefix is the first 2 bytes of returndata, located at memory \n            // offset 10. \n            // \n            // To isolate it, shift right by the # of bits in an address (160),\n            // and clean all but the last 2 bytes.\n            let prefix := and(0xFFFF, shr(160, result))\n            if iszero(eq(prefix, 0x040A)) {\n                success := false\n                eth := 0\n            }\n        }\n        // Checking these here because internal functions don't have\n        // a good way to return from inline assembly.\n        //\n        // But, it's very important we do check these. If the output\n        // wasn't exactly what we expected, we assume there's no eth\n        // address and return (false, 0).\n        if (!success || returnDataSize() != 22) {\n            return (false, address(0));\n        }\n    }\n\n    /**\n     * @notice Convert ID to Eth address by querying the resolve_address precompile.\n     *\n     * If the passed-in address is already in ID form, returns (true, id)\n     * If the Eth address has no corresponding ID address, returns (false, 0)\n     * Otherwise, the lookup succeeds and this returns (true, id)\n     * \n     * --- About ---\n     *\n     * The resolve_address precompile can resolve any fil-encoded address to its\n     * corresponding actor ID, if there is one. This means resolve_address handles\n     * all address protocols: f0, f1, f2, f3, and f4. \n     * \n     * An address might not have an actor ID if it does not exist in state yet. A \n     * typical example of this is a public-key-type address, which can exist even \n     * if it hasn't been used on-chain yet.\n     *\n     * This method is only meant to look up ids for Eth addresses, so it contains\n     * very specific logic to correctly encode an Eth address into its f4 format.\n     * \n     * Note: This is essentially just the reverse of getEthAddress above, so check\n     * the comments there for more details on f4 encoding.\n     */\n    function getActorID(address _eth) internal view returns (bool success, uint64 id) {\n        // First - if we already have an ID address, we can just return that\n        (success, id) = isIDAddress(_eth);\n        if (success) {\n            return (success, id);\n        }\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Convert Eth address to f4 format: 22 bytes, with prefix 0x040A.\n            // (see getEthAddress above for more details on this format)\n            //\n            // We're going to pass the 22 bytes to the precompile without any\n            // padding or length, so everything will be left-aligned. Since \n            // addresses are right-aligned, we need to shift everything left:\n            // - 0x040A prefix - shifted left 240 bits (30 bytes * 8 bits)\n            // - Eth address   - shifted left 80 bits  (10 bytes * 8 bits)\n            let input := or(\n                shl(240, 0x040A),\n                shl(80, _eth)\n            )\n            // Call RESOLVE_ADDRESS precompile\n            //\n            // Input: Eth address in f4 format. 22 bytes, no padding or length\n            //\n            // Output: RESOLVE_ADDRESS returns a uint64 actor ID in standard EVM\n            // format (left-padded to 32 bytes).\n            // \n            // NOTE: success and returndatasize checked at the end of the function\n            mstore(0, input)\n            success := staticcall(gas(), RESOLVE_ADDRESS, 0, 22, 0, 32)\n\n            // Read result and clean higher-order bits, just in case.\n            // If successful, this will be the actor id.\n            id := and(MAX_U64, mload(0))\n        }\n        // Checking these here because internal functions don't have\n        // a good way to return from inline assembly.\n        //\n        // But, it's very important we do check these. If the output\n        // wasn't exactly what we expected, we assume there's no ID\n        // address and return (false, 0).\n        if (!success || returnDataSize() != 32) {\n            return (false, 0);\n        }\n    }\n\n    /**\n     * @notice Replacement for Solidity's address.send and address.transfer\n     * This sends _amount to _recipient, forwarding all available gas and\n     * reverting if there are any errors.\n     *\n     * If _recpient is an Eth address, this works the way you'd\n     * expect the EVM to work.\n     *\n     * If _recpient is an ID address, this works if:\n     * 1. The ID corresponds to an Eth EOA address      (EthAccount actor)\n     * 2. The ID corresponds to an Eth contract address (EVM actor)\n     * 3. The ID corresponds to a BLS/SECPK address     (Account actor)\n     *\n     * If _recpient is some other Filecoin-native actor, this will revert.\n     */\n    function sendValue(address payable _recipient, uint _amount) internal {\n        if (address(this).balance < _amount) revert InsufficientFunds();\n\n        (bool success, ) = _recipient.call{value: _amount}(\"\");\n        if (!success) revert CallFailed();\n    }\n\n    function returnDataSize() private pure returns (uint size) {\n        /// @solidity memory-safe-assembly\n        assembly { size := returndatasize() }\n    }\n}\n"
    },
    "filecoin-solidity-api/contracts/v0.8/cbor/BigIntCbor.sol": {
      "content": "/*******************************************************************************\n *   (c) 2022 Zondax AG\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n//\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\n\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.17;\n\nimport \"../types/CommonTypes.sol\";\n\n/// @title This library is a set of functions meant to handle CBOR serialization and deserialization for BigInt type\n/// @author Zondax AG\nlibrary BigIntCBOR {\n    /// @notice serialize BigInt instance to bytes\n    /// @param num BigInt instance to serialize\n    /// @return serialized BigInt as bytes\n    function serializeBigInt(CommonTypes.BigInt memory num) internal pure returns (bytes memory) {\n        bytes memory raw = new bytes(num.val.length + 1);\n\n        raw[0] = num.neg == true ? bytes1(0x01) : bytes1(0x00);\n\n        uint index = 1;\n        for (uint i = 0; i < num.val.length; i++) {\n            raw[index] = num.val[i];\n            index++;\n        }\n\n        return raw;\n    }\n\n    /// @notice deserialize big int (encoded as bytes) to BigInt instance\n    /// @param raw as bytes to parse\n    /// @return parsed BigInt instance\n    function deserializeBigInt(bytes memory raw) internal pure returns (CommonTypes.BigInt memory) {\n        if (raw.length == 0) {\n            return CommonTypes.BigInt(hex\"00\", false);\n        }\n\n        bytes memory val = new bytes(raw.length - 1);\n        bool neg = false;\n\n        if (raw[0] == 0x01) {\n            neg = true;\n        }\n\n        for (uint i = 1; i < raw.length; i++) {\n            val[i - 1] = raw[i];\n        }\n\n        return CommonTypes.BigInt(val, neg);\n    }\n}\n"
    },
    "filecoin-solidity-api/contracts/v0.8/cbor/BytesCbor.sol": {
      "content": "/*******************************************************************************\n *   (c) 2022 Zondax AG\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n//\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\n\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.17;\n\nimport \"solidity-cborutils/contracts/CBOR.sol\";\n\nimport \"../utils/CborDecode.sol\";\nimport \"../utils/Misc.sol\";\n\nimport \"../types/CommonTypes.sol\";\n\nimport \"./BigIntCbor.sol\";\n\n/// @title This library is a set of functions meant to handle CBOR serialization and deserialization for bytes\n/// @author Zondax AG\nlibrary BytesCBOR {\n    using CBOR for CBOR.CBORBuffer;\n    using CBORDecoder for bytes;\n    using BigIntCBOR for bytes;\n\n    /// @notice serialize raw bytes as cbor bytes string encoded\n    /// @param data raw data in bytes\n    /// @return encoded cbor bytes\n    function serializeBytes(bytes memory data) internal pure returns (bytes memory) {\n        uint256 capacity = Misc.getBytesSize(data);\n\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\n\n        buf.writeBytes(data);\n\n        return buf.data();\n    }\n\n    /// @notice serialize raw address (in bytes) as cbor bytes string encoded (how an address is passed to filecoin actors)\n    /// @param addr raw address in bytes\n    /// @return encoded address as cbor bytes\n    function serializeAddress(bytes memory addr) internal pure returns (bytes memory) {\n        return serializeBytes(addr);\n    }\n\n    /// @notice encoded null value as cbor\n    /// @return cbor encoded null\n    function serializeNull() internal pure returns (bytes memory) {\n        CBOR.CBORBuffer memory buf = CBOR.create(1);\n\n        buf.writeNull();\n\n        return buf.data();\n    }\n\n    /// @notice deserialize cbor encoded filecoin address to bytes\n    /// @param ret cbor encoded filecoin address\n    /// @return raw bytes representing a filecoin address\n    function deserializeAddress(bytes memory ret) internal pure returns (bytes memory) {\n        bytes memory addr;\n        uint byteIdx = 0;\n\n        (addr, byteIdx) = ret.readBytes(byteIdx);\n\n        return addr;\n    }\n\n    /// @notice deserialize cbor encoded string\n    /// @param ret cbor encoded string (in bytes)\n    /// @return decoded string\n    function deserializeString(bytes memory ret) internal pure returns (string memory) {\n        string memory response;\n        uint byteIdx = 0;\n\n        (response, byteIdx) = ret.readString(byteIdx);\n\n        return response;\n    }\n\n    /// @notice deserialize cbor encoded bool\n    /// @param ret cbor encoded bool (in bytes)\n    /// @return decoded bool\n    function deserializeBool(bytes memory ret) internal pure returns (bool) {\n        bool response;\n        uint byteIdx = 0;\n\n        (response, byteIdx) = ret.readBool(byteIdx);\n\n        return response;\n    }\n\n    /// @notice deserialize cbor encoded BigInt\n    /// @param ret cbor encoded BigInt (in bytes)\n    /// @return decoded BigInt\n    /// @dev BigInts are cbor encoded as bytes string first. That is why it unwraps the cbor encoded bytes first, and then parse the result into BigInt\n    function deserializeBytesBigInt(bytes memory ret) internal pure returns (CommonTypes.BigInt memory) {\n        bytes memory tmp;\n        uint byteIdx = 0;\n\n        if (ret.length > 0) {\n            (tmp, byteIdx) = ret.readBytes(byteIdx);\n            if (tmp.length > 0) {\n                return tmp.deserializeBigInt();\n            }\n        }\n\n        return CommonTypes.BigInt(new bytes(0), false);\n    }\n\n    /// @notice deserialize cbor encoded uint64\n    /// @param rawResp cbor encoded uint64 (in bytes)\n    /// @return decoded uint64\n    function deserializeUint64(bytes memory rawResp) internal pure returns (uint64) {\n        uint byteIdx = 0;\n        uint64 value;\n\n        (value, byteIdx) = rawResp.readUInt64(byteIdx);\n        return value;\n    }\n\n    /// @notice deserialize cbor encoded int64\n    /// @param rawResp cbor encoded int64 (in bytes)\n    /// @return decoded int64\n    function deserializeInt64(bytes memory rawResp) internal pure returns (int64) {\n        uint byteIdx = 0;\n        int64 value;\n\n        (value, byteIdx) = rawResp.readInt64(byteIdx);\n        return value;\n    }\n}\n"
    },
    "filecoin-solidity-api/contracts/v0.8/cbor/FilecoinCbor.sol": {
      "content": "/*******************************************************************************\n *   (c) 2022 Zondax AG\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n//\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\n\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.17;\n\nimport \"solidity-cborutils/contracts/CBOR.sol\";\nimport \"@ensdomains/buffer/contracts/Buffer.sol\";\n\nimport \"../utils/CborDecode.sol\";\nimport \"../utils/Misc.sol\";\n\nimport \"../types/CommonTypes.sol\";\n\nimport \"../cbor/BigIntCbor.sol\";\n\n/// @title This library is a set of functions meant to handle CBOR serialization and deserialization for general data types on the filecoin network.\n/// @author Zondax AG\nlibrary FilecoinCBOR {\n    using Buffer for Buffer.buffer;\n    using CBOR for CBOR.CBORBuffer;\n    using CBORDecoder for *;\n    using BigIntCBOR for *;\n\n    uint8 private constant MAJOR_TYPE_TAG = 6;\n    uint8 private constant TAG_TYPE_CID_CODE = 42;\n    uint8 private constant PAYLOAD_LEN_8_BITS = 24;\n\n    /// @notice Write a CID into a CBOR buffer.\n    /// @dev The CBOR major will be 6 (type 'tag') and the tag type value is 42, as per CBOR tag assignments.\n    /// @dev https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml\n    /// @param buf buffer containing the actual CBOR serialization process\n    /// @param value CID value to serialize as CBOR\n    function writeCid(CBOR.CBORBuffer memory buf, bytes memory value) internal pure {\n        buf.buf.appendUint8(uint8(((MAJOR_TYPE_TAG << 5) | PAYLOAD_LEN_8_BITS)));\n        buf.buf.appendUint8(TAG_TYPE_CID_CODE);\n        // See https://ipld.io/specs/codecs/dag-cbor/spec/#links for explanation on 0x00 prefix.\n        buf.writeBytes(bytes.concat(hex'00', value));\n    }\n\n    function readCid(bytes memory cborData, uint byteIdx) internal pure returns (CommonTypes.Cid memory, uint) {\n        uint8 maj;\n        uint value;\n\n        (maj, value, byteIdx) = cborData.parseCborHeader(byteIdx);\n        require(maj == MAJOR_TYPE_TAG, \"expected major type tag when parsing cid\");\n        require(value == TAG_TYPE_CID_CODE, \"expected tag 42 when parsing cid\");\n\n        bytes memory raw;\n        (raw, byteIdx) = cborData.readBytes(byteIdx);\n        require(raw[0] == 0x00, \"expected first byte to be 0 when parsing cid\");\n\n        // Pop off the first byte, which corresponds to the historical multibase 0x00 byte.\n        // https://ipld.io/specs/codecs/dag-cbor/spec/#links\n        CommonTypes.Cid memory ret;\n        ret.data = new bytes(raw.length - 1);\n        for (uint256 i = 1; i < raw.length; i++) {\n            ret.data[i-1] = raw[i];\n        }\n\n        return (ret, byteIdx);\n    }\n\n    /// @notice serialize filecoin address to cbor encoded\n    /// @param addr filecoin address to serialize\n    /// @return cbor serialized data as bytes\n    function serializeAddress(CommonTypes.FilAddress memory addr) internal pure returns (bytes memory) {\n        uint256 capacity = Misc.getBytesSize(addr.data);\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\n\n        buf.writeBytes(addr.data);\n\n        return buf.data();\n    }\n\n    /// @notice serialize a BigInt value wrapped in a cbor fixed array.\n    /// @param value BigInt to serialize as cbor inside an\n    /// @return cbor serialized data as bytes\n    function serializeArrayBigInt(CommonTypes.BigInt memory value) internal pure returns (bytes memory) {\n        uint256 capacity = 0;\n        bytes memory valueBigInt = value.serializeBigInt();\n\n        capacity += Misc.getPrefixSize(1);\n        capacity += Misc.getBytesSize(valueBigInt);\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\n\n        buf.startFixedArray(1);\n        buf.writeBytes(value.serializeBigInt());\n\n        return buf.data();\n    }\n\n    /// @notice serialize a FilAddress value wrapped in a cbor fixed array.\n    /// @param addr FilAddress to serialize as cbor inside an\n    /// @return cbor serialized data as bytes\n    function serializeArrayFilAddress(CommonTypes.FilAddress memory addr) internal pure returns (bytes memory) {\n        uint256 capacity = 0;\n\n        capacity += Misc.getPrefixSize(1);\n        capacity += Misc.getBytesSize(addr.data);\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\n\n        buf.startFixedArray(1);\n        buf.writeBytes(addr.data);\n\n        return buf.data();\n    }\n\n    /// @notice deserialize a FilAddress wrapped on a cbor fixed array coming from a actor call\n    /// @param rawResp cbor encoded response\n    /// @return ret new instance of FilAddress created based on parsed data\n    function deserializeArrayFilAddress(bytes memory rawResp) internal pure returns (CommonTypes.FilAddress memory ret) {\n        uint byteIdx = 0;\n        uint len;\n\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\n        require(len == 1, \"Wrong numbers of parameters (should find 1)\");\n\n        (ret.data, byteIdx) = rawResp.readBytes(byteIdx);\n\n        return ret;\n    }\n\n    /// @notice deserialize a BigInt wrapped on a cbor fixed array coming from a actor call\n    /// @param rawResp cbor encoded response\n    /// @return ret new instance of BigInt created based on parsed data\n    function deserializeArrayBigInt(bytes memory rawResp) internal pure returns (CommonTypes.BigInt memory) {\n        uint byteIdx = 0;\n        uint len;\n        bytes memory tmp;\n\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\n        assert(len == 1);\n\n        (tmp, byteIdx) = rawResp.readBytes(byteIdx);\n        return tmp.deserializeBigInt();\n    }\n\n    /// @notice serialize UniversalReceiverParams struct to cbor in order to pass as arguments to an actor\n    /// @param params UniversalReceiverParams to serialize as cbor\n    /// @return cbor serialized data as bytes\n    function serializeUniversalReceiverParams(CommonTypes.UniversalReceiverParams memory params) internal pure returns (bytes memory) {\n        uint256 capacity = 0;\n\n        capacity += Misc.getPrefixSize(2);\n        capacity += Misc.getPrefixSize(params.type_);\n        capacity += Misc.getBytesSize(params.payload);\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\n\n        buf.startFixedArray(2);\n        buf.writeUInt64(params.type_);\n        buf.writeBytes(params.payload);\n\n        return buf.data();\n    }\n\n    /// @notice deserialize UniversalReceiverParams cbor to struct when receiving a message\n    /// @param rawResp cbor encoded response\n    /// @return ret new instance of UniversalReceiverParams created based on parsed data\n    function deserializeUniversalReceiverParams(bytes memory rawResp) internal pure returns (CommonTypes.UniversalReceiverParams memory ret) {\n        uint byteIdx = 0;\n        uint len;\n\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\n        require(len == 2, \"Wrong numbers of parameters (should find 2)\");\n\n        (ret.type_, byteIdx) = rawResp.readUInt32(byteIdx);\n        (ret.payload, byteIdx) = rawResp.readBytes(byteIdx);\n    }\n\n    /// @notice attempt to read a FilActorId value\n    /// @param rawResp cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    /// @return a FilActorId decoded from input bytes and the byte index after moving past the value\n    function readFilActorId(bytes memory rawResp, uint byteIdx) internal pure returns (CommonTypes.FilActorId, uint) {\n        uint64 tmp = 0;\n\n        (tmp, byteIdx) = rawResp.readUInt64(byteIdx);\n        return (CommonTypes.FilActorId.wrap(tmp), byteIdx);\n    }\n\n    /// @notice write FilActorId into a cbor buffer\n    /// @dev FilActorId is just wrapping a uint64\n    /// @param buf buffer containing the actual cbor serialization process\n    /// @param id FilActorId to serialize as cbor\n    function writeFilActorId(CBOR.CBORBuffer memory buf, CommonTypes.FilActorId id) internal pure {\n        buf.writeUInt64(CommonTypes.FilActorId.unwrap(id));\n    }\n\n    /// @notice attempt to read a ChainEpoch value\n    /// @param rawResp cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    /// @return a ChainEpoch decoded from input bytes and the byte index after moving past the value\n    function readChainEpoch(bytes memory rawResp, uint byteIdx) internal pure returns (CommonTypes.ChainEpoch, uint) {\n        int64 tmp = 0;\n\n        (tmp, byteIdx) = rawResp.readInt64(byteIdx);\n        return (CommonTypes.ChainEpoch.wrap(tmp), byteIdx);\n    }\n\n    /// @notice write ChainEpoch into a cbor buffer\n    /// @dev ChainEpoch is just wrapping a int64\n    /// @param buf buffer containing the actual cbor serialization process\n    /// @param id ChainEpoch to serialize as cbor\n    function writeChainEpoch(CBOR.CBORBuffer memory buf, CommonTypes.ChainEpoch id) internal pure {\n        buf.writeInt64(CommonTypes.ChainEpoch.unwrap(id));\n    }\n\n    /// @notice write DealLabel into a cbor buffer\n    /// @param buf buffer containing the actual cbor serialization process\n    /// @param label DealLabel to serialize as cbor\n    function writeDealLabel(CBOR.CBORBuffer memory buf, CommonTypes.DealLabel memory label) internal pure {\n        label.isString ? buf.writeString(string(label.data)) : buf.writeBytes(label.data);\n    }\n\n    /// @notice deserialize DealLabel cbor to struct when receiving a message\n    /// @param rawResp cbor encoded response\n    /// @return ret new instance of DealLabel created based on parsed data\n    function deserializeDealLabel(bytes memory rawResp) internal pure returns (CommonTypes.DealLabel memory) {\n        uint byteIdx = 0;\n        CommonTypes.DealLabel memory label;\n\n        (label, byteIdx) = readDealLabel(rawResp, byteIdx);\n        return label;\n    }\n\n    /// @notice attempt to read a DealLabel value\n    /// @param rawResp cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    /// @return a DealLabel decoded from input bytes and the byte index after moving past the value\n    function readDealLabel(bytes memory rawResp, uint byteIdx) internal pure returns (CommonTypes.DealLabel memory, uint) {\n        uint8 maj;\n        uint len;\n\n        (maj, len, byteIdx) = CBORDecoder.parseCborHeader(rawResp, byteIdx);\n        require(maj == MajByteString || maj == MajTextString, \"invalid maj (expected MajByteString or MajTextString)\");\n\n        uint max_len = byteIdx + len;\n        bytes memory slice = new bytes(len);\n        uint slice_index = 0;\n        for (uint256 i = byteIdx; i < max_len; i++) {\n            slice[slice_index] = rawResp[i];\n            slice_index++;\n        }\n\n        return (CommonTypes.DealLabel(slice, maj == MajTextString), byteIdx + len);\n    }\n}\n"
    },
    "filecoin-solidity-api/contracts/v0.8/cbor/MinerCbor.sol": {
      "content": "/*******************************************************************************\n *   (c) 2022 Zondax AG\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n//\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\n\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.17;\n\nimport \"solidity-cborutils/contracts/CBOR.sol\";\n\nimport \"./BigIntCbor.sol\";\nimport \"./FilecoinCbor.sol\";\n\nimport \"../types/MinerTypes.sol\";\nimport \"../types/CommonTypes.sol\";\n\nimport \"../utils/CborDecode.sol\";\nimport \"../utils/Misc.sol\";\n\n/// @title This library is a set of functions meant to handle CBOR parameters serialization and return values deserialization for Miner actor exported methods.\n/// @author Zondax AG\nlibrary MinerCBOR {\n    using CBOR for CBOR.CBORBuffer;\n    using CBORDecoder for bytes;\n    using BigIntCBOR for *;\n    using FilecoinCBOR for *;\n\n    /// @notice serialize ChangeBeneficiaryParams struct to cbor in order to pass as arguments to the miner actor\n    /// @param params ChangeBeneficiaryParams to serialize as cbor\n    /// @return cbor serialized data as bytes\n    function serializeChangeBeneficiaryParams(MinerTypes.ChangeBeneficiaryParams memory params) internal pure returns (bytes memory) {\n        uint256 capacity = 0;\n        bytes memory new_quota = params.new_quota.serializeBigInt();\n\n        capacity += Misc.getPrefixSize(3);\n        capacity += Misc.getBytesSize(params.new_beneficiary.data);\n        capacity += Misc.getBytesSize(new_quota);\n        capacity += Misc.getChainEpochSize(params.new_expiration);\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\n\n        buf.startFixedArray(3);\n        buf.writeBytes(params.new_beneficiary.data);\n        buf.writeBytes(new_quota);\n        buf.writeChainEpoch(params.new_expiration);\n\n        return buf.data();\n    }\n\n    /// @notice deserialize GetOwnerReturn struct from cbor encoded bytes coming from a miner actor call\n    /// @param rawResp cbor encoded response\n    /// @return ret new instance of GetOwnerReturn created based on parsed data\n    function deserializeGetOwnerReturn(bytes memory rawResp) internal pure returns (MinerTypes.GetOwnerReturn memory ret) {\n        uint byteIdx = 0;\n        uint len;\n\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\n        assert(len == 2);\n\n        (ret.owner.data, byteIdx) = rawResp.readBytes(byteIdx);\n\n        if (!rawResp.isNullNext(byteIdx)) {\n            (ret.proposed.data, byteIdx) = rawResp.readBytes(byteIdx);\n        } else {\n            ret.proposed.data = new bytes(0);\n        }\n\n        return ret;\n    }\n\n    /// @notice deserialize GetBeneficiaryReturn struct from cbor encoded bytes coming from a miner actor call\n    /// @param rawResp cbor encoded response\n    /// @return ret new instance of GetBeneficiaryReturn created based on parsed data\n    function deserializeGetBeneficiaryReturn(bytes memory rawResp) internal pure returns (MinerTypes.GetBeneficiaryReturn memory ret) {\n        bytes memory tmp;\n        uint byteIdx = 0;\n        uint len;\n\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\n        assert(len == 2);\n\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\n        assert(len == 2);\n\n        (ret.active.beneficiary.data, byteIdx) = rawResp.readBytes(byteIdx);\n\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\n        assert(len == 3);\n\n        (tmp, byteIdx) = rawResp.readBytes(byteIdx);\n        if (tmp.length > 0) {\n            ret.active.term.quota = tmp.deserializeBigInt();\n        } else {\n            ret.active.term.quota = CommonTypes.BigInt(new bytes(0), false);\n        }\n\n        (tmp, byteIdx) = rawResp.readBytes(byteIdx);\n        if (tmp.length > 0) {\n            ret.active.term.used_quota = tmp.deserializeBigInt();\n        } else {\n            ret.active.term.used_quota = CommonTypes.BigInt(new bytes(0), false);\n        }\n\n        (ret.active.term.expiration, byteIdx) = rawResp.readChainEpoch(byteIdx);\n\n        if (!rawResp.isNullNext(byteIdx)) {\n            (len, byteIdx) = rawResp.readFixedArray(byteIdx);\n            assert(len == 5);\n\n            (ret.proposed.new_beneficiary.data, byteIdx) = rawResp.readBytes(byteIdx);\n\n            (tmp, byteIdx) = rawResp.readBytes(byteIdx);\n            if (tmp.length > 0) {\n                ret.proposed.new_quota = tmp.deserializeBigInt();\n            } else {\n                ret.proposed.new_quota = CommonTypes.BigInt(new bytes(0), false);\n            }\n\n            (ret.proposed.new_expiration, byteIdx) = rawResp.readChainEpoch(byteIdx);\n            (ret.proposed.approved_by_beneficiary, byteIdx) = rawResp.readBool(byteIdx);\n            (ret.proposed.approved_by_nominee, byteIdx) = rawResp.readBool(byteIdx);\n        }\n\n        return ret;\n    }\n\n    /// @notice deserialize GetVestingFundsReturn struct from cbor encoded bytes coming from a miner actor call\n    /// @param rawResp cbor encoded response\n    /// @return vesting_funds new instance of GetVestingFundsReturn created based on parsed data\n    function deserializeGetVestingFundsReturn(bytes memory rawResp) internal pure returns (MinerTypes.VestingFunds[] memory vesting_funds) {\n        CommonTypes.ChainEpoch epoch;\n        CommonTypes.BigInt memory amount;\n        bytes memory tmp;\n\n        uint byteIdx = 0;\n        uint len;\n        uint leni;\n\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\n        assert(len == 1);\n\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\n        vesting_funds = new MinerTypes.VestingFunds[](len);\n\n        for (uint i = 0; i < len; i++) {\n            (leni, byteIdx) = rawResp.readFixedArray(byteIdx);\n            assert(leni == 2);\n\n            (epoch, byteIdx) = rawResp.readChainEpoch(byteIdx);\n            (tmp, byteIdx) = rawResp.readBytes(byteIdx);\n\n            amount = tmp.deserializeBigInt();\n            vesting_funds[i] = MinerTypes.VestingFunds(epoch, amount);\n        }\n    }\n\n    /// @notice serialize ChangeWorkerAddressParams struct to cbor in order to pass as arguments to the miner actor\n    /// @param params ChangeWorkerAddressParams to serialize as cbor\n    /// @return cbor serialized data as bytes\n    function serializeChangeWorkerAddressParams(MinerTypes.ChangeWorkerAddressParams memory params) internal pure returns (bytes memory) {\n        uint256 capacity = 0;\n\n        capacity += Misc.getPrefixSize(2);\n        capacity += Misc.getBytesSize(params.new_worker.data);\n        capacity += Misc.getPrefixSize(uint256(params.new_control_addresses.length));\n        for (uint64 i = 0; i < params.new_control_addresses.length; i++) {\n            capacity += Misc.getBytesSize(params.new_control_addresses[i].data);\n        }\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\n\n        buf.startFixedArray(2);\n        buf.writeBytes(params.new_worker.data);\n        buf.startFixedArray(uint64(params.new_control_addresses.length));\n\n        for (uint64 i = 0; i < params.new_control_addresses.length; i++) {\n            buf.writeBytes(params.new_control_addresses[i].data);\n        }\n\n        return buf.data();\n    }\n\n    /// @notice serialize ChangeMultiaddrsParams struct to cbor in order to pass as arguments to the miner actor\n    /// @param new_multi_addrs ChangeMultiaddrsParams to serialize as cbor\n    /// @return cbor serialized data as bytes\n    function serializeChangeMultiaddrsParams(CommonTypes.FilAddress[] memory new_multi_addrs) internal pure returns (bytes memory) {\n        uint256 capacity = 0;\n\n        capacity += Misc.getPrefixSize(1);\n        capacity += Misc.getPrefixSize(uint256(new_multi_addrs.length));\n        for (uint64 i = 0; i < new_multi_addrs.length; i++) {\n            capacity += Misc.getBytesSize(new_multi_addrs[i].data);\n        }\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\n\n        buf.startFixedArray(1);\n        buf.startFixedArray(uint64(new_multi_addrs.length));\n\n        for (uint64 i = 0; i < new_multi_addrs.length; i++) {\n            buf.writeBytes(new_multi_addrs[i].data);\n        }\n\n        return buf.data();\n    }\n\n    /// @notice deserialize GetMultiaddrsReturn struct from cbor encoded bytes coming from a miner actor call\n    /// @param rawResp cbor encoded response\n    /// @return multi_addrs deserialized addresses\n    function deserializeGetMultiaddrsReturn(bytes memory rawResp) internal pure returns (CommonTypes.FilAddress[] memory multi_addrs) {\n        uint byteIdx = 0;\n        uint len;\n\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\n        assert(len == 1);\n\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\n        multi_addrs = new CommonTypes.FilAddress[](len);\n\n        for (uint i = 0; i < len; i++) {\n            (multi_addrs[i].data, byteIdx) = rawResp.readBytes(byteIdx);\n        }\n    }\n}\n"
    },
    "filecoin-solidity-api/contracts/v0.8/MinerAPI.sol": {
      "content": "/*******************************************************************************\n *   (c) 2022 Zondax AG\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n//\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\n\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.17;\n\nimport \"./types/MinerTypes.sol\";\nimport \"./types/CommonTypes.sol\";\nimport \"./cbor/MinerCbor.sol\";\nimport \"./cbor/FilecoinCbor.sol\";\nimport \"./cbor/BytesCbor.sol\";\nimport \"./utils/Misc.sol\";\nimport \"./utils/Actor.sol\";\n\n/// @title This library is a proxy to a built-in Miner actor. Calling one of its methods will result in a cross-actor call being performed.\n/// @notice During miner initialization, a miner actor is created on the chain, and this actor gives the miner its ID f0.... The miner actor is in charge of collecting all the payments sent to the miner.\n/// @dev For more info about the miner actor, please refer to https://lotus.filecoin.io/storage-providers/operate/addresses/\n/// @author Zondax AG\nlibrary MinerAPI {\n    using MinerCBOR for *;\n    using FilecoinCBOR for *;\n    using BytesCBOR for bytes;\n\n    /// @notice Income and returned collateral are paid to this address\n    /// @notice This address is also allowed to change the worker address for the miner\n    /// @param target The miner actor id you want to interact with\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\n    /// @return the owner address of a Miner\n    function getOwner(CommonTypes.FilActorId target) internal view returns (int256, MinerTypes.GetOwnerReturn memory) {\n        bytes memory raw_request = new bytes(0);\n\n        (int256 exit_code, bytes memory result) = Actor.callNonSingletonByIDReadOnly(target, MinerTypes.GetOwnerMethodNum, Misc.NONE_CODEC, raw_request);\n\n        if (exit_code == 0) {\n            return (0, result.deserializeGetOwnerReturn());\n        }\n\n        MinerTypes.GetOwnerReturn memory empty_res;\n        return (exit_code, empty_res);\n    }\n\n    /// @notice Proposes or confirms a change of owner address.\n    /// @notice If invoked by the current owner, proposes a new owner address for confirmation. If the proposed address is the current owner address, revokes any existing proposal that proposed address.\n    /// @param target  The miner actor id you want to interact with\n    /// @param addr New owner address\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\n    function changeOwnerAddress(CommonTypes.FilActorId target, CommonTypes.FilAddress memory addr) internal returns (int256) {\n        bytes memory raw_request = addr.serializeAddress();\n\n        (int256 exit_code, bytes memory result) = Actor.callNonSingletonByID(\n            target,\n            MinerTypes.ChangeOwnerAddressMethodNum,\n            Misc.CBOR_CODEC,\n            raw_request,\n            0,\n            false\n        );\n        if (result.length != 0) {\n            revert Actor.InvalidResponseLength();\n        }\n\n        return exit_code;\n    }\n\n    /// @notice Returns information whether an address is miner's controlling address\n    /// @param target  The miner actor id you want to interact with\n    /// @param addr The \"controlling\" addresses are the Owner, the Worker, and all Control Addresses.\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\n    /// @return Whether the provided address is \"controlling\".\n    function isControllingAddress(CommonTypes.FilActorId target, CommonTypes.FilAddress memory addr) internal view returns (int256, bool) {\n        bytes memory raw_request = addr.serializeAddress();\n\n        (int256 exit_code, bytes memory result) = Actor.callNonSingletonByIDReadOnly(\n            target,\n            MinerTypes.IsControllingAddressMethodNum,\n            Misc.CBOR_CODEC,\n            raw_request\n        );\n\n        if (exit_code == 0) {\n            return (0, result.deserializeBool());\n        }\n\n        bool empty_res;\n        return (exit_code, empty_res);\n    }\n\n    /// @dev For more information about sector sizes, please refer to https://spec.filecoin.io/systems/filecoin_mining/sector/#section-systems.filecoin_mining.sector\n    /// @param target The miner actor id you want to interact with\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\n    /// @return the miner's sector size.\n    function getSectorSize(CommonTypes.FilActorId target) internal view returns (int256, uint64) {\n        bytes memory raw_request = new bytes(0);\n\n        (int256 exit_code, bytes memory result) = Actor.callNonSingletonByIDReadOnly(target, MinerTypes.GetSectorSizeMethodNum, Misc.NONE_CODEC, raw_request);\n\n        if (exit_code == 0) {\n            return (0, result.deserializeUint64());\n        }\n\n        uint64 empty_res;\n        return (exit_code, empty_res);\n    }\n\n    /// @notice This is calculated as actor balance - (vesting funds + pre-commit deposit + initial pledge requirement + fee debt)\n    /// @notice Can go negative if the miner is in IP debt.\n    /// @param target The miner actor id you want to interact with\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\n    /// @return the available balance of this miner.\n    function getAvailableBalance(CommonTypes.FilActorId target) internal view returns (int256, CommonTypes.BigInt memory) {\n        bytes memory raw_request = new bytes(0);\n\n        (int256 exit_code, bytes memory result) = Actor.callNonSingletonByIDReadOnly(\n            target,\n            MinerTypes.GetAvailableBalanceMethodNum,\n            Misc.NONE_CODEC,\n            raw_request\n        );\n\n        if (exit_code == 0) {\n            return (0, result.deserializeBytesBigInt());\n        }\n\n        CommonTypes.BigInt memory empty_res;\n        return (exit_code, empty_res);\n    }\n\n    /// @notice Returns specified miner's vesting funds\n    /// @param target The miner actor id you want to interact with\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\n    /// @return the funds vesting in this miner as a list of (vesting_epoch, vesting_amount) tuples.\n    function getVestingFunds(CommonTypes.FilActorId target) internal view returns (int256, MinerTypes.VestingFunds[] memory) {\n        bytes memory raw_request = new bytes(0);\n        (int256 exit_code, bytes memory result) = Actor.callNonSingletonByIDReadOnly(target, MinerTypes.GetVestingFundsMethodNum, Misc.NONE_CODEC, raw_request);\n        if (exit_code == 0) {\n            return (0, result.deserializeGetVestingFundsReturn());\n        }\n        MinerTypes.VestingFunds[] memory empty_res;\n        return (exit_code, empty_res);\n    }\n\n    /// @notice Proposes or confirms a change of beneficiary address.\n    /// @notice A proposal must be submitted by the owner, and takes effect after approval of both the proposed beneficiary and current beneficiary, if applicable, any current beneficiary that has time and quota remaining.\n    /// @notice See FIP-0029, https://github.com/filecoin-project/FIPs/blob/master/FIPS/fip-0029.md\n    /// @param target The miner actor id you want to interact with\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\n    function changeBeneficiary(CommonTypes.FilActorId target, MinerTypes.ChangeBeneficiaryParams memory params) internal returns (int256) {\n        bytes memory raw_request = params.serializeChangeBeneficiaryParams();\n\n        (int256 exit_code, bytes memory result) = Actor.callNonSingletonByID(\n            target,\n            MinerTypes.ChangeBeneficiaryMethodNum,\n            Misc.CBOR_CODEC,\n            raw_request,\n            0,\n            false\n        );\n        if (result.length != 0) {\n            revert Actor.InvalidResponseLength();\n        }\n\n        return exit_code;\n    }\n\n    /// @notice This method is for use by other actors (such as those acting as beneficiaries), and to abstract the state representation for clients.\n    /// @notice Retrieves the currently active and proposed beneficiary information.\n    /// @param target The miner actor id you want to interact with\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\n    function getBeneficiary(CommonTypes.FilActorId target) internal view returns (int256, MinerTypes.GetBeneficiaryReturn memory) {\n        bytes memory raw_request = new bytes(0);\n\n        (int256 exit_code, bytes memory result) = Actor.callNonSingletonByIDReadOnly(target, MinerTypes.GetBeneficiaryMethodNum, Misc.NONE_CODEC, raw_request);\n\n        if (exit_code == 0) {\n            return (0, result.deserializeGetBeneficiaryReturn());\n        }\n\n        MinerTypes.GetBeneficiaryReturn memory empty_res;\n        return (exit_code, empty_res);\n    }\n\n    /// @notice Change's a miner's worker address\n    /// @param target The miner actor id you want to interact with\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\n    function changeWorkerAddress(CommonTypes.FilActorId target, MinerTypes.ChangeWorkerAddressParams memory params) internal returns (int256) {\n        bytes memory raw_request = params.serializeChangeWorkerAddressParams();\n\n        (int256 exit_code, bytes memory result) = Actor.callNonSingletonByID(\n            target,\n            MinerTypes.ChangeWorkerAddressMethodNum,\n            Misc.CBOR_CODEC,\n            raw_request,\n            0,\n            false\n        );\n        if (result.length != 0) {\n            revert Actor.InvalidResponseLength();\n        }\n\n        return exit_code;\n    }\n\n    /// @notice Change's a miner's peer id\n    /// @param target The miner actor id you want to interact with\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\n    function changePeerId(CommonTypes.FilActorId target, CommonTypes.FilAddress memory newId) internal returns (int256) {\n        bytes memory raw_request = newId.serializeArrayFilAddress();\n\n        (int256 exit_code, bytes memory result) = Actor.callNonSingletonByID(target, MinerTypes.ChangePeerIDMethodNum, Misc.CBOR_CODEC, raw_request, 0, false);\n        if (result.length != 0) {\n            revert Actor.InvalidResponseLength();\n        }\n\n        return exit_code;\n    }\n\n    /// @notice Changes multiaddresses associated with a miner\n    /// @param target The miner actor id you want to interact with\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\n    function changeMultiaddresses(CommonTypes.FilActorId target, CommonTypes.FilAddress[] memory new_multi_addrs) internal returns (int256) {\n        bytes memory raw_request = new_multi_addrs.serializeChangeMultiaddrsParams();\n\n        (int256 exit_code, bytes memory result) = Actor.callNonSingletonByID(\n            target,\n            MinerTypes.ChangeMultiaddrsMethodNum,\n            Misc.CBOR_CODEC,\n            raw_request,\n            0,\n            false\n        );\n        if (result.length != 0) {\n            revert Actor.InvalidResponseLength();\n        }\n\n        return exit_code;\n    }\n\n    /// @notice Repays miner's debt\n    /// @param target The miner actor id you want to interact with\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\n    function repayDebt(CommonTypes.FilActorId target) internal returns (int256) {\n        bytes memory raw_request = new bytes(0);\n\n        (int256 exit_code, bytes memory result) = Actor.callNonSingletonByID(target, MinerTypes.RepayDebtMethodNum, Misc.NONE_CODEC, raw_request, 0, false);\n        if (result.length != 0) {\n            revert Actor.InvalidResponseLength();\n        }\n\n        return exit_code;\n    }\n\n    /// @notice Changing a miner's worker address is a two step process\n    /// @param target The miner actor id you want to interact with\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\n    function confirmChangeWorkerAddress(CommonTypes.FilActorId target) internal returns (int256) {\n        bytes memory raw_request = new bytes(0);\n\n        (int256 exit_code, bytes memory result) = Actor.callNonSingletonByID(\n            target,\n            MinerTypes.ConfirmChangeWorkerAddressMethodNum,\n            Misc.NONE_CODEC,\n            raw_request,\n            0,\n            false\n        );\n        if (result.length != 0) {\n            revert Actor.InvalidResponseLength();\n        }\n\n        return exit_code;\n    }\n\n    /// @notice Returns miner's peer id\n    /// @param target The miner actor id you want to interact with\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\n    /// @return peer id for `target`\n    function getPeerId(CommonTypes.FilActorId target) internal view returns (int256, CommonTypes.FilAddress memory) {\n        bytes memory raw_request = new bytes(0);\n\n        (int256 exit_code, bytes memory result) = Actor.callNonSingletonByIDReadOnly(target, MinerTypes.GetPeerIDMethodNum, Misc.NONE_CODEC, raw_request);\n\n        if (exit_code == 0) {\n            return (0, result.deserializeArrayFilAddress());\n        }\n\n        CommonTypes.FilAddress memory empty_res;\n        return (exit_code, empty_res);\n    }\n\n    /// @notice Returns miner's multiaddresses\n    /// @param target The miner actor id you want to interact with\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\n    /// @return multiaddresses for `target`\n    function getMultiaddresses(CommonTypes.FilActorId target) internal view returns (int256, CommonTypes.FilAddress[] memory) {\n        bytes memory raw_request = new bytes(0);\n\n        (int256 exit_code, bytes memory result) = Actor.callNonSingletonByIDReadOnly(target, MinerTypes.GetMultiaddrsMethodNum, Misc.NONE_CODEC, raw_request);\n        if (exit_code == 0) {\n            return (0, result.deserializeGetMultiaddrsReturn());\n        }\n\n        CommonTypes.FilAddress[] memory empty_res;\n        return (exit_code, empty_res);\n    }\n\n    /// @notice Withdraws balance for a specified miner\n    /// @param target The miner actor id you want to interact with\n    /// @param amount the amount you want to withdraw\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\n    /// @return new balance for `target`\n    function withdrawBalance(CommonTypes.FilActorId target, CommonTypes.BigInt memory amount) internal returns (int256, CommonTypes.BigInt memory) {\n        bytes memory raw_request = amount.serializeArrayBigInt();\n\n        (int256 exit_code, bytes memory result) = Actor.callNonSingletonByID(\n            target,\n            MinerTypes.WithdrawBalanceMethodNum,\n            Misc.CBOR_CODEC,\n            raw_request,\n            0,\n            false\n        );\n\n        if (exit_code == 0) {\n            return (0, result.deserializeBytesBigInt());\n        }\n\n        CommonTypes.BigInt memory empty_res;\n        return (exit_code, empty_res);\n    }\n}\n"
    },
    "filecoin-solidity-api/contracts/v0.8/PrecompilesAPI.sol": {
      "content": "/*******************************************************************************\n *   (c) 2022 Zondax AG\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n//\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\n\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"./types/CommonTypes.sol\";\n\n/// @title This library simplify the call of FEVM precompiles contracts.\n/// @author Zondax AG\nlibrary PrecompilesAPI {\n    address constant RESOLVE_ADDRESS_PRECOMPILE_ADDR = 0xFE00000000000000000000000000000000000001;\n    address constant LOOKUP_DELEGATED_ADDRESS_PRECOMPILE_ADDR = 0xfE00000000000000000000000000000000000002;\n\n    /// @notice an error happened trying to call the actor\n    error FailToCallActor();\n\n    /// @notice Returns the actor id corresponding to an actor address\n    /// @param addr actor address you want to get id from (in bytes format, not string)\n    /// @return the actor id\n    function resolveAddress(CommonTypes.FilAddress memory addr) internal view returns (uint64) {\n        (bool success, bytes memory raw_response) = address(RESOLVE_ADDRESS_PRECOMPILE_ADDR).staticcall(addr.data);\n        if (!success) {\n            revert FailToCallActor();\n        }\n\n        uint256 actor_id = abi.decode(raw_response, (uint256));\n\n        return uint64(actor_id);\n    }\n\n    /// @notice Returns the actor id from an eth address\n    /// @param addr eth address you want to get id from (in bytes format)\n    /// @return the actor id\n    function resolveEthAddress(address addr) internal view returns (uint64) {\n        bytes memory delegatedAddr = abi.encodePacked(hex\"040a\", addr);\n\n        (bool success, bytes memory raw_response) = address(RESOLVE_ADDRESS_PRECOMPILE_ADDR).staticcall(delegatedAddr);\n        if (!success) {\n            revert FailToCallActor();\n        }\n\n        uint256 actor_id = abi.decode(raw_response, (uint256));\n\n        return uint64(actor_id);\n    }\n\n    /// @notice Returns the actor's delegated address (f4) from an actor id\n    /// @param actor_id actor id you want to get the delegated address (f4) from\n    /// @return delegated address in bytes format (not string)\n    function lookupDelegatedAddress(uint64 actor_id) internal view returns (bytes memory) {\n        (bool success, bytes memory raw_response) = address(LOOKUP_DELEGATED_ADDRESS_PRECOMPILE_ADDR).staticcall(abi.encodePacked(uint256(actor_id)));\n        if (!success) {\n            revert FailToCallActor();\n        }\n\n        return raw_response;\n    }\n}\n"
    },
    "filecoin-solidity-api/contracts/v0.8/SendAPI.sol": {
      "content": "/*******************************************************************************\n *   (c) 2022 Zondax AG\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n//\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\n\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.17;\n\nimport \"./utils/Misc.sol\";\nimport \"./utils/Actor.sol\";\nimport \"./types/CommonTypes.sol\";\n\n/// @title This library is helper method to send funds to some specific address. Calling one of its methods will result in a cross-actor call being performed.\n/// @author Zondax AG\nlibrary SendAPI {\n    /// @notice Sends tokens to the specified actor\n    /// @param target The id address (uint64) you want to send funds to\n    /// @param value tokens to be transferred to the receiver\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\n    function send(CommonTypes.FilActorId target, uint256 value) internal returns (int256) {\n        (int256 exit_code, bytes memory result) = Actor.callByID(target, 0, Misc.NONE_CODEC, new bytes(0), value, false);\n        if (result.length != 0) {\n            revert Actor.InvalidResponseLength();\n        }\n\n        return exit_code;\n    }\n\n    /// @notice Sends tokens to to the specified actor\n    /// @param target The address you want to send funds to\n    /// @param value tokens to be transferred to the receiver\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\n    function send(CommonTypes.FilAddress memory target, uint256 value) internal returns (int256) {\n        (int256 exit_code, bytes memory result) = Actor.callByAddress(target.data, 0, Misc.NONE_CODEC, new bytes(0), value, false);\n        if (result.length != 0) {\n            revert Actor.InvalidResponseLength();\n        }\n\n        return exit_code;\n    }\n}\n"
    },
    "filecoin-solidity-api/contracts/v0.8/types/CommonTypes.sol": {
      "content": "/*******************************************************************************\n *   (c) 2022 Zondax AG\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n//\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\n\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.17;\n\n\n/// @title Filecoin actors' common types for Solidity.\n/// @author Zondax AG\nlibrary CommonTypes {\n    /// @dev Protocol byte values\n    /// @notice These constants represent the byte value for each protocol.\n    ///         For more information see the Filecoin documentation: \n    ///         https://docs.filecoin.io/smart-contracts/filecoin-evm-runtime/address-types\n    bytes1 constant PROTOCOL_ID = hex\"00\";\n    bytes1 constant PROTOCOL_SECP256K1 = hex\"01\";\n    bytes1 constant PROTOCOL_ACTOR = hex\"02\";\n    bytes1 constant PROTOCOL_BLS = hex\"03\";\n    bytes1 constant PROTOCOL_DELEGATED = hex\"04\";\n\n    /// @dev EAM actor ID\n    /// @notice This constant represents the EAM actor ID.\n    bytes1 constant EAM_ID = hex\"0a\";\n\n    /// @dev Protocols address lengths\n    /// @notice These constants represent the address lengths for each protocol.\n    ///         For more information see the Filecoin specification: \n    ///         https://spec.filecoin.io/#section-appendix\n    uint256 constant MIN_PROTOCOL_ID_ADDRESS_LENGTH = 1;\n    uint256 constant MAX_PROTOCOL_ID_ADDRESS_LENGTH = 11;\n    uint256 constant PROTOCOL_SECP256K1_ACTOR_ADDRESS_LENGTH = 21; // used for both SECP256K1 and ACTOR\n    uint256 constant PROTOCOL_BLS_ADDRESS_LENGTH = 49;\n    uint256 constant PROTOCOL_DELEGATED_EAM_ADDRESS_LENGTH = 22;\n\n    /// @dev RecieverHook method number\n    /// @notice This constant represents the UniversalReceiverHook method number.\n    uint256 constant UniversalReceiverHookMethodNum = 3726118371;\n\n    /// @dev Deal label maximum length in bytes\n    /// @notice This constant represents the maximum length of a deal label in bytes.\n    uint256 constant MAX_DEAL_LABEL_LENGTH = 256;\n\n    /// @param idx index for the failure in batch\n    /// @param code failure code\n    struct FailCode {\n        uint32 idx;\n        uint32 code;\n    }\n\n    /// @param success_count total successes in batch\n    /// @param fail_codes list of failures code and index for each failure in batch\n    struct BatchReturn {\n        uint32 success_count;\n        FailCode[] fail_codes;\n    }\n\n    /// @param type_ asset type\n    /// @param payload payload corresponding to asset type\n    struct UniversalReceiverParams {\n        uint32 type_;\n        bytes payload;\n    }\n\n    /// @param val contains the actual arbitrary number written as binary\n    /// @param neg indicates if val is negative or not\n    struct BigInt {\n        bytes val;\n        bool neg;\n    }\n\n    /// @param data filecoin address in bytes format\n    struct FilAddress {\n        bytes data;\n    }\n\n    /// @param data cid in bytes format\n    struct Cid {\n        bytes data;\n    }\n\n    /// @param data deal proposal label in bytes format (it can be utf8 string or arbitrary bytes string).\n    /// @param isString indicates if the data is string or raw bytes\n    struct DealLabel {\n        bytes data;\n        bool isString;\n    }\n\n    type FilActorId is uint64;\n\n    type ChainEpoch is int64;\n}\n"
    },
    "filecoin-solidity-api/contracts/v0.8/types/MinerTypes.sol": {
      "content": "/*******************************************************************************\n *   (c) 2022 Zondax AG\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n//\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\n\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.17;\n\nimport \"../cbor/BigIntCbor.sol\";\nimport \"./CommonTypes.sol\";\n\n/// @title Filecoin miner actor types for Solidity.\n/// @author Zondax AG\nlibrary MinerTypes {\n    uint constant GetOwnerMethodNum = 3275365574;\n    uint constant ChangeOwnerAddressMethodNum = 1010589339;\n    uint constant IsControllingAddressMethodNum = 348244887;\n    uint constant GetSectorSizeMethodNum = 3858292296;\n    uint constant GetAvailableBalanceMethodNum = 4026106874;\n    uint constant GetVestingFundsMethodNum = 1726876304;\n    uint constant ChangeBeneficiaryMethodNum = 1570634796;\n    uint constant GetBeneficiaryMethodNum = 4158972569;\n    uint constant ChangeWorkerAddressMethodNum = 3302309124;\n    uint constant ChangePeerIDMethodNum = 1236548004;\n    uint constant ChangeMultiaddrsMethodNum = 1063480576;\n    uint constant RepayDebtMethodNum = 3665352697;\n    uint constant ConfirmChangeWorkerAddressMethodNum = 2354970453;\n    uint constant GetPeerIDMethodNum = 2812875329;\n    uint constant GetMultiaddrsMethodNum = 1332909407;\n    uint constant WithdrawBalanceMethodNum = 2280458852;\n\n    /// @param owner owner address.\n    /// @param proposed owner address.\n    struct GetOwnerReturn {\n        CommonTypes.FilAddress owner;\n        CommonTypes.FilAddress proposed;\n    }\n\n    /// @param new_beneficiary the new beneficiary address.\n    /// @param new_quota the new quota token amount.\n    /// @param new_expiration the epoch that the new quota will be expired.\n    struct ChangeBeneficiaryParams {\n        CommonTypes.FilAddress new_beneficiary;\n        CommonTypes.BigInt new_quota;\n        CommonTypes.ChainEpoch new_expiration;\n    }\n\n    /// @param active current active beneficiary.\n    /// @param proposed the proposed and pending beneficiary.\n    struct GetBeneficiaryReturn {\n        ActiveBeneficiary active;\n        PendingBeneficiaryChange proposed;\n    }\n\n    /// @param new_worker the new worker address.\n    /// @param new_control_addresses the new controller addresses.\n    struct ChangeWorkerAddressParams {\n        CommonTypes.FilAddress new_worker;\n        CommonTypes.FilAddress[] new_control_addresses;\n    }\n\n    /// @param epoch the epoch of funds vested.\n    /// @param amount the amount of funds vested.\n    struct VestingFunds {\n        CommonTypes.ChainEpoch epoch;\n        CommonTypes.BigInt amount;\n    }\n\n    /// @param quota the quota token amount.\n    /// @param used_quota the used quota token amount.\n    /// @param expiration the epoch that the quota will be expired.\n    struct BeneficiaryTerm {\n        CommonTypes.BigInt quota;\n        CommonTypes.BigInt used_quota;\n        CommonTypes.ChainEpoch expiration;\n    }\n\n    /// @param beneficiary the address of the beneficiary.\n    /// @param term BeneficiaryTerm\n    struct ActiveBeneficiary {\n        CommonTypes.FilAddress beneficiary;\n        BeneficiaryTerm term;\n    }\n\n    /// @param new_beneficiary the new beneficiary address.\n    /// @param new_quota the new quota token amount.\n    /// @param new_expiration the epoch that the new quota will be expired.\n    /// @param approved_by_beneficiary if this proposal is approved by beneficiary or not.\n    /// @param approved_by_nominee if this proposal is approved by nominee or not.\n    struct PendingBeneficiaryChange {\n        CommonTypes.FilAddress new_beneficiary;\n        CommonTypes.BigInt new_quota;\n        CommonTypes.ChainEpoch new_expiration;\n        bool approved_by_beneficiary;\n        bool approved_by_nominee;\n    }\n\n    enum SectorSize {\n        _2KiB,\n        _8MiB,\n        _512MiB,\n        _32GiB,\n        _64GiB\n    }\n}\n"
    },
    "filecoin-solidity-api/contracts/v0.8/utils/Actor.sol": {
      "content": "/*******************************************************************************\n *   (c) 2022 Zondax AG\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\n\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.17;\n\nimport \"./Misc.sol\";\nimport \"../types/CommonTypes.sol\";\n\n/// @title Call actors utilities library, meant to interact with Filecoin builtin actors\n/// @author Zondax AG\nlibrary Actor {\n    /// @notice precompile address for the call_actor precompile\n    address constant CALL_ACTOR_ADDRESS = 0xfe00000000000000000000000000000000000003;\n\n    /// @notice precompile address for the call_actor_id precompile\n    address constant CALL_ACTOR_ID = 0xfe00000000000000000000000000000000000005;\n\n    /// @notice flag used to indicate that the call_actor or call_actor_id should perform a static_call to the desired actor\n    uint64 constant READ_ONLY_FLAG = 0x00000001;\n\n    /// @notice flag used to indicate that the call_actor or call_actor_id should perform a call to the desired actor\n    uint64 constant DEFAULT_FLAG = 0x00000000;\n\n    /// @notice the provided address is not valid\n    error InvalidAddress(bytes addr);\n\n    /// @notice the smart contract has no enough balance to transfer\n    error NotEnoughBalance(uint256 balance, uint256 value);\n\n    /// @notice the provided actor id is not valid\n    error InvalidActorID(CommonTypes.FilActorId actorId);\n\n    /// @notice an error happened trying to call the actor\n    error FailToCallActor();\n\n    /// @notice the response received is not correct. In some case no response is expected and we received one, or a response was indeed expected and we received none.\n    error InvalidResponseLength();\n\n    /// @notice the codec received is not valid\n    error InvalidCodec(uint64);\n\n    /// @notice the called actor returned an error as part of its expected behaviour\n    error ActorError(int256 errorCode);\n\n    /// @notice the actor is not found\n    error ActorNotFound();\n\n    /// @notice allows to interact with an specific actor by its address (bytes format)\n    /// @param actor_address actor address (bytes format) to interact with\n    /// @param method_num id of the method from the actor to call\n    /// @param codec how the request data passed as argument is encoded\n    /// @param raw_request encoded arguments to be passed in the call\n    /// @param value tokens to be transferred to the called actor\n    /// @param static_call indicates if the call will be allowed to change the actor state or not (just read the state)\n    /// @return payload (in bytes) with the actual response data (without codec or response code)\n    function callByAddress(\n        bytes memory actor_address,\n        uint256 method_num,\n        uint64 codec,\n        bytes memory raw_request,\n        uint256 value,\n        bool static_call\n    ) internal returns (int256, bytes memory) {\n        if (actor_address.length < 2) {\n            revert InvalidAddress(actor_address);\n        }\n\n        validatePrecompileCall(CALL_ACTOR_ADDRESS, value);\n\n        // We have to delegate-call the call-actor precompile because the call-actor precompile will\n        // call the target actor on our behalf. This will _not_ delegate to the target `actor_address`.\n        //\n        // Specifically:\n        //\n        // - `static_call == false`: `CALLER (you) --(DELEGATECALL)-> CALL_ACTOR_PRECOMPILE --(CALL)-> actor_address\n        // - `static_call == true`:  `CALLER (you) --(DELEGATECALL)-> CALL_ACTOR_PRECOMPILE --(STATICCALL)-> actor_address\n        (bool success, bytes memory data) = address(CALL_ACTOR_ADDRESS).delegatecall(\n            abi.encode(uint64(method_num), value, static_call ? READ_ONLY_FLAG : DEFAULT_FLAG, codec, raw_request, actor_address)\n        );\n        if (!success) {\n            revert FailToCallActor();\n        }\n\n        return readRespData(data);\n    }\n\n    /// @notice allows to interact with an specific actor by its id (uint64)\n    /// @param target actor id (uint64) to interact with\n    /// @param method_num id of the method from the actor to call\n    /// @param codec how the request data passed as argument is encoded\n    /// @param raw_request encoded arguments to be passed in the call\n    /// @param value tokens to be transferred to the called actor\n    /// @param static_call indicates if the call will be allowed to change the actor state or not (just read the state)\n    /// @return payload (in bytes) with the actual response data (without codec or response code)\n    function callByID(\n        CommonTypes.FilActorId target,\n        uint256 method_num,\n        uint64 codec,\n        bytes memory raw_request,\n        uint256 value,\n        bool static_call\n    ) internal returns (int256, bytes memory) {\n        validatePrecompileCall(CALL_ACTOR_ID, value);\n\n        (bool success, bytes memory data) = address(CALL_ACTOR_ID).delegatecall(\n            abi.encode(uint64(method_num), value, static_call ? READ_ONLY_FLAG : DEFAULT_FLAG, codec, raw_request, target)\n        );\n        if (!success) {\n            revert FailToCallActor();\n        }\n\n        return readRespData(data);\n    }\n\n    /// @notice Readonly version of CallByID\n    /// @param target actor id (uint64) to interact with\n    /// @param method_num id of the method from the actor to call\n    /// @param codec how the request data passed as argument is encoded\n    /// @param raw_request encoded arguments to be passed in the call\n    /// @return payload (in bytes) with the actual response data (without codec or response code)\n    function callByIDReadOnly(\n        CommonTypes.FilActorId target,\n        uint256 method_num,\n        uint64 codec,\n        bytes memory raw_request\n    ) internal view returns (int256, bytes memory) {\n        function(CommonTypes.FilActorId, uint256, uint64, bytes memory, uint256, bool) internal view returns (int256, bytes memory) callFn;\n        function(CommonTypes.FilActorId, uint256, uint64, bytes memory, uint256, bool) internal returns (int256, bytes memory) helper = callByID;\n        assembly {\n            callFn := helper\n        }\n        return callFn(target, method_num, codec, raw_request, 0, true);\n    }\n\n    /// @notice allows to run some generic validations before calling the precompile actor\n    /// @param addr precompile actor address to run check to\n    /// @param value tokens to be transferred to the called actor\n    function validatePrecompileCall(address addr, uint256 value) internal view {\n        uint balance = address(this).balance;\n        if (balance < value) {\n            revert NotEnoughBalance(balance, value);\n        }\n\n        bool actorExists = Misc.addressExists(addr);\n        if (!actorExists) {\n            revert ActorNotFound();\n        }\n    }\n\n    /// @notice allows to interact with an non-singleton actors by its id (uint64)\n    /// @param target actor id (uint64) to interact with\n    /// @param method_num id of the method from the actor to call\n    /// @param codec how the request data passed as argument is encoded\n    /// @param raw_request encoded arguments to be passed in the call\n    /// @param value tokens to be transfered to the called actor\n    /// @param static_call indicates if the call will be allowed to change the actor state or not (just read the state)\n    /// @dev it requires the id to be bigger than 99, as singleton actors are smaller than that\n    function callNonSingletonByID(\n        CommonTypes.FilActorId target,\n        uint256 method_num,\n        uint64 codec,\n        bytes memory raw_request,\n        uint256 value,\n        bool static_call\n    ) internal returns (int256, bytes memory) {\n        if (CommonTypes.FilActorId.unwrap(target) < 100) {\n            revert InvalidActorID(target);\n        }\n\n        return callByID(target, method_num, codec, raw_request, value, static_call);\n    }\n\n    /// @notice Readonly version of CallNonSingletonByID\n    /// @param target actor id (uint64) to interact with\n    /// @param method_num id of the method from the actor to call\n    /// @param codec how the request data passed as argument is encoded\n    /// @param raw_request encoded arguments to be passed in the call\n    /// @dev it requires the id to be bigger than 99, as singleton actors are smaller than that\n    function callNonSingletonByIDReadOnly(\n        CommonTypes.FilActorId target,\n        uint256 method_num,\n        uint64 codec,\n        bytes memory raw_request\n    ) internal view returns (int256, bytes memory) {\n        if (CommonTypes.FilActorId.unwrap(target) < 100) {\n            revert InvalidActorID(target);\n        }\n\n        return callByIDReadOnly(target, method_num, codec, raw_request);\n    }\n\n    /// @notice parse the response an actor returned\n    /// @notice it will validate the return code (success) and the codec (valid one)\n    /// @param raw_response raw data (bytes) the actor returned\n    /// @return exit code if an error occured, 0 otherwise\n    /// @return the actual raw data (payload, in bytes) to be parsed according to the actor and method called\n    function readRespData(bytes memory raw_response) internal pure returns (int256, bytes memory) {\n        (int256 exit, uint64 return_codec, bytes memory return_value) = abi.decode(raw_response, (int256, uint64, bytes));\n\n        if (return_codec == Misc.NONE_CODEC) {\n            if (return_value.length != 0) {\n                revert InvalidResponseLength();\n            }\n        } else if (return_codec == Misc.CBOR_CODEC || return_codec == Misc.DAG_CBOR_CODEC) {\n            if (return_value.length == 0) {\n                revert InvalidResponseLength();\n            }\n        } else {\n            revert InvalidCodec(return_codec);\n        }\n\n        return (exit, return_value);\n    }\n}\n"
    },
    "filecoin-solidity-api/contracts/v0.8/utils/BigInts.sol": {
      "content": "/*******************************************************************************\n *   (c) 2022 Zondax AG\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\n\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.17;\n\nimport \"../../vendor/solidity-BigNumber/src/BigNumbers.sol\";\n\nimport \"../types/CommonTypes.sol\";\nimport \"../utils/Misc.sol\";\n\n/// @notice This library is a set a functions that allows to handle filecoin addresses conversions and validations\n/// @author Zondax AG\nlibrary BigInts {\n    uint256 constant MAX_UINT = (2 ** 256) - 1;\n    uint256 constant MAX_INT = ((2 ** 256) / 2) - 1;\n\n    error NegativeValueNotAllowed();\n\n    /// @notice allow to get a BigInt from a uint256 value\n    /// @param value uint256 number\n    /// @return new BigInt\n    function fromUint256(uint256 value) internal view returns (CommonTypes.BigInt memory) {\n        BigNumber memory bigNum = BigNumbers.init(value, false);\n        return CommonTypes.BigInt(bigNum.val, bigNum.neg);\n    }\n\n    /// @notice allow to get a BigInt from a int256 value\n    /// @param value int256 number\n    /// @return new BigInt\n    function fromInt256(int256 value) internal view returns (CommonTypes.BigInt memory) {\n        uint256 valueAbs = Misc.abs(value);\n        BigNumber memory bigNum = BigNumbers.init(valueAbs, value < 0);\n        return CommonTypes.BigInt(bigNum.val, bigNum.neg);\n    }\n\n    /// @notice allow to get a uint256 from a BigInt value.\n    /// @notice If the value is negative, it will generate an error.\n    /// @param value BigInt number\n    /// @return a uint256 value and flog that indicates whether it was possible to convert or not (the value overflows uint256 type)\n    function toUint256(CommonTypes.BigInt memory value) internal view returns (uint256, bool) {\n        if (value.neg) {\n            revert NegativeValueNotAllowed();\n        }\n\n        BigNumber memory max = BigNumbers.init(MAX_UINT, false);\n        BigNumber memory bigNumValue = BigNumbers.init(value.val, value.neg);\n        if (BigNumbers.gt(bigNumValue, max)) {\n            return (0, true);\n        }\n\n        return (uint256(bytes32(bigNumValue.val)), false);\n    }\n\n    /// @notice allow to get a int256 from a BigInt value.\n    /// @notice If the value is grater than what a int256 can store, it will generate an error.\n    /// @param value BigInt number\n    /// @return a int256 value and flog that indicates whether it was possible to convert or not (the value overflows int256 type)\n    function toInt256(CommonTypes.BigInt memory value) internal view returns (int256, bool) {\n        BigNumber memory max = BigNumbers.init(MAX_INT, false);\n        BigNumber memory bigNumValue = BigNumbers.init(value.val, false);\n        if (BigNumbers.gt(bigNumValue, max)) {\n            return (0, true);\n        }\n\n        int256 parsedValue = int256(uint256(bytes32(bigNumValue.val)));\n        return (value.neg ? -1 * parsedValue : parsedValue, false);\n    }\n}\n"
    },
    "filecoin-solidity-api/contracts/v0.8/utils/CborDecode.sol": {
      "content": "/*******************************************************************************\n *   (c) 2022 Zondax AG\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\n\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.17;\n\n// \tMajUnsignedInt = 0\n// \tMajSignedInt   = 1\n// \tMajByteString  = 2\n// \tMajTextString  = 3\n// \tMajArray       = 4\n// \tMajMap         = 5\n// \tMajTag         = 6\n// \tMajOther       = 7\n\nuint8 constant MajUnsignedInt = 0;\nuint8 constant MajSignedInt = 1;\nuint8 constant MajByteString = 2;\nuint8 constant MajTextString = 3;\nuint8 constant MajArray = 4;\nuint8 constant MajMap = 5;\nuint8 constant MajTag = 6;\nuint8 constant MajOther = 7;\n\nuint8 constant TagTypeBigNum = 2;\nuint8 constant TagTypeNegativeBigNum = 3;\n\nuint8 constant True_Type = 21;\nuint8 constant False_Type = 20;\n\n/// @notice This library is a set a functions that allows anyone to decode cbor encoded bytes\n/// @dev methods in this library try to read the data type indicated from cbor encoded data stored in bytes at a specific index\n/// @dev if it successes, methods will return the read value and the new index (intial index plus read bytes)\n/// @author Zondax AG\nlibrary CBORDecoder {\n    /// @notice check if next value on the cbor encoded data is null\n    /// @param cborData cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    function isNullNext(bytes memory cborData, uint byteIdx) internal pure returns (bool) {\n        return cborData[byteIdx] == hex\"f6\";\n    }\n\n    /// @notice attempt to read a bool value\n    /// @param cborData cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    /// @return a bool decoded from input bytes and the byte index after moving past the value\n    function readBool(bytes memory cborData, uint byteIdx) internal pure returns (bool, uint) {\n        uint8 maj;\n        uint value;\n\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\n        require(maj == MajOther, \"invalid maj (expected MajOther)\");\n        assert(value == True_Type || value == False_Type);\n\n        return (value != False_Type, byteIdx);\n    }\n\n    /// @notice attempt to read the length of a fixed array\n    /// @param cborData cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    /// @return length of the fixed array decoded from input bytes and the byte index after moving past the value\n    function readFixedArray(bytes memory cborData, uint byteIdx) internal pure returns (uint, uint) {\n        uint8 maj;\n        uint len;\n\n        (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\n        require(maj == MajArray, \"invalid maj (expected MajArray)\");\n\n        return (len, byteIdx);\n    }\n\n    /// @notice attempt to read an arbitrary length string value\n    /// @param cborData cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    /// @return arbitrary length string decoded from input bytes and the byte index after moving past the value\n    function readString(bytes memory cborData, uint byteIdx) internal pure returns (string memory, uint) {\n        uint8 maj;\n        uint len;\n\n        (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\n        require(maj == MajTextString, \"invalid maj (expected MajTextString)\");\n\n        uint max_len = byteIdx + len;\n        bytes memory slice = new bytes(len);\n        uint slice_index = 0;\n        for (uint256 i = byteIdx; i < max_len; i++) {\n            slice[slice_index] = cborData[i];\n            slice_index++;\n        }\n\n        return (string(slice), byteIdx + len);\n    }\n\n    /// @notice attempt to read an arbitrary byte string value\n    /// @param cborData cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    /// @return arbitrary byte string decoded from input bytes and the byte index after moving past the value\n    function readBytes(bytes memory cborData, uint byteIdx) internal pure returns (bytes memory, uint) {\n        uint8 maj;\n        uint len;\n\n        (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\n        require(maj == MajTag || maj == MajByteString, \"invalid maj (expected MajTag or MajByteString)\");\n\n        if (maj == MajTag) {\n            (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\n            assert(maj == MajByteString);\n        }\n\n        uint max_len = byteIdx + len;\n        bytes memory slice = new bytes(len);\n        uint slice_index = 0;\n        for (uint256 i = byteIdx; i < max_len; i++) {\n            slice[slice_index] = cborData[i];\n            slice_index++;\n        }\n\n        return (slice, byteIdx + len);\n    }\n\n    /// @notice attempt to read a bytes32 value\n    /// @param cborData cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    /// @return a bytes32 decoded from input bytes and the byte index after moving past the value\n    function readBytes32(bytes memory cborData, uint byteIdx) internal pure returns (bytes32, uint) {\n        uint8 maj;\n        uint len;\n\n        (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\n        require(maj == MajByteString, \"invalid maj (expected MajByteString)\");\n\n        uint max_len = byteIdx + len;\n        bytes memory slice = new bytes(32);\n        uint slice_index = 32 - len;\n        for (uint256 i = byteIdx; i < max_len; i++) {\n            slice[slice_index] = cborData[i];\n            slice_index++;\n        }\n\n        return (bytes32(slice), byteIdx + len);\n    }\n\n    /// @notice attempt to read a uint256 value encoded per cbor specification\n    /// @param cborData cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    /// @return an uint256 decoded from input bytes and the byte index after moving past the value\n    function readUInt256(bytes memory cborData, uint byteIdx) internal pure returns (uint256, uint) {\n        uint8 maj;\n        uint256 value;\n\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\n        require(maj == MajTag || maj == MajUnsignedInt, \"invalid maj (expected MajTag or MajUnsignedInt)\");\n\n        if (maj == MajTag) {\n            require(value == TagTypeBigNum, \"invalid tag (expected TagTypeBigNum)\");\n\n            uint len;\n            (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\n            require(maj == MajByteString, \"invalid maj (expected MajByteString)\");\n\n            require(cborData.length >= byteIdx + len, \"slicing out of range\");\n            assembly {\n                value := mload(add(cborData, add(len, byteIdx)))\n            }\n\n            return (value, byteIdx + len);\n        }\n\n        return (value, byteIdx);\n    }\n\n    /// @notice attempt to read a int256 value encoded per cbor specification\n    /// @param cborData cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    /// @return an int256 decoded from input bytes and the byte index after moving past the value\n    function readInt256(bytes memory cborData, uint byteIdx) internal pure returns (int256, uint) {\n        uint8 maj;\n        uint value;\n\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\n        require(maj == MajTag || maj == MajSignedInt, \"invalid maj (expected MajTag or MajSignedInt)\");\n\n        if (maj == MajTag) {\n            assert(value == TagTypeNegativeBigNum);\n\n            uint len;\n            (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\n            require(maj == MajByteString, \"invalid maj (expected MajByteString)\");\n\n            require(cborData.length >= byteIdx + len, \"slicing out of range\");\n            assembly {\n                value := mload(add(cborData, add(len, byteIdx)))\n            }\n\n            return (int256(value), byteIdx + len);\n        }\n\n        return (int256(value), byteIdx);\n    }\n\n    /// @notice attempt to read a uint64 value\n    /// @param cborData cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    /// @return an uint64 decoded from input bytes and the byte index after moving past the value\n    function readUInt64(bytes memory cborData, uint byteIdx) internal pure returns (uint64, uint) {\n        uint8 maj;\n        uint value;\n\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\n        require(maj == MajUnsignedInt, \"invalid maj (expected MajUnsignedInt)\");\n\n        return (uint64(value), byteIdx);\n    }\n\n    /// @notice attempt to read a uint32 value\n    /// @param cborData cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    /// @return an uint32 decoded from input bytes and the byte index after moving past the value\n    function readUInt32(bytes memory cborData, uint byteIdx) internal pure returns (uint32, uint) {\n        uint8 maj;\n        uint value;\n\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\n        require(maj == MajUnsignedInt, \"invalid maj (expected MajUnsignedInt)\");\n\n        return (uint32(value), byteIdx);\n    }\n\n    /// @notice attempt to read a uint16 value\n    /// @param cborData cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    /// @return an uint16 decoded from input bytes and the byte index after moving past the value\n    function readUInt16(bytes memory cborData, uint byteIdx) internal pure returns (uint16, uint) {\n        uint8 maj;\n        uint value;\n\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\n        require(maj == MajUnsignedInt, \"invalid maj (expected MajUnsignedInt)\");\n\n        return (uint16(value), byteIdx);\n    }\n\n    /// @notice attempt to read a uint8 value\n    /// @param cborData cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    /// @return an uint8 decoded from input bytes and the byte index after moving past the value\n    function readUInt8(bytes memory cborData, uint byteIdx) internal pure returns (uint8, uint) {\n        uint8 maj;\n        uint value;\n\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\n        require(maj == MajUnsignedInt, \"invalid maj (expected MajUnsignedInt)\");\n\n        return (uint8(value), byteIdx);\n    }\n\n    /// @notice attempt to read a int64 value\n    /// @param cborData cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    /// @return an int64 decoded from input bytes and the byte index after moving past the value\n    function readInt64(bytes memory cborData, uint byteIdx) internal pure returns (int64, uint) {\n        uint8 maj;\n        uint value;\n\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\n        require(maj == MajSignedInt || maj == MajUnsignedInt, \"invalid maj (expected MajSignedInt or MajUnsignedInt)\");\n\n        return (int64(uint64(value)), byteIdx);\n    }\n\n    /// @notice attempt to read a int32 value\n    /// @param cborData cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    /// @return an int32 decoded from input bytes and the byte index after moving past the value\n    function readInt32(bytes memory cborData, uint byteIdx) internal pure returns (int32, uint) {\n        uint8 maj;\n        uint value;\n\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\n        require(maj == MajSignedInt || maj == MajUnsignedInt, \"invalid maj (expected MajSignedInt or MajUnsignedInt)\");\n\n        return (int32(uint32(value)), byteIdx);\n    }\n\n    /// @notice attempt to read a int16 value\n    /// @param cborData cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    /// @return an int16 decoded from input bytes and the byte index after moving past the value\n    function readInt16(bytes memory cborData, uint byteIdx) internal pure returns (int16, uint) {\n        uint8 maj;\n        uint value;\n\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\n        require(maj == MajSignedInt || maj == MajUnsignedInt, \"invalid maj (expected MajSignedInt or MajUnsignedInt)\");\n\n        return (int16(uint16(value)), byteIdx);\n    }\n\n    /// @notice attempt to read a int8 value\n    /// @param cborData cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    /// @return an int8 decoded from input bytes and the byte index after moving past the value\n    function readInt8(bytes memory cborData, uint byteIdx) internal pure returns (int8, uint) {\n        uint8 maj;\n        uint value;\n\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\n        require(maj == MajSignedInt || maj == MajUnsignedInt, \"invalid maj (expected MajSignedInt or MajUnsignedInt)\");\n\n        return (int8(uint8(value)), byteIdx);\n    }\n\n    /// @notice slice uint8 from bytes starting at a given index\n    /// @param bs bytes to slice from\n    /// @param start current position to slice from bytes\n    /// @return uint8 sliced from bytes\n    function sliceUInt8(bytes memory bs, uint start) internal pure returns (uint8) {\n        require(bs.length >= start + 1, \"slicing out of range\");\n        return uint8(bs[start]);\n    }\n\n    /// @notice slice uint16 from bytes starting at a given index\n    /// @param bs bytes to slice from\n    /// @param start current position to slice from bytes\n    /// @return uint16 sliced from bytes\n    function sliceUInt16(bytes memory bs, uint start) internal pure returns (uint16) {\n        require(bs.length >= start + 2, \"slicing out of range\");\n        bytes2 x;\n        assembly {\n            x := mload(add(bs, add(0x20, start)))\n        }\n        return uint16(x);\n    }\n\n    /// @notice slice uint32 from bytes starting at a given index\n    /// @param bs bytes to slice from\n    /// @param start current position to slice from bytes\n    /// @return uint32 sliced from bytes\n    function sliceUInt32(bytes memory bs, uint start) internal pure returns (uint32) {\n        require(bs.length >= start + 4, \"slicing out of range\");\n        bytes4 x;\n        assembly {\n            x := mload(add(bs, add(0x20, start)))\n        }\n        return uint32(x);\n    }\n\n    /// @notice slice uint64 from bytes starting at a given index\n    /// @param bs bytes to slice from\n    /// @param start current position to slice from bytes\n    /// @return uint64 sliced from bytes\n    function sliceUInt64(bytes memory bs, uint start) internal pure returns (uint64) {\n        require(bs.length >= start + 8, \"slicing out of range\");\n        bytes8 x;\n        assembly {\n            x := mload(add(bs, add(0x20, start)))\n        }\n        return uint64(x);\n    }\n\n    /// @notice Parse cbor header for major type and extra info.\n    /// @param cbor cbor encoded bytes to parse from\n    /// @param byteIndex current position to read on the cbor encoded bytes\n    /// @return major type, extra info and the byte index after moving past header bytes\n    function parseCborHeader(bytes memory cbor, uint byteIndex) internal pure returns (uint8, uint64, uint) {\n        uint8 first = sliceUInt8(cbor, byteIndex);\n        byteIndex += 1;\n        uint8 maj = (first & 0xe0) >> 5;\n        uint8 low = first & 0x1f;\n        // We don't handle CBOR headers with extra > 27, i.e. no indefinite lengths\n        require(low < 28, \"cannot handle headers with extra > 27\");\n\n        // extra is lower bits\n        if (low < 24) {\n            return (maj, low, byteIndex);\n        }\n\n        // extra in next byte\n        if (low == 24) {\n            uint8 next = sliceUInt8(cbor, byteIndex);\n            byteIndex += 1;\n            require(next >= 24, \"invalid cbor\"); // otherwise this is invalid cbor\n            return (maj, next, byteIndex);\n        }\n\n        // extra in next 2 bytes\n        if (low == 25) {\n            uint16 extra16 = sliceUInt16(cbor, byteIndex);\n            byteIndex += 2;\n            return (maj, extra16, byteIndex);\n        }\n\n        // extra in next 4 bytes\n        if (low == 26) {\n            uint32 extra32 = sliceUInt32(cbor, byteIndex);\n            byteIndex += 4;\n            return (maj, extra32, byteIndex);\n        }\n\n        // extra in next 8 bytes\n        assert(low == 27);\n        uint64 extra64 = sliceUInt64(cbor, byteIndex);\n        byteIndex += 8;\n        return (maj, extra64, byteIndex);\n    }\n}\n"
    },
    "filecoin-solidity-api/contracts/v0.8/utils/FilAddresses.sol": {
      "content": "/*******************************************************************************\n *   (c) 2022 Zondax AG\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\n\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.17;\n\nimport \"../types/CommonTypes.sol\";\nimport \"../utils/Leb128.sol\";\nimport \"@ensdomains/buffer/contracts/Buffer.sol\";\n\n/// @notice This library is a set a functions that allows to handle filecoin addresses conversions and validations\n/// @author Zondax AG\nlibrary FilAddresses {\n    using Buffer for Buffer.buffer;\n\n    error InvalidAddress();\n\n    /// @notice allow to get a FilAddress from an eth address\n    /// @param addr eth address to convert\n    /// @return new filecoin address\n    function fromEthAddress(address addr) internal pure returns (CommonTypes.FilAddress memory) {\n        return CommonTypes.FilAddress(abi.encodePacked(CommonTypes.PROTOCOL_DELEGATED, CommonTypes.EAM_ID, addr));\n    }\n\n    /// @notice allow to get a eth address from 040a type FilAddress made above\n    /// @param addr FilAddress to convert\n    /// @return new eth address\n    function toEthAddress(CommonTypes.FilAddress memory addr) internal pure returns (address) {\n        if (\n            addr.data[0] != CommonTypes.PROTOCOL_DELEGATED || addr.data[1] != CommonTypes.EAM_ID\n                || addr.data.length != CommonTypes.PROTOCOL_DELEGATED_EAM_ADDRESS_LENGTH\n        ) {\n            revert InvalidAddress();\n        }\n        bytes memory filAddress = addr.data;\n        bytes20 ethAddress;\n\n        assembly {\n            ethAddress := mload(add(filAddress, 0x22))\n        }\n\n        return address(ethAddress);\n    }\n\n    /// @notice allow to create a Filecoin address from an actorID\n    /// @param actorID uint64 actorID\n    /// @return address filecoin address\n    function fromActorID(uint64 actorID) internal pure returns (CommonTypes.FilAddress memory) {\n        Buffer.buffer memory result = Leb128.encodeUnsignedLeb128FromUInt64(actorID);\n        return CommonTypes.FilAddress(abi.encodePacked(CommonTypes.PROTOCOL_ID, result.buf));\n    }\n\n    /// @notice allow to create a Filecoin address from bytes\n    /// @param data address in bytes format\n    /// @return filecoin address\n    function fromBytes(bytes memory data) internal pure returns (CommonTypes.FilAddress memory) {\n        CommonTypes.FilAddress memory newAddr = CommonTypes.FilAddress(data);\n        if (!validate(newAddr)) {\n            revert InvalidAddress();\n        }\n\n        return newAddr;\n    }\n\n    /// @notice allow to validate if an address is valid or not\n    /// @dev we are only validating known address types. If the type is not known, the default value is true\n    /// @param addr the filecoin address to validate\n    /// @return whether the address is valid or not\n    function validate(CommonTypes.FilAddress memory addr) internal pure returns (bool) {\n        if (addr.data[0] == CommonTypes.PROTOCOL_ID) {\n            return (\n                addr.data.length > CommonTypes.MIN_PROTOCOL_ID_ADDRESS_LENGTH\n                    && addr.data.length <= CommonTypes.MAX_PROTOCOL_ID_ADDRESS_LENGTH\n            );\n        } else if (addr.data[0] == CommonTypes.PROTOCOL_SECP256K1 || addr.data[0] == CommonTypes.PROTOCOL_ACTOR) {\n            return addr.data.length == CommonTypes.PROTOCOL_SECP256K1_ACTOR_ADDRESS_LENGTH;\n        } else if (addr.data[0] == CommonTypes.PROTOCOL_BLS) {\n            return addr.data.length == CommonTypes.PROTOCOL_BLS_ADDRESS_LENGTH;\n        } else if (addr.data[0] == CommonTypes.PROTOCOL_DELEGATED && addr.data[1] == CommonTypes.EAM_ID) {\n            return addr.data.length == CommonTypes.PROTOCOL_DELEGATED_EAM_ADDRESS_LENGTH;\n        }\n\n        return addr.data.length <= 256;\n    }\n}\n"
    },
    "filecoin-solidity-api/contracts/v0.8/utils/Leb128.sol": {
      "content": "/*******************************************************************************\n *   (c) 2023 Zondax AG\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\n\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.17;\n\nimport \"@ensdomains/buffer/contracts/Buffer.sol\";\n\n/// @notice This library implement the leb128\n/// @author Zondax AG\nlibrary Leb128 {\n    using Buffer for Buffer.buffer;\n\n    /// @notice encode a unsigned integer 64bits into bytes\n    /// @param value the actor ID to encode\n    /// @return result return the value in bytes\n    function encodeUnsignedLeb128FromUInt64(uint64 value) internal pure returns (Buffer.buffer memory result) {\n        while (true) {\n            uint64 byte_ = value & 0x7f;\n            value >>= 7;\n            if (value == 0) {\n                result.appendUint8(uint8(byte_));\n                return result;\n            }\n            result.appendUint8(uint8(byte_ | 0x80));\n        }\n    }\n}\n"
    },
    "filecoin-solidity-api/contracts/v0.8/utils/Misc.sol": {
      "content": "/*******************************************************************************\n *   (c) 2022 Zondax AG\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\n\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.17;\n\nimport \"../types/CommonTypes.sol\";\n\n/// @title Library containing miscellaneous functions used on the project\n/// @author Zondax AG\nlibrary Misc {\n    /// @notice the codec received is not valid\n    error InvalidCodec(uint64);\n\n    /// @notice filecoin method not handled\n    error MethodNotHandled(uint64);\n\n    uint64 constant DAG_CBOR_CODEC = 0x71;\n    uint64 constant CBOR_CODEC = 0x51;\n    uint64 constant NONE_CODEC = 0x00;\n\n    // Code taken from Openzeppelin repo\n    // Link: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/0320a718e8e07b1d932f5acb8ad9cec9d9eed99b/contracts/utils/math/SignedMath.sol#L37-L42\n    /// @notice get the abs from a signed number\n    /// @param n number to get abs from\n    /// @return unsigned number\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n\n    /// @notice validate if an address exists or not\n    /// @dev read this article for more information https://blog.finxter.com/how-to-find-out-if-an-ethereum-address-is-a-contract/\n    /// @param addr address to check\n    /// @return whether the address exists or not\n    function addressExists(address addr) internal view returns (bool) {\n        bytes32 codehash;\n        assembly {\n            codehash := extcodehash(addr)\n        }\n        return codehash != 0x0;\n    }\n\n    /// Returns the data size required by CBOR.writeFixedNumeric\n    function getPrefixSize(uint256 data_size) internal pure returns (uint256) {\n        if (data_size <= 23) {\n            return 1;\n        } else if (data_size <= 0xFF) {\n            return 2;\n        } else if (data_size <= 0xFFFF) {\n            return 3;\n        } else if (data_size <= 0xFFFFFFFF) {\n            return 5;\n        }\n        return 9;\n    }\n\n    function getBytesSize(bytes memory value) internal pure returns (uint256) {\n        return getPrefixSize(value.length) + value.length;\n    }\n\n    function getCidSize(bytes memory value) internal pure returns (uint256) {\n        return getPrefixSize(2) + value.length;\n    }\n\n    function getFilActorIdSize(CommonTypes.FilActorId value) internal pure returns (uint256) {\n        uint64 val = CommonTypes.FilActorId.unwrap(value);\n        return getPrefixSize(uint256(val));\n    }\n\n    function getChainEpochSize(CommonTypes.ChainEpoch value) internal pure returns (uint256) {\n        int64 val = CommonTypes.ChainEpoch.unwrap(value);\n        if (val >= 0) {\n            return getPrefixSize(uint256(uint64(val)));\n        } else {\n            return getPrefixSize(uint256(uint64(-1 - val)));\n        }\n    }\n\n    function getBoolSize() internal pure returns (uint256) {\n        return getPrefixSize(1);\n    }\n}\n"
    },
    "filecoin-solidity-api/contracts/vendor/solidity-BigNumber/src/BigNumbers.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\n/**\n * @title BigNumbers\n * @dev BigNumbers is a modified version of `github.com/Zondax/solidity-BigNumber/blob/master/src/BigNumbers.sol`, which is licensed under the MIT license.\n * The code was forked at commit: `39dbb9e2dd186a549c9ad7eb1b4b204dc6705245`\n * The modifications were made in Ju1y, 2023.\n */\n\n// Definition here allows both the lib and inheriting contracts to use BigNumber directly.\nstruct BigNumber { \n    bytes val;\n    bool neg;\n    uint bitlen;\n}\n\n/**\n * @notice BigNumbers library for Solidity.\n */\nlibrary BigNumbers {\n    \n    /// @notice the value for number 0 of a BigNumber instance.\n    bytes constant ZERO = hex\"0000000000000000000000000000000000000000000000000000000000000000\";\n    /// @notice the value for number 1 of a BigNumber instance.\n    bytes constant  ONE = hex\"0000000000000000000000000000000000000000000000000000000000000001\";\n    /// @notice the value for number 2 of a BigNumber instance.\n    bytes constant  TWO = hex\"0000000000000000000000000000000000000000000000000000000000000002\";\n\n    // ***************** BEGIN EXPOSED MANAGEMENT FUNCTIONS ******************\n    /** @notice verify a BN instance\n     *  @dev checks if the BN is in the correct format. operations should only be carried out on\n     *       verified BNs, so it is necessary to call this if your function takes an arbitrary BN\n     *       as input.\n     *\n     *  @param bn BigNumber instance\n     */\n    function verify(\n        BigNumber memory bn\n    ) internal pure {\n        uint msword; \n        bytes memory val = bn.val;\n        assembly {msword := mload(add(val,0x20))} //get msword of result\n        if(msword==0) require(isZero(bn));\n        else require((bn.val.length % 32 == 0) && (msword>>((bn.bitlen%256)-1)==1));\n    }\n\n    /** @notice initialize a BN instance\n     *  @dev wrapper function for _init. initializes from bytes value.\n     *       Allows passing bitLength of value. This is NOT verified in the internal function. Only use where bitlen is\n     *       explicitly known; otherwise use the other init function.\n     *\n     *  @param val BN value. may be of any size.\n     *  @param neg neg whether the BN is +/-\n     *  @param bitlen bit length of output.\n     *  @return BigNumber instance\n     */\n    function init(\n        bytes memory val, \n        bool neg, \n        uint bitlen\n    ) internal view returns(BigNumber memory){\n        return _init(val, neg, bitlen);\n    }\n    \n    /** @notice initialize a BN instance\n     *  @dev wrapper function for _init. initializes from bytes value.\n     *\n     *  @param val BN value. may be of any size.\n     *  @param neg neg whether the BN is +/-\n     *  @return BigNumber instance\n     */\n    function init(\n        bytes memory val, \n        bool neg\n    ) internal view returns(BigNumber memory){\n        return _init(val, neg, 0);\n    }\n\n    /** @notice initialize a BN instance\n     *  @dev wrapper function for _init. initializes from uint value (converts to bytes); \n     *       tf. resulting BN is in the range -2^256-1 ... 2^256-1.\n     *\n     *  @param val uint value.\n     *  @param neg neg whether the BN is +/-\n     *  @return BigNumber instance\n     */\n    function init(\n        uint val, \n        bool neg\n    ) internal view returns(BigNumber memory){\n        return _init(abi.encodePacked(val), neg, 0);\n    }\n    // ***************** END EXPOSED MANAGEMENT FUNCTIONS ******************\n\n\n\n\n    // ***************** BEGIN EXPOSED CORE CALCULATION FUNCTIONS ******************\n    /** @notice BigNumber addition: a + b.\n      * @dev add: Initially prepare BigNumbers for addition operation; internally calls actual addition/subtraction,\n      *           depending on inputs.\n      *           In order to do correct addition or subtraction we have to handle the sign.\n      *           This function discovers the sign of the result based on the inputs, and calls the correct operation.\n      *\n      * @param a first BN\n      * @param b second BN\n      * @return r result  - addition of a and b.\n      */\n    function add(\n        BigNumber memory a, \n        BigNumber memory b\n    ) internal pure returns(BigNumber memory r) {\n        if(a.bitlen==0 && b.bitlen==0) return zero();\n        if(a.bitlen==0) return b;\n        if(b.bitlen==0) return a;\n        bytes memory val;\n        uint bitlen;\n        int compare = cmp(a,b,false);\n\n        if(a.neg || b.neg){\n            if(a.neg && b.neg){\n                if(compare>=0) (val, bitlen) = _add(a.val,b.val,a.bitlen);\n                else (val, bitlen) = _add(b.val,a.val,b.bitlen);\n                r.neg = true;\n            }\n            else {\n                if(compare==1){\n                    (val, bitlen) = _sub(a.val,b.val);\n                    r.neg = a.neg;\n                }\n                else if(compare==-1){\n                    (val, bitlen) = _sub(b.val,a.val);\n                    r.neg = !a.neg;\n                }\n                else return zero();//one pos and one neg, and same value.\n            }\n        }\n        else{\n            if(compare>=0){ // a>=b\n                (val, bitlen) = _add(a.val,b.val,a.bitlen);\n            }\n            else {\n                (val, bitlen) = _add(b.val,a.val,b.bitlen);\n            }\n            r.neg = false;\n        }\n\n        r.val = val;\n        r.bitlen = (bitlen);\n    }\n\n    /** @notice BigNumber subtraction: a - b.\n      * @dev sub: Initially prepare BigNumbers for subtraction operation; internally calls actual addition/subtraction,\n                  depending on inputs.\n      *           In order to do correct addition or subtraction we have to handle the sign.\n      *           This function discovers the sign of the result based on the inputs, and calls the correct operation.\n      *\n      * @param a first BN\n      * @param b second BN\n      * @return r result - subtraction of a and b.\n      */  \n    function sub(\n        BigNumber memory a, \n        BigNumber memory b\n    ) internal pure returns(BigNumber memory r) {\n        if(a.bitlen==0 && b.bitlen==0) return zero();\n        bytes memory val;\n        int compare;\n        uint bitlen;\n        compare = cmp(a,b,false);\n        if(a.neg || b.neg) {\n            if(a.neg && b.neg){           \n                if(compare == 1) { \n                    (val,bitlen) = _sub(a.val,b.val); \n                    r.neg = true;\n                }\n                else if(compare == -1) { \n\n                    (val,bitlen) = _sub(b.val,a.val); \n                    r.neg = false;\n                }\n                else return zero();\n            }\n            else {\n                if(compare >= 0) (val,bitlen) = _add(a.val,b.val,a.bitlen);\n                else (val,bitlen) = _add(b.val,a.val,b.bitlen);\n                \n                r.neg = (a.neg) ? true : false;\n            }\n        }\n        else {\n            if(compare == 1) {\n                (val,bitlen) = _sub(a.val,b.val);\n                r.neg = false;\n             }\n            else if(compare == -1) { \n                (val,bitlen) = _sub(b.val,a.val);\n                r.neg = true;\n            }\n            else return zero(); \n        }\n        \n        r.val = val;\n        r.bitlen = (bitlen);\n    }\n\n    /** @notice BigNumber multiplication: a * b.\n      * @dev mul: takes two BigNumbers and multiplys them. Order is irrelevant.\n      *              multiplication achieved using modexp precompile:\n      *                 (a * b) = ((a + b)**2 - (a - b)**2) / 4\n      *\n      * @param a first BN\n      * @param b second BN\n      * @return r result - multiplication of a and b.\n      */\n    function mul(\n        BigNumber memory a, \n        BigNumber memory b\n    ) internal view returns(BigNumber memory r){\n            \n        BigNumber memory lhs = add(a,b);\n        BigNumber memory fst = modexp(lhs, two(), _powModulus(lhs, 2)); // (a+b)^2\n        \n        // no need to do subtraction part of the equation if a == b; if so, it has no effect on final result.\n        if(!eq(a,b)) {\n            BigNumber memory rhs = sub(a,b);\n            BigNumber memory snd = modexp(rhs, two(), _powModulus(rhs, 2)); // (a-b)^2\n            r = _shr(sub(fst, snd) , 2); // (a * b) = (((a + b)**2 - (a - b)**2) / 4\n        }\n        else {\n            r = _shr(fst, 2); // a==b ? (((a + b)**2 / 4\n        }\n    }\n\n    /** @notice BigNumber division verification: a * b.\n      * @dev div: takes three BigNumbers (a,b and result), and verifies that a/b == result.\n      * Performing BigNumber division on-chain is a significantly expensive operation. As a result, \n      * we expose the ability to verify the result of a division operation, which is a constant time operation. \n      *              (a/b = result) == (a = b * result)\n      *              Integer division only; therefore:\n      *                verify ((b*result) + (a % (b*result))) == a.\n      *              eg. 17/7 == 2:\n      *                verify  (7*2) + (17 % (7*2)) == 17.\n      * The function returns a bool on successful verification. The require statements will ensure that false can never\n      *  be returned, however inheriting contracts may also want to put this function inside a require statement.\n      *  \n      * @param a first BigNumber\n      * @param b second BigNumber\n      * @param r result BigNumber\n      * @return bool whether or not the operation was verified\n      */\n    function divVerify(\n        BigNumber memory a, \n        BigNumber memory b, \n        BigNumber memory r\n    ) internal view returns(bool) {\n\n        // first do zero check.\n        // if a<b (always zero) and r==zero (input check), return true.\n        if(cmp(a, b, false) == -1){\n            require(cmp(zero(), r, false)==0);\n            return true;\n        }\n\n        // Following zero check:\n        //if both negative: result positive\n        //if one negative: result negative\n        //if neither negative: result positive\n        bool positiveResult = ( a.neg && b.neg ) || (!a.neg && !b.neg);\n        require(positiveResult ? !r.neg : r.neg);\n        \n        // require denominator to not be zero.\n        require(!(cmp(b,zero(),true)==0));\n        \n        // division result check assumes inputs are positive.\n        // we have already checked for result sign so this is safe.\n        bool[3] memory negs = [a.neg, b.neg, r.neg];\n        a.neg = false;\n        b.neg = false;\n        r.neg = false;\n\n        // do multiplication (b * r)\n        BigNumber memory fst = mul(b,r);\n        // check if we already have 'a' (ie. no remainder after division). if so, no mod necessary, and return true.\n        if(cmp(fst,a,true)==0) return true;\n        //a mod (b*r)\n        BigNumber memory snd = modexp(a,one(),fst); \n        // ((b*r) + a % (b*r)) == a\n        require(cmp(add(fst,snd),a,true)==0); \n\n        a.neg = negs[0];\n        b.neg = negs[1];\n        r.neg = negs[2];\n\n        return true;\n    }\n\n    /** @notice BigNumber exponentiation: a ^ b.\n      * @dev pow: takes a BigNumber and a uint (a,e), and calculates a^e.\n      * modexp precompile is used to achieve a^e; for this is work, we need to work out the minimum modulus value \n      * such that the modulus passed to modexp is not used. the result of a^e can never be more than size bitlen(a) * e.\n      * \n      * @param a BigNumber\n      * @param e exponent\n      * @return r result BigNumber\n      */\n    function pow(\n        BigNumber memory a, \n        uint e\n    ) internal view returns(BigNumber memory){\n        return modexp(a, init(e, false), _powModulus(a, e));\n    }\n\n    /** @notice BigNumber modulus: a % n.\n      * @dev mod: takes a BigNumber and modulus BigNumber (a,n), and calculates a % n.\n      * modexp precompile is used to achieve a % n; an exponent of value '1' is passed.\n      * @param a BigNumber\n      * @param n modulus BigNumber\n      * @return r result BigNumber\n      */\n    function mod(\n        BigNumber memory a, \n        BigNumber memory n\n    ) internal view returns(BigNumber memory){\n      return modexp(a,one(),n);\n    }\n\n    /** @notice BigNumber modular exponentiation: a^e mod n.\n      * @dev modexp: takes base, exponent, and modulus, internally computes base^exponent % modulus using the precompile at address 0x5, and creates new BigNumber.\n      *              this function is overloaded: it assumes the exponent is positive. if not, the other method is used, whereby the inverse of the base is also passed.\n      *\n      * @param a base BigNumber\n      * @param e exponent BigNumber\n      * @param n modulus BigNumber\n      * @return result BigNumber\n      */    \n    function modexp(\n        BigNumber memory a, \n        BigNumber memory e, \n        BigNumber memory n\n    ) internal view returns(BigNumber memory) {\n        //if exponent is negative, other method with this same name should be used.\n        //if modulus is negative or zero, we cannot perform the operation.\n        require(  e.neg==false\n                && n.neg==false\n                && !isZero(n.val));\n\n        bytes memory _result = _modexp(a.val,e.val,n.val);\n        //get bitlen of result (TODO: optimise. we know bitlen is in the same byte as the modulus bitlen byte)\n        uint bitlen = bitLength(_result);\n        \n        // if result is 0, immediately return.\n        if(bitlen == 0) return zero();\n        // if base is negative AND exponent is odd, base^exp is negative, and tf. result is negative;\n        // in that case we make the result positive by adding the modulus.\n        if(a.neg && isOdd(e)) return add(BigNumber(_result, true, bitlen), n);\n        // in any other case we return the positive result.\n        return BigNumber(_result, false, bitlen);\n    }\n\n    /** @notice BigNumber modular exponentiation with negative base: inv(a)==a_inv && a_inv^e mod n.\n    /** @dev modexp: takes base, base inverse, exponent, and modulus, asserts inverse(base)==base inverse, \n      *              internally computes base_inverse^exponent % modulus and creates new BigNumber.\n      *              this function is overloaded: it assumes the exponent is negative. \n      *              if not, the other method is used, where the inverse of the base is not passed.\n      *\n      * @param a base BigNumber\n      * @param ai base inverse BigNumber\n      * @param e exponent BigNumber\n      * @param a modulus\n      * @return BigNumber memory result.\n      */ \n    function modexp(\n        BigNumber memory a, \n        BigNumber memory ai, \n        BigNumber memory e, \n        BigNumber memory n) \n    internal view returns(BigNumber memory) {\n        // base^-exp = (base^-1)^exp\n        require(!a.neg && e.neg);\n\n        //if modulus is negative or zero, we cannot perform the operation.\n        require(!n.neg && !isZero(n.val));\n\n        //base_inverse == inverse(base, modulus)\n        require(modinvVerify(a, n, ai)); \n            \n        bytes memory _result = _modexp(ai.val,e.val,n.val);\n        //get bitlen of result (TODO: optimise. we know bitlen is in the same byte as the modulus bitlen byte)\n        uint bitlen = bitLength(_result);\n\n        // if result is 0, immediately return.\n        if(bitlen == 0) return zero();\n        // if base_inverse is negative AND exponent is odd, base_inverse^exp is negative, and tf. result is negative;\n        // in that case we make the result positive by adding the modulus.\n        if(ai.neg && isOdd(e)) return add(BigNumber(_result, true, bitlen), n);\n        // in any other case we return the positive result.\n        return BigNumber(_result, false, bitlen);\n    }\n \n    /** @notice modular multiplication: (a*b) % n.\n      * @dev modmul: Takes BigNumbers for a, b, and modulus, and computes (a*b) % modulus\n      *              We call mul for the two input values, before calling modexp, passing exponent as 1.\n      *              Sign is taken care of in sub-functions.\n      *\n      * @param a BigNumber\n      * @param b BigNumber\n      * @param n Modulus BigNumber\n      * @return result BigNumber\n      */\n    function modmul(\n        BigNumber memory a, \n        BigNumber memory b, \n        BigNumber memory n) internal view returns(BigNumber memory) {       \n        return mod(mul(a,b), n);       \n    }\n\n    /** @notice modular inverse verification: Verifies that (a*r) % n == 1.\n      * @dev modinvVerify: Takes BigNumbers for base, modulus, and result, verifies (base*result)%modulus==1, and returns result.\n      *              Similar to division, it's far cheaper to verify an inverse operation on-chain than it is to calculate it, so we allow the user to pass their own result.\n      *\n      * @param a base BigNumber\n      * @param n modulus BigNumber\n      * @param r result BigNumber\n      * @return boolean result\n      */\n    function modinvVerify(\n        BigNumber memory a, \n        BigNumber memory n, \n        BigNumber memory r\n    ) internal view returns(bool) {\n        require(!a.neg && !n.neg); //assert positivity of inputs.\n        /*\n         * the following proves:\n         * - user result passed is correct for values base and modulus\n         * - modular inverse exists for values base and modulus.\n         * otherwise it fails.\n         */        \n        require(cmp(modmul(a, r, n),one(),true)==0);\n        \n        return true;\n    }\n    // ***************** END EXPOSED CORE CALCULATION FUNCTIONS ******************\n\n\n\n\n    // ***************** START EXPOSED HELPER FUNCTIONS ******************\n    /** @notice BigNumber odd number check\n      * @dev isOdd: returns 1 if BigNumber value is an odd number and 0 otherwise.\n      *              \n      * @param a BigNumber\n      * @return r Boolean result\n      */  \n    function isOdd(\n        BigNumber memory a\n    ) internal pure returns(bool r){\n        assembly{\n            let a_ptr := add(mload(a), mload(mload(a))) // go to least significant word\n            r := mod(mload(a_ptr),2)                      // mod it with 2 (returns 0 or 1) \n        }\n    }\n\n    /** @notice BigNumber comparison\n      * @dev cmp: Compares BigNumbers a and b. 'signed' parameter indiciates whether to consider the sign of the inputs.\n      *           'trigger' is used to decide this - \n      *              if both negative, invert the result; \n      *              if both positive (or signed==false), trigger has no effect;\n      *              if differing signs, we return immediately based on input.\n      *           returns -1 on a<b, 0 on a==b, 1 on a>b.\n      *           \n      * @param a BigNumber\n      * @param b BigNumber\n      * @param signed whether to consider sign of inputs\n      * @return int result\n      */\n    function cmp(\n        BigNumber memory a, \n        BigNumber memory b, \n        bool signed\n    ) internal pure returns(int){\n        int trigger = 1;\n        if(signed){\n            if(a.neg && b.neg) trigger = -1;\n            else if(a.neg==false && b.neg==true) return 1;\n            else if(a.neg==true && b.neg==false) return -1;\n        }\n\n        if(a.bitlen>b.bitlen) return    trigger;   // 1*trigger\n        if(b.bitlen>a.bitlen) return -1*trigger;\n\n        uint a_ptr;\n        uint b_ptr;\n        uint a_word;\n        uint b_word;\n\n        uint len = a.val.length; //bitlen is same so no need to check length.\n\n        assembly{\n            a_ptr := add(mload(a),0x20) \n            b_ptr := add(mload(b),0x20)\n        }\n\n        for(uint i=0; i<len;i+=32){\n            assembly{\n                a_word := mload(add(a_ptr,i))\n                b_word := mload(add(b_ptr,i))\n            }\n\n            if(a_word>b_word) return    trigger; // 1*trigger\n            if(b_word>a_word) return -1*trigger; \n\n        }\n\n        return 0; //same value.\n    }\n\n    /** @notice BigNumber equality\n      * @dev eq: returns true if a==b. sign always considered.\n      *           \n      * @param a BigNumber\n      * @param b BigNumber\n      * @return boolean result\n      */\n    function eq(\n        BigNumber memory a, \n        BigNumber memory b\n    ) internal pure returns(bool){\n        int result = cmp(a, b, true);\n        return (result==0) ? true : false;\n    }\n\n    /** @notice BigNumber greater than\n      * @dev eq: returns true if a>b. sign always considered.\n      *           \n      * @param a BigNumber\n      * @param b BigNumber\n      * @return boolean result\n      */\n    function gt(\n        BigNumber memory a, \n        BigNumber memory b\n    ) internal pure returns(bool){\n        int result = cmp(a, b, true);\n        return (result==1) ? true : false;\n    }\n\n    /** @notice BigNumber greater than or equal to\n      * @dev eq: returns true if a>=b. sign always considered.\n      *           \n      * @param a BigNumber\n      * @param b BigNumber\n      * @return boolean result\n      */\n    function gte(\n        BigNumber memory a, \n        BigNumber memory b\n    ) internal pure returns(bool){\n        int result = cmp(a, b, true);\n        return (result==1 || result==0) ? true : false;\n    }\n\n    /** @notice BigNumber less than\n      * @dev eq: returns true if a<b. sign always considered.\n      *           \n      * @param a BigNumber\n      * @param b BigNumber\n      * @return boolean result\n      */\n    function lt(\n        BigNumber memory a, \n        BigNumber memory b\n    ) internal pure returns(bool){\n        int result = cmp(a, b, true);\n        return (result==-1) ? true : false;\n    }\n\n    /** @notice BigNumber less than or equal o\n      * @dev eq: returns true if a<=b. sign always considered.\n      *           \n      * @param a BigNumber\n      * @param b BigNumber\n      * @return boolean result\n      */\n    function lte(\n        BigNumber memory a, \n        BigNumber memory b\n    ) internal pure returns(bool){\n        int result = cmp(a, b, true);\n        return (result==-1 || result==0) ? true : false;\n    }\n\n    /** @notice right shift BigNumber value\n      * @dev shr: right shift BigNumber a by 'bits' bits.\n             copies input value to new memory location before shift and calls _shr function after. \n      * @param a BigNumber value to shift\n      * @param bits amount of bits to shift by\n      * @return result BigNumber\n      */\n    function shr(\n        BigNumber memory a, \n        uint bits\n    ) internal view returns(BigNumber memory){\n        require(!a.neg);\n        return _shr(a, bits);\n    }\n\n    /** @notice right shift BigNumber memory 'dividend' by 'bits' bits.\n      * @dev _shr: Shifts input value in-place, ie. does not create new memory. shr function does this.\n      * right shift does not necessarily have to copy into a new memory location. where the user wishes the modify\n      * the existing value they have in place, they can use this.  \n      * @param bn value to shift\n      * @param bits amount of bits to shift by\n      * @return r result\n      */\n    function _shr(BigNumber memory bn, uint bits) internal view returns(BigNumber memory){\n        uint length;\n        assembly { length := mload(mload(bn)) }\n\n        // if bits is >= the bitlength of the value the result is always 0\n        if(bits >= bn.bitlen) return BigNumber(ZERO,false,0); \n        \n        // set bitlen initially as we will be potentially modifying 'bits'\n        bn.bitlen = bn.bitlen-(bits);\n\n        // handle shifts greater than 256:\n        // if bits is greater than 256 we can simply remove any trailing words, by altering the BN length. \n        // we also update 'bits' so that it is now in the range 0..256.\n        assembly {\n            if or(gt(bits, 0x100), eq(bits, 0x100)) {\n                length := sub(length, mul(div(bits, 0x100), 0x20))\n                mstore(mload(bn), length)\n                bits := mod(bits, 0x100)\n            }\n\n            // if bits is multiple of 8 (byte size), we can simply use identity precompile for cheap memcopy.\n            // otherwise we shift each word, starting at the least signifcant word, one-by-one using the mask technique.\n            // TODO it is possible to do this without the last two operations, see SHL identity copy.\n            let bn_val_ptr := mload(bn)\n            switch eq(mod(bits, 8), 0)\n              case 1 {  \n                  let bytes_shift := div(bits, 8)\n                  let in          := mload(bn)\n                  let inlength    := mload(in)\n                  let insize      := add(inlength, 0x20)\n                  let out         := add(in,     bytes_shift)\n                  let outsize     := sub(insize, bytes_shift)\n                  let success     := staticcall(450, 0x4, in, insize, out, insize)\n                  mstore8(add(out, 0x1f), 0) // maintain our BN layout following identity call:\n                  mstore(in, inlength)         // set current length byte to 0, and reset old length.\n              }\n              default {\n                  let mask\n                  let lsw\n                  let mask_shift := sub(0x100, bits)\n                  let lsw_ptr := add(bn_val_ptr, length)   \n                  for { let i := length } eq(eq(i,0),0) { i := sub(i, 0x20) } { // for(int i=max_length; i!=0; i-=32)\n                      switch eq(i,0x20)                                         // if i==32:\n                          case 1 { mask := 0 }                                  //    - handles lsword: no mask needed.\n                          default { mask := mload(sub(lsw_ptr,0x20)) }          //    - else get mask (previous word)\n                      lsw := shr(bits, mload(lsw_ptr))                          // right shift current by bits\n                      mask := shl(mask_shift, mask)                             // left shift next significant word by mask_shift\n                      mstore(lsw_ptr, or(lsw,mask))                             // store OR'd mask and shifted bits in-place\n                      lsw_ptr := sub(lsw_ptr, 0x20)                             // point to next bits.\n                  }\n              }\n\n            // The following removes the leading word containing all zeroes in the result should it exist, \n            // as well as updating lengths and pointers as necessary.\n            let msw_ptr := add(bn_val_ptr,0x20)\n            switch eq(mload(msw_ptr), 0) \n                case 1 {\n                   mstore(msw_ptr, sub(mload(bn_val_ptr), 0x20)) // store new length in new position\n                   mstore(bn, msw_ptr)                           // update pointer from bn\n                }\n                default {}\n        }\n    \n\n        return bn;\n    }\n\n    /** @notice left shift BigNumber value\n      * @dev shr: left shift BigNumber a by 'bits' bits.\n                  ensures the value is not negative before calling the private function.\n      * @param a BigNumber value to shift\n      * @param bits amount of bits to shift by\n      * @return result BigNumber\n      */\n    function shl(\n        BigNumber memory a, \n        uint bits\n    ) internal view returns(BigNumber memory){\n        require(!a.neg);\n        return _shl(a, bits);\n    }\n\n    /** @notice sha3 hash a BigNumber.\n      * @dev hash: takes a BigNumber and performs sha3 hash on it.\n      *            we hash each BigNumber WITHOUT it's first word - first word is a pointer to the start of the bytes value,\n      *            and so is different for each struct.\n      *             \n      * @param a BigNumber\n      * @return h bytes32 hash.\n      */\n    function hash(\n        BigNumber memory a\n    ) internal pure returns(bytes32 h) {\n        //amount of words to hash = all words of the value and three extra words: neg, bitlen & value length.     \n        assembly {\n            h := keccak256( add(a,0x20), add (mload(mload(a)), 0x60 ) ) \n        }\n    }\n\n    /** @notice BigNumber full zero check\n      * @dev isZero: checks if the BigNumber is in the default zero format for BNs (ie. the result from zero()).\n      *             \n      * @param a BigNumber\n      * @return boolean result.\n      */\n    function isZero(\n        BigNumber memory a\n    ) internal pure returns(bool) {\n        return isZero(a.val) && a.val.length==0x20 && !a.neg && a.bitlen == 0;\n    }\n\n\n    /** @notice bytes zero check\n      * @dev isZero: checks if input bytes value resolves to zero.\n      *             \n      * @param a bytes value\n      * @return boolean result.\n      */\n    function isZero(\n        bytes memory a\n    ) internal pure returns(bool) {\n        uint msword;\n        uint msword_ptr;\n        assembly {\n            msword_ptr := add(a,0x20)\n        }\n        for(uint i=0; i<a.length; i+=32) {\n            assembly { msword := mload(msword_ptr) } // get msword of input\n            if(msword > 0) return false;\n            assembly { msword_ptr := add(msword_ptr, 0x20) }\n        }\n        return true;\n\n    }\n\n    /** @notice BigNumber value bit length\n      * @dev bitLength: returns BigNumber value bit length- ie. log2 (most significant bit of value)\n      *             \n      * @param a BigNumber\n      * @return uint bit length result.\n      */\n    function bitLength(\n        BigNumber memory a\n    ) internal pure returns(uint){\n        return bitLength(a.val);\n    }\n\n    /** @notice bytes bit length\n      * @dev bitLength: returns bytes bit length- ie. log2 (most significant bit of value)\n      *             \n      * @param a bytes value\n      * @return r uint bit length result.\n      */\n    function bitLength(\n        bytes memory a\n    ) internal pure returns(uint r){\n        if(isZero(a)) return 0;\n        uint msword; \n        assembly {\n            msword := mload(add(a,0x20))               // get msword of input\n        }\n        r = bitLength(msword);                         // get bitlen of msword, add to size of remaining words.\n        assembly {                                           \n            r := add(r, mul(sub(mload(a), 0x20) , 8))  // res += (val.length-32)*8;  \n        }\n    }\n\n    /** @notice uint bit length\n        @dev bitLength: get the bit length of a uint input - ie. log2 (most significant bit of 256 bit value (one EVM word))\n      *                       credit: Tjaden Hess @ ethereum.stackexchange             \n      * @param a uint value\n      * @return r uint bit length result.\n      */\n    function bitLength(\n        uint a\n    ) internal pure returns (uint r){\n        assembly {\n            switch eq(a, 0)\n            case 1 {\n                r := 0\n            }\n            default {\n                let arg := a\n                a := sub(a,1)\n                a := or(a, div(a, 0x02))\n                a := or(a, div(a, 0x04))\n                a := or(a, div(a, 0x10))\n                a := or(a, div(a, 0x100))\n                a := or(a, div(a, 0x10000))\n                a := or(a, div(a, 0x100000000))\n                a := or(a, div(a, 0x10000000000000000))\n                a := or(a, div(a, 0x100000000000000000000000000000000))\n                a := add(a, 1)\n                let m := mload(0x40)\n                mstore(m,           0xf8f9cbfae6cc78fbefe7cdc3a1793dfcf4f0e8bbd8cec470b6a28a7a5a3e1efd)\n                mstore(add(m,0x20), 0xf5ecf1b3e9debc68e1d9cfabc5997135bfb7a7a3938b7b606b5b4b3f2f1f0ffe)\n                mstore(add(m,0x40), 0xf6e4ed9ff2d6b458eadcdf97bd91692de2d4da8fd2d0ac50c6ae9a8272523616)\n                mstore(add(m,0x60), 0xc8c0b887b0a8a4489c948c7f847c6125746c645c544c444038302820181008ff)\n                mstore(add(m,0x80), 0xf7cae577eec2a03cf3bad76fb589591debb2dd67e0aa9834bea6925f6a4a2e0e)\n                mstore(add(m,0xa0), 0xe39ed557db96902cd38ed14fad815115c786af479b7e83247363534337271707)\n                mstore(add(m,0xc0), 0xc976c13bb96e881cb166a933a55e490d9d56952b8d4e801485467d2362422606)\n                mstore(add(m,0xe0), 0x753a6d1b65325d0c552a4d1345224105391a310b29122104190a110309020100)\n                mstore(0x40, add(m, 0x100))\n                let magic := 0x818283848586878898a8b8c8d8e8f929395969799a9b9d9e9faaeb6bedeeff\n                let shift := 0x100000000000000000000000000000000000000000000000000000000000000\n                let _a := div(mul(a, magic), shift)\n                r := div(mload(add(m,sub(255,_a))), shift)\n                r := add(r, mul(256, gt(arg, 0x8000000000000000000000000000000000000000000000000000000000000000)))\n                // where a is a power of two, result needs to be incremented. we use the power of two trick here: if(arg & arg-1 == 0) ++r;\n                if eq(and(arg, sub(arg, 1)), 0) {\n                    r := add(r, 1) \n                }\n            }\n        }\n    }\n\n    /** @notice BigNumber zero value\n        @dev zero: returns zero encoded as a BigNumber\n      * @return zero encoded as BigNumber\n      */\n    function zero(\n    ) internal pure returns(BigNumber memory) {\n        return BigNumber(ZERO, false, 0);\n    }\n\n    /** @notice BigNumber one value\n        @dev one: returns one encoded as a BigNumber\n      * @return one encoded as BigNumber\n      */\n    function one(\n    ) internal pure returns(BigNumber memory) {\n        return BigNumber(ONE, false, 1);\n    }\n\n    /** @notice BigNumber two value\n        @dev two: returns two encoded as a BigNumber\n      * @return two encoded as BigNumber\n      */\n    function two(\n    ) internal pure returns(BigNumber memory) {\n        return BigNumber(TWO, false, 2);\n    }\n    // ***************** END EXPOSED HELPER FUNCTIONS ******************\n\n\n\n\n\n    // ***************** START PRIVATE MANAGEMENT FUNCTIONS ******************\n    /** @notice Create a new BigNumber.\n        @dev init: overloading allows caller to obtionally pass bitlen where it is known - as it is cheaper to do off-chain and verify on-chain. \n      *            we assert input is in data structure as defined above, and that bitlen, if passed, is correct.\n      *            'copy' parameter indicates whether or not to copy the contents of val to a new location in memory (for example where you pass \n      *            the contents of another variable's value in)\n      * @param val bytes - bignum value.\n      * @param neg bool - sign of value\n      * @param bitlen uint - bit length of value\n      * @return r BigNumber initialized value.\n      */\n    function _init(\n        bytes memory val, \n        bool neg, \n        uint bitlen\n    ) private view returns(BigNumber memory r){ \n        // use identity at location 0x4 for cheap memcpy.\n        // grab contents of val, load starting from memory end, update memory end pointer.\n        assembly {\n            let data := add(val, 0x20)\n            let length := mload(val)\n            let out\n            let freemem := mload(0x40)\n            switch eq(mod(length, 0x20), 0)                       // if(val.length % 32 == 0)\n                case 1 {\n                    out     := add(freemem, 0x20)                 // freememory location + length word\n                    mstore(freemem, length)                       // set new length \n                }\n                default { \n                    let offset  := sub(0x20, mod(length, 0x20))   // offset: 32 - (length % 32)\n                    out     := add(add(freemem, offset), 0x20)    // freememory location + offset + length word\n                    mstore(freemem, add(length, offset))          // set new length \n                }\n            mstore(add(freemem, 0x20), 0)\n            pop(staticcall(450, 0x4, data, length, out, length))  // copy into 'out' memory location\n            mstore(0x40, add(freemem, add(mload(freemem), 0x20))) // update the free memory pointer\n            \n            // handle leading zero words. assume freemem is pointer to bytes value\n            let bn_length := mload(freemem)\n            for { } eq ( eq(bn_length, 0x20), 0) { } {            // for(; length!=32; length-=32)\n             switch eq(mload(add(freemem, 0x20)),0)               // if(msword==0):\n                    case 1 { freemem := add(freemem, 0x20) }      //     update length pointer\n                    default { break }                             // else: loop termination. non-zero word found\n                bn_length := sub(bn_length,0x20)                          \n            } \n            mstore(freemem, bn_length)                             \n\n            mstore(r, freemem)                                    // store new bytes value in r\n            mstore(add(r, 0x20), neg)                             // store neg value in r\n        }\n\n        r.bitlen = bitlen == 0 ? bitLength(r.val) : bitlen;\n    }\n    // ***************** END PRIVATE MANAGEMENT FUNCTIONS ******************\n\n\n\n\n\n    // ***************** START PRIVATE CORE CALCULATION FUNCTIONS ******************\n    /** @notice takes two BigNumber memory values and the bitlen of the max value, and adds them.\n      * @dev _add: This function is private and only callable from add: therefore the values may be of different sizes,\n      *            in any order of size, and of different signs (handled in add).\n      *            As values may be of different sizes, inputs are considered starting from the least significant \n      *            words, working back. \n      *            The function calculates the new bitlen (basically if bitlens are the same for max and min, \n      *            max_bitlen++) and returns a new BigNumber memory value.\n      *\n      * @param max bytes -  biggest value  (determined from add)\n      * @param min bytes -  smallest value (determined from add)\n      * @param max_bitlen uint - bit length of max value.\n      * @return bytes result - max + min.\n      * @return uint - bit length of result.\n      */\n    function _add(\n        bytes memory max, \n        bytes memory min, \n        uint max_bitlen\n    ) private pure returns (bytes memory, uint) {\n        bytes memory result;\n        assembly {\n\n            let result_start := mload(0x40)                                   // Get the highest available block of memory\n            let carry := 0\n            let uint_max := sub(0,1)\n\n            let max_ptr := add(max, mload(max))\n            let min_ptr := add(min, mload(min))                               // point to last word of each byte array.\n\n            let result_ptr := add(add(result_start,0x20), mload(max))         // set result_ptr end.\n\n            for { let i := mload(max) } eq(eq(i,0),0) { i := sub(i, 0x20) } { // for(int i=max_length; i!=0; i-=32)\n                let max_val := mload(max_ptr)                                 // get next word for 'max'\n                switch gt(i,sub(mload(max),mload(min)))                       // if(i>(max_length-min_length)). while \n                                                                              // 'min' words are still available.\n                    case 1{ \n                        let min_val := mload(min_ptr)                         //      get next word for 'min'\n                        mstore(result_ptr, add(add(max_val,min_val),carry))   //      result_word = max_word+min_word+carry\n                        switch gt(max_val, sub(uint_max,sub(min_val,carry)))  //      this switch block finds whether or\n                                                                              //      not to set the carry bit for the\n                                                                              //      next iteration.\n                            case 1  { carry := 1 }\n                            default {\n                                switch and(eq(max_val,uint_max),or(gt(carry,0), gt(min_val,0)))\n                                case 1 { carry := 1 }\n                                default{ carry := 0 }\n                            }\n                            \n                        min_ptr := sub(min_ptr,0x20)                       //       point to next 'min' word\n                    }\n                    default{                                               // else: remainder after 'min' words are complete.\n                        mstore(result_ptr, add(max_val,carry))             //       result_word = max_word+carry\n                        \n                        switch and( eq(uint_max,max_val), eq(carry,1) )    //       this switch block finds whether or \n                                                                           //       not to set the carry bit for the \n                                                                           //       next iteration.\n                            case 1  { carry := 1 }\n                            default { carry := 0 }\n                    }\n                result_ptr := sub(result_ptr,0x20)                         // point to next 'result' word\n                max_ptr := sub(max_ptr,0x20)                               // point to next 'max' word\n            }\n\n            switch eq(carry,0) \n                case 1{ result_start := add(result_start,0x20) }           // if carry is 0, increment result_start, ie.\n                                                                           // length word for result is now one word \n                                                                           // position ahead.\n                default { mstore(result_ptr, 1) }                          // else if carry is 1, store 1; overflow has\n                                                                           // occured, so length word remains in the \n                                                                           // same position.\n\n            result := result_start                                         // point 'result' bytes value to the correct\n                                                                           // address in memory.\n            mstore(result,add(mload(max),mul(0x20,carry)))                 // store length of result. we are finished \n                                                                           // with the byte array.\n            \n            mstore(0x40, add(result,add(mload(result),0x20)))              // Update freemem pointer to point to new \n                                                                           // end of memory.\n\n            // we now calculate the result's bit length.\n            // with addition, if we assume that some a is at least equal to some b, then the resulting bit length will\n            // be a's bit length or (a's bit length)+1, depending on carry bit.this is cheaper than calling bitLength.\n            let msword := mload(add(result,0x20))                             // get most significant word of result\n            // if(msword==1 || msword>>(max_bitlen % 256)==1):\n            if or( eq(msword, 1), eq(shr(mod(max_bitlen,256),msword),1) ) {\n                    max_bitlen := add(max_bitlen, 1)                          // if msword's bit length is 1 greater \n                                                                              // than max_bitlen, OR overflow occured,\n                                                                              // new bitlen is max_bitlen+1.\n                }\n        }\n        \n\n        return (result, max_bitlen);\n    }\n\n    /** @notice takes two BigNumber memory values and subtracts them.\n      * @dev _sub: This function is private and only callable from add: therefore the values may be of different sizes, \n      *            in any order of size, and of different signs (handled in add).\n      *            As values may be of different sizes, inputs are considered starting from the least significant words,\n      *            working back. \n      *            The function calculates the new bitlen (basically if bitlens are the same for max and min, \n      *            max_bitlen++) and returns a new BigNumber memory value.\n      *\n      * @param max bytes -  biggest value  (determined from add)\n      * @param min bytes -  smallest value (determined from add)\n      * @return bytes result - max + min.\n      * @return uint - bit length of result.\n      */\n    function _sub(\n        bytes memory max, \n        bytes memory min\n    ) internal pure returns (bytes memory, uint) {\n        bytes memory result;\n        uint carry = 0;\n        uint uint_max = type(uint256).max;\n        assembly {\n                \n            let result_start := mload(0x40)                                 // Get the highest available block of \n                                                                            // memory\n        \n            let max_len := mload(max)\n            let min_len := mload(min)                                       // load lengths of inputs\n            \n            let len_diff := sub(max_len,min_len)                            // get differences in lengths.\n            \n            let max_ptr := add(max, max_len)\n            let min_ptr := add(min, min_len)                                // go to end of arrays\n            let result_ptr := add(result_start, max_len)                    // point to least significant result \n                                                                            // word.\n            let memory_end := add(result_ptr,0x20)                          // save memory_end to update free memory\n                                                                            // pointer at the end.\n            \n            for { let i := max_len } eq(eq(i,0),0) { i := sub(i, 0x20) } {  // for(int i=max_length; i!=0; i-=32)\n                let max_val := mload(max_ptr)                               // get next word for 'max'\n                switch gt(i,len_diff)                                       // if(i>(max_length-min_length)). while\n                                                                            // 'min' words are still available.\n                    case 1{ \n                        let min_val := mload(min_ptr)                       //  get next word for 'min'\n        \n                        mstore(result_ptr, sub(sub(max_val,min_val),carry)) //  result_word = (max_word-min_word)-carry\n                    \n                        switch or(lt(max_val, add(min_val,carry)), \n                               and(eq(min_val,uint_max), eq(carry,1)))      //  this switch block finds whether or \n                                                                            //  not to set the carry bit for the next iteration.\n                            case 1  { carry := 1 }\n                            default { carry := 0 }\n                            \n                        min_ptr := sub(min_ptr,0x20)                        //  point to next 'result' word\n                    }\n                    default {                                               // else: remainder after 'min' words are complete.\n\n                        mstore(result_ptr, sub(max_val,carry))              //      result_word = max_word-carry\n                    \n                        switch and( eq(max_val,0), eq(carry,1) )            //      this switch block finds whether or \n                                                                            //      not to set the carry bit for the \n                                                                            //      next iteration.\n                            case 1  { carry := 1 }\n                            default { carry := 0 }\n\n                    }\n                result_ptr := sub(result_ptr,0x20)                          // point to next 'result' word\n                max_ptr    := sub(max_ptr,0x20)                             // point to next 'max' word\n            }      \n\n            //the following code removes any leading words containing all zeroes in the result.\n            result_ptr := add(result_ptr,0x20)                                                 \n\n            // for(result_ptr+=32;; result==0; result_ptr+=32)\n            for { }   eq(mload(result_ptr), 0) { result_ptr := add(result_ptr,0x20) } { \n               result_start := add(result_start, 0x20)                      // push up the start pointer for the result\n               max_len := sub(max_len,0x20)                                 // subtract a word (32 bytes) from the \n                                                                            // result length.\n            } \n\n            result := result_start                                          // point 'result' bytes value to \n                                                                            // the correct address in memory\n            \n            mstore(result,max_len)                                          // store length of result. we \n                                                                            // are finished with the byte array.\n            \n            mstore(0x40, memory_end)                                        // Update freemem pointer.\n        }\n\n        uint new_bitlen = bitLength(result);                                // calculate the result's \n                                                                            // bit length.\n        \n        return (result, new_bitlen);\n    }\n\n    /** @notice gets the modulus value necessary for calculating exponetiation.\n      * @dev _powModulus: we must pass the minimum modulus value which would return JUST the a^b part of the calculation\n      *       in modexp. the rationale here is:\n      *       if 'a' has n bits, then a^e has at most n*e bits.\n      *       using this modulus in exponetiation will result in simply a^e.\n      *       therefore the value may be many words long.\n      *       This is done by:\n      *         - storing total modulus byte length\n      *         - storing first word of modulus with correct bit set\n      *         - updating the free memory pointer to come after total length.\n      *\n      * @param a BigNumber base\n      * @param e uint exponent\n      * @return BigNumber modulus result\n      */\n    function _powModulus(\n        BigNumber memory a, \n        uint e\n    ) private pure returns(BigNumber memory){\n        bytes memory _modulus = ZERO;\n        uint mod_index;\n\n        assembly {\n            mod_index := mul(mload(add(a, 0x40)), e)               // a.bitlen * e is the max bitlength of result\n            let first_word_modulus := shl(mod(mod_index, 256), 1)  // set bit in first modulus word.\n            mstore(_modulus, mul(add(div(mod_index,256),1),0x20))  // store length of modulus\n            mstore(add(_modulus,0x20), first_word_modulus)         // set first modulus word\n            mstore(0x40, add(_modulus, add(mload(_modulus),0x20))) // update freemem pointer to be modulus index\n                                                                   // + length\n        }\n\n        //create modulus BigNumber memory for modexp function\n        return BigNumber(_modulus, false, mod_index); \n    }\n\n    /** @notice Modular Exponentiation: Takes bytes values for base, exp, mod and calls precompile for (base^exp)%^mod\n      * @dev modexp: Wrapper for built-in modexp (contract 0x5) as described here: \n      *              https://github.com/ethereum/EIPs/pull/198\n      *\n      * @param _b bytes base\n      * @param _e bytes base_inverse \n      * @param _m bytes exponent\n      * @param r bytes result.\n      */\n    function _modexp(\n        bytes memory _b, \n        bytes memory _e, \n        bytes memory _m\n    ) private view returns(bytes memory r) {\n        assembly {\n            \n            let bl := mload(_b)\n            let el := mload(_e)\n            let ml := mload(_m)\n            \n            \n            let freemem := mload(0x40)  // Free memory pointer is always stored at 0x40\n            \n            \n            mstore(freemem, bl)         // arg[0] = base.length @ +0\n            \n            mstore(add(freemem,32), el) // arg[1] = exp.length @ +32\n            \n            mstore(add(freemem,64), ml) // arg[2] = mod.length @ +64\n            \n            // arg[3] = base.bits @ + 96\n            // Use identity built-in (contract 0x4) as a cheap memcpy\n            let success := staticcall(450, 0x4, add(_b,32), bl, add(freemem,96), bl)\n            \n            // arg[4] = exp.bits @ +96+base.length\n            let size := add(96, bl)\n            success := staticcall(450, 0x4, add(_e,32), el, add(freemem,size), el)\n            \n            // arg[5] = mod.bits @ +96+base.length+exp.length\n            size := add(size,el)\n            success := staticcall(450, 0x4, add(_m,32), ml, add(freemem,size), ml)\n            \n            switch success case 0 { invalid() } //fail where we haven't enough gas to make the call\n\n            // Total size of input = 96+base.length+exp.length+mod.length\n            size := add(size,ml)\n            // Invoke contract 0x5, put return value right after mod.length, @ +96\n            success := staticcall(sub(gas(), 1350), 0x5, freemem, size, add(freemem, 0x60), ml)\n\n            switch success case 0 { invalid() } //fail where we haven't enough gas to make the call\n\n            let length := ml\n            let msword_ptr := add(freemem, 0x60)\n\n            ///the following code removes any leading words containing all zeroes in the result.\n            for { } eq ( eq(length, 0x20), 0) { } {                   // for(; length!=32; length-=32)\n                switch eq(mload(msword_ptr),0)                        // if(msword==0):\n                    case 1 { msword_ptr := add(msword_ptr, 0x20) }    //     update length pointer\n                    default { break }                                 // else: loop termination. non-zero word found\n                length := sub(length,0x20)                          \n            } \n            r := sub(msword_ptr,0x20)\n            mstore(r, length)\n            \n            // point to the location of the return value (length, bits)\n            //assuming mod length is multiple of 32, return value is already in the right format.\n            mstore(0x40, add(add(96, freemem),ml)) //deallocate freemem pointer\n        }        \n    }\n    // ***************** END PRIVATE CORE CALCULATION FUNCTIONS ******************\n\n\n\n\n\n    // ***************** START PRIVATE HELPER FUNCTIONS ******************\n    /** @notice left shift BigNumber memory 'dividend' by 'value' bits.\n      * @param bn value to shift\n      * @param bits amount of bits to shift by\n      * @return r result\n      */\n    function _shl(\n        BigNumber memory bn, \n        uint bits\n    ) private view returns(BigNumber memory r) {\n        if(bits==0 || bn.bitlen==0) return bn;\n        \n        // we start by creating an empty bytes array of the size of the output, based on 'bits'.\n        // for that we must get the amount of extra words needed for the output.\n        uint length = bn.val.length;\n        // position of bitlen in most significnat word\n        uint bit_position = ((bn.bitlen-1) % 256) + 1;\n        // total extra words. we check if the bits remainder will add one more word.\n        uint extra_words = (bits / 256) + ( (bits % 256) >= (256 - bit_position) ? 1 : 0);\n        // length of output\n        uint total_length = length + (extra_words * 0x20);\n\n        r.bitlen = bn.bitlen+(bits);\n        r.neg = bn.neg;\n        bits %= 256;\n\n        \n        bytes memory bn_shift;\n        uint bn_shift_ptr;\n        // the following efficiently creates an empty byte array of size 'total_length'\n        assembly {\n            let freemem_ptr := mload(0x40)                // get pointer to free memory\n            mstore(freemem_ptr, total_length)             // store bytes length\n            let mem_end := add(freemem_ptr, total_length) // end of memory\n            mstore(mem_end, 0)                            // store 0 at memory end\n            bn_shift := freemem_ptr                       // set pointer to bytes\n            bn_shift_ptr := add(bn_shift, 0x20)           // get bn_shift pointer\n            mstore(0x40, add(mem_end, 0x20))              // update freemem pointer\n        }\n\n        // use identity for cheap copy if bits is multiple of 8.\n        if(bits % 8 == 0) {\n            // calculate the position of the first byte in the result.\n            uint bytes_pos = ((256-(((bn.bitlen-1)+bits) % 256))-1) / 8;\n            uint insize = (bn.bitlen / 8) + ((bn.bitlen % 8 != 0) ? 1 : 0);\n            assembly {\n              let in          := add(add(mload(bn), 0x20), div(sub(256, bit_position), 8))\n              let out         := add(bn_shift_ptr, bytes_pos)\n              let success     := staticcall(450, 0x4, in, insize, out, length)\n            }\n            r.val = bn_shift;\n            return r;\n        }\n\n\n        uint mask;\n        uint mask_shift = 0x100-bits;\n        uint msw;\n        uint msw_ptr;\n\n       assembly {\n           msw_ptr := add(mload(bn), 0x20)   \n       }\n        \n       // handle first word before loop if the shift adds any extra words.\n       // the loop would handle it if the bit shift doesn't wrap into the next word, \n       // so we check only for that condition.\n       if((bit_position+bits) > 256){\n           assembly {\n              msw := mload(msw_ptr)\n              mstore(bn_shift_ptr, shr(mask_shift, msw))\n              bn_shift_ptr := add(bn_shift_ptr, 0x20)\n           }\n       }\n        \n       // as a result of creating the empty array we just have to operate on the words in the original bn.\n       for(uint i=bn.val.length; i!=0; i-=0x20){                  // for each word:\n           assembly {\n               msw := mload(msw_ptr)                              // get most significant word\n               switch eq(i,0x20)                                  // if i==32:\n                   case 1 { mask := 0 }                           // handles msword: no mask needed.\n                   default { mask := mload(add(msw_ptr,0x20)) }   // else get mask (next word)\n               msw := shl(bits, msw)                              // left shift current msw by 'bits'\n               mask := shr(mask_shift, mask)                      // right shift next significant word by mask_shift\n               mstore(bn_shift_ptr, or(msw,mask))                 // store OR'd mask and shifted bits in-place\n               msw_ptr := add(msw_ptr, 0x20)\n               bn_shift_ptr := add(bn_shift_ptr, 0x20)\n           }\n       }\n\n       r.val = bn_shift;\n    }\n    // ***************** END PRIVATE HELPER FUNCTIONS ******************\n}\n"
    },
    "solidity-cborutils/contracts/CBOR.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@ensdomains/buffer/contracts/Buffer.sol\";\n\n/**\n* @dev A library for populating CBOR encoded payload in Solidity.\n*\n* https://datatracker.ietf.org/doc/html/rfc7049\n*\n* The library offers various write* and start* methods to encode values of different types.\n* The resulted buffer can be obtained with data() method.\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\n* in an invalid CBOR if start/write/end flow is violated.\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\n* except for nested start/end pairs.\n*/\n\nlibrary CBOR {\n    using Buffer for Buffer.buffer;\n\n    struct CBORBuffer {\n        Buffer.buffer buf;\n        uint256 depth;\n    }\n\n    uint8 private constant MAJOR_TYPE_INT = 0;\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\n    uint8 private constant MAJOR_TYPE_STRING = 3;\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\n    uint8 private constant MAJOR_TYPE_MAP = 5;\n    uint8 private constant MAJOR_TYPE_TAG = 6;\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\n\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\n\n    uint8 private constant CBOR_FALSE = 20;\n    uint8 private constant CBOR_TRUE = 21;\n    uint8 private constant CBOR_NULL = 22;\n    uint8 private constant CBOR_UNDEFINED = 23;\n\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\n        Buffer.init(cbor.buf, capacity);\n        cbor.depth = 0;\n        return cbor;\n    }\n\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\n        require(buf.depth == 0, \"Invalid CBOR\");\n        return buf.buf.buf;\n    }\n\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\n        writeBytes(buf, abi.encode(value));\n    }\n\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\n        if (value < 0) {\n            buf.buf.appendUint8(\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\n            );\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\n        } else {\n            writeUInt256(buf, uint256(value));\n        }\n    }\n\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\n    }\n\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\n        if(value >= 0) {\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\n        } else{\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\n        }\n    }\n\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\n        buf.buf.append(value);\n    }\n\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\n        buf.buf.append(bytes(value));\n    }\n\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\n    }\n\n    function writeNull(CBORBuffer memory buf) internal pure {\n        writeContentFree(buf, CBOR_NULL);\n    }\n\n    function writeUndefined(CBORBuffer memory buf) internal pure {\n        writeContentFree(buf, CBOR_UNDEFINED);\n    }\n\n    function startArray(CBORBuffer memory buf) internal pure {\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\n        buf.depth += 1;\n    }\n\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\n    }\n\n    function startMap(CBORBuffer memory buf) internal pure {\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\n        buf.depth += 1;\n    }\n\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\n    }\n\n    function endSequence(CBORBuffer memory buf) internal pure {\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\n        buf.depth -= 1;\n    }\n\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\n        writeString(buf, key);\n        writeString(buf, value);\n    }\n\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\n        writeString(buf, key);\n        writeBytes(buf, value);\n    }\n\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\n        writeString(buf, key);\n        writeUInt256(buf, value);\n    }\n\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\n        writeString(buf, key);\n        writeInt256(buf, value);\n    }\n\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\n        writeString(buf, key);\n        writeUInt64(buf, value);\n    }\n\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\n        writeString(buf, key);\n        writeInt64(buf, value);\n    }\n\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\n        writeString(buf, key);\n        writeBool(buf, value);\n    }\n\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\n        writeString(buf, key);\n        writeNull(buf);\n    }\n\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\n        writeString(buf, key);\n        writeUndefined(buf);\n    }\n\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\n        writeString(buf, key);\n        startMap(buf);\n    }\n\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\n        writeString(buf, key);\n        startArray(buf);\n    }\n\n    function writeFixedNumeric(\n        CBORBuffer memory buf,\n        uint8 major,\n        uint64 value\n    ) private pure {\n        if (value <= 23) {\n            buf.buf.appendUint8(uint8((major << 5) | value));\n        } else if (value <= 0xFF) {\n            buf.buf.appendUint8(uint8((major << 5) | 24));\n            buf.buf.appendInt(value, 1);\n        } else if (value <= 0xFFFF) {\n            buf.buf.appendUint8(uint8((major << 5) | 25));\n            buf.buf.appendInt(value, 2);\n        } else if (value <= 0xFFFFFFFF) {\n            buf.buf.appendUint8(uint8((major << 5) | 26));\n            buf.buf.appendInt(value, 4);\n        } else {\n            buf.buf.appendUint8(uint8((major << 5) | 27));\n            buf.buf.appendInt(value, 8);\n        }\n    }\n\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\n        private\n        pure\n    {\n        buf.buf.appendUint8(uint8((major << 5) | 31));\n    }\n\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\n        private\n        pure\n    {\n        writeFixedNumeric(buf, major, length);\n    }\n\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 0,
      "details": {
        "yul": false,
        "constantOptimizer": true
      }
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}