{
  "address": "0x6BAaeA2af76D5E0735f3801d6b93e7AbD4246A9D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "owners_",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "targes",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "datas",
          "type": "bytes[]"
        }
      ],
      "name": "Executed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXECUTE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        }
      ],
      "name": "addOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "datas",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256[]",
          "name": "deadlines",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "sigs",
          "type": "bytes[]"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "datas",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "hashTypeData",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "digest",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        }
      ],
      "name": "removeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sweepETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sweepToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "546f217c7e971e1401c1faec9faa3e96",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners_\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targes\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXECUTE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"deadlines\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"sigs\",\"type\":\"bytes[]\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"hashTypeData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sweepETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addOwner(address[])\":{\"params\":{\"owners\":\"array of addresses to be added\"}},\"constructor\":{\"params\":{\"owners_\":\"Add contract owner\"}},\"execute(uint256,address[],bytes[],uint256[],bytes[])\":{\"params\":{\"datas\":\"The method called by the corresponding contract and the abi-encoded array of its parameters\",\"deadlines\":\"array of valid times for signature\",\"id\":\"Event ID for signature\",\"sigs\":\"Array of signatures for multiple transactions\",\"targets\":\"Array of contract addresses to be called\"}},\"getOwners()\":{\"returns\":{\"owners\":\"address array\"}},\"hashTypeData(uint256,address[],bytes[],uint256)\":{\"params\":{\"datas\":\"The method called by the corresponding contract and the abi-encoded array of its parameters\",\"deadline\":\"Valid time for signature\",\"id\":\"Event ID for signature\",\"targets\":\"Array of contract addresses to be called\"},\"returns\":{\"digest\":\"Data encrypted according to the EIP712 specification\"}},\"removeOwner(address[])\":{\"params\":{\"owners\":\"array of addresses to be removed\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Executed(uint256,address[],bytes[])\":{\"notice\":\"Emitted when execute task\"}},\"kind\":\"user\",\"methods\":{\"EXECUTE_TYPEHASH()\":{\"notice\":\"keccak256(\\\"Execute(uint256 id,address[] targets,bytes[] datas,uint256 deadline)\\\")\"},\"addOwner(address[])\":{\"notice\":\"Add contract owner\"},\"constructor\":{\"notice\":\"Initialize parameters\"},\"execute(uint256,address[],bytes[],uint256[],bytes[])\":{\"notice\":\"Execute multi-transaction signature\"},\"getOwners()\":{\"notice\":\"Get owner list\"},\"hashTypeData(uint256,address[],bytes[],uint256)\":{\"notice\":\"Encrypt data for multisig operation\"},\"removeOwner(address[])\":{\"notice\":\"Remove contract owner\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/msig/PawnMultiSig.sol\":\"MultiSig\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/msig/PawnMultiSig.sol\":{\"content\":\"// SPDX-License-Identifier: BSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n\\ncontract MultiSig {\\n    using ECDSA for bytes32;\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice keccak256(\\\"Execute(uint256 id,address[] targets,bytes[] datas,uint256 deadline)\\\")\\n    bytes32 public constant EXECUTE_TYPEHASH = 0xea2b786765a2a3866619afc64bfb36f8668e4c2afac960ba57000f6a29c79d60;\\n\\n    bytes32 public immutable DOMAIN_SEPARATOR;\\n\\n    EnumerableSet.AddressSet private _owners;\\n\\n    // Record whether ID has been executed\\n    mapping(uint256 => bool) isExecuted;\\n\\n    /// @notice Emitted when execute task\\n    event Executed(uint256 indexed id, address[] targes, bytes[] datas);\\n\\n    modifier onlyMultiSigOwner() {\\n        require(_owners.contains(msg.sender), \\\"caller isn't owner\\\");\\n        _;\\n    }\\n\\n    modifier onlySelf() {\\n        require(msg.sender == address(this), \\\"not owner contract\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initialize parameters\\n     * @param owners_ Add contract owner\\n     */\\n    constructor(address[] memory owners_) {\\n        _addOwner(owners_);\\n        uint256 chainId;\\n\\n        assembly {\\n            chainId := chainid()\\n        }\\n\\n        DOMAIN_SEPARATOR = keccak256(abi.encode(\\n            keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n            keccak256(bytes(\\\"MultiSig\\\")),\\n            keccak256(bytes(\\\"1\\\")),\\n            chainId,\\n            address(this)\\n        ));\\n    }\\n\\n    /**\\n     * @notice Encrypt data for multisig operation\\n     * @param id Event ID for signature\\n     * @param targets Array of contract addresses to be called\\n     * @param datas The method called by the corresponding contract and the abi-encoded array of its parameters\\n     * @param deadline Valid time for signature\\n     * @return digest Data encrypted according to the EIP712 specification\\n     */\\n    function hashTypeData(uint256 id, address[] memory targets, bytes[] memory datas, uint256 deadline) public view returns (bytes32 digest) {\\n        bytes32[] memory hashedDatas = new bytes32[](datas.length);\\n        for(uint i = 0; i < datas.length; i++) {\\n            hashedDatas[i] = keccak256(datas[i]);\\n        }\\n\\n        bytes32 structHash = keccak256(abi.encode(\\n            EXECUTE_TYPEHASH,\\n            id,\\n            keccak256(abi.encodePacked(targets)),\\n            keccak256(abi.encodePacked(hashedDatas)),\\n            deadline\\n        ));\\n        digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, structHash));\\n    }\\n\\n    /**\\n     * @notice Execute multi-transaction signature\\n     * @param id Event ID for signature\\n     * @param targets Array of contract addresses to be called\\n     * @param datas The method called by the corresponding contract and the abi-encoded array of its parameters\\n     * @param deadlines array of valid times for signature\\n     * @param sigs Array of signatures for multiple transactions\\n     */\\n    function execute(uint256 id, address[] memory targets, bytes[] memory datas, uint256[] memory deadlines, bytes[] memory sigs) public payable onlyMultiSigOwner {\\n        require(_validSignature(id, targets, datas, deadlines, sigs), \\\"invalid signatures\\\");\\n\\n        for(uint256 i = 0; i < targets.length; i++) {\\n            targets[i].functionCall(datas[i]);\\n        }\\n        isExecuted[id] = true;\\n        emit Executed(id, targets, datas);\\n    }\\n\\n    /**\\n     * @notice Signature validation\\n     * @param id Event id\\n     * @param targets Contract address array to be called\\n     * @param datas Array of ABI encodings of the corresponding contract call method and its parameters\\n     * @param deadlines Array of valid times for signatures\\n     * @param sigs Array of signatures for multiple transactions\\n     * @return bool Result of signature validation\\n     */\\n    function _validSignature(uint256 id, address[] memory targets, bytes[] memory datas, uint256[] memory deadlines, bytes[] memory sigs) private view returns (bool) {\\n        uint256 required = 2;\\n        require(!isExecuted[id], \\\"tx is executed\\\");\\n        require(sigs.length >= required, \\\"sig num not enough\\\");\\n        require(targets.length == datas.length, \\\"INCONSISTENT_PARAMS_LENGTH\\\");\\n        require(deadlines.length == sigs.length, \\\"INCONSISTENT_PARAMS_LENGTH\\\");\\n\\n        address[] memory addrs = new address[](sigs.length);\\n        for(uint i = 0; i < sigs.length; i++) {\\n            require(deadlines[i] >= block.timestamp, \\\"expired\\\");\\n            bytes32 digest = hashTypeData(id, targets, datas, deadlines[i]);\\n            addrs[i] = digest.recover(sigs[i]);\\n        }\\n        require(_distinctOwners(addrs), \\\"distinct owners\\\");\\n        return true;\\n    }\\n  \\n    /**\\n     * @notice Remove duplicated owner\\n     * @param addrs owner array\\n     * @return bool Deduplication result\\n     */\\n    function _distinctOwners(address[] memory addrs) private view returns (bool) {\\n        if (addrs.length > _owners.length()) {\\n            return false;\\n        }\\n        for(uint i = 0; i < addrs.length; i++) {\\n            if (!_owners.contains(addrs[i])) {\\n                return false;\\n            }\\n            //address should be distinct\\n            for(uint j = 0; j < i; j++) {\\n                if (addrs[i] == addrs[j]) {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get owner list\\n     * @return owners address array\\n     */\\n    function getOwners() external view returns (address[] memory owners) {\\n        uint256 length = _owners.length();\\n        owners = new address[](length);\\n        for(uint i = 0; i < length; i++) {\\n            owners[i] = _owners.at(i);\\n        }\\n    }\\n\\n    /**\\n     * @notice Add contract owner\\n     * @param owners array of addresses to be added\\n     */\\n    function addOwner(address[] memory owners) external onlySelf {\\n        _addOwner(owners);\\n    }\\n\\n    /**\\n     * @notice Add contract owner\\n     * @param owners Address array to be added\\n     */\\n    function _addOwner(address[] memory owners) private {\\n        for(uint256 i = 0; i < owners.length; i++) {\\n            require(owners[i] != address(0), \\\"Invalid owner address provided\\\");\\n            _owners.add(owners[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Remove contract owner\\n     * @param owners array of addresses to be removed\\n     */\\n    function removeOwner(address[] memory owners) external onlySelf {\\n        for(uint256 i = 0; i < owners.length; i++) {\\n            _owners.remove(owners[i]);\\n        }\\n        require(_owners.length() >= 1, \\\"contract at least need one owner\\\");\\n    }\\n\\n    function sweepToken(IERC20 token, address receiver, uint256 amount) external onlySelf {\\n        token.safeTransfer(receiver, amount);\\n    }\\n\\n    function sweepETH(address receiver, uint256 amount) external onlySelf {\\n        payable(receiver).transfer(amount);\\n    }\\n\\n    receive() external payable {}\\n}\",\"keccak256\":\"0xc5c5ff60a8cfe3fe20ca29f45eff8d718b7825ecf9e206bad7afa2fd05b4c691\",\"license\":\"BSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200234d3803806200234d833981016040819052620000349162000392565b6200003f8162000110565b60408051808201825260088152674d756c746953696760c01b6020918201528151808301835260018152603160f81b9082015290514691620000ec917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f917fd90d81238fec68b58412fea0ed72a6621ecd31c74022809053834bb75fa1820f917fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6918691309101620003e5565b60408051601f19818403018152919052805160209091012060805250620004c09050565b60005b8151811015620001bf5760006001600160a01b03168282815181106200013d576200013d6200043b565b60200260200101516001600160a01b031603620001775760405162461bcd60e51b81526004016200016e9062000451565b60405180910390fd5b620001a98282815181106200019057620001906200043b565b60200260200101516000620001c360201b90919060201c565b5080620001b681620004a3565b91505062000113565b5050565b6000620001da836001600160a01b038416620001e3565b90505b92915050565b60008181526001830160205260408120546200022c57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620001dd565b506000620001dd565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b038211171562000273576200027362000235565b6040525050565b60006200028660405190565b90506200029482826200024b565b919050565b60006001600160401b03821115620002b557620002b562000235565b5060209081020190565b60006001600160a01b038216620001dd565b620002dc81620002bf565b8114620002e857600080fd5b50565b8051620001dd81620002d1565b60006200030f620003098462000299565b6200027a565b83815290506020808201908402830185811115620003305762000330600080fd5b835b81811015620003585780620003488882620002eb565b8452506020928301920162000332565b5050509392505050565b600082601f830112620003785762000378600080fd5b81516200038a848260208601620002f8565b949350505050565b600060208284031215620003a957620003a9600080fd5b81516001600160401b03811115620003c457620003c4600080fd5b6200038a8482850162000362565b805b82525050565b620003d481620002bf565b60a08101620003f58288620003d2565b620004046020830187620003d2565b620004136040830186620003d2565b620004226060830185620003d2565b620004316080830184620003da565b9695505050505050565b634e487b7160e01b600052603260045260246000fd5b60208082528101620001dd81601e81527f496e76616c6964206f776e657220616464726573732070726f76696465640000602082015260400190565b634e487b7160e01b600052601160045260246000fd5b60006000198203620004b957620004b96200048d565b5060010190565b608051611e6b620004e26000396000818160da01526103ca0152611e6b6000f3fe60806040526004361061007a5760003560e01c80630137abc9146100865780633441e57d146100a85780633644e515146100c85780634fde0e4c146101125780635b116ab81461013257806360d2f33d1461015257806364aff9ec146101745780639b5dd9a614610194578063a0e67e2b146101a757600080fd5b3661008157005b600080fd5b34801561009257600080fd5b506100a66100a13660046111c3565b6101c9565b005b3480156100b457600080fd5b506100a66100c33660046111c3565b6101fd565b3480156100d457600080fd5b506100fc7f000000000000000000000000000000000000000000000000000000000000000081565b6040516101099190611205565b60405180910390f35b34801561011e57600080fd5b506100fc61012d366004611344565b610293565b34801561013e57600080fd5b506100a661014d3660046113dc565b61041d565b34801561015e57600080fd5b506100fc600080516020611e1683398151915281565b34801561018057600080fd5b506100a661018f366004611438565b610477565b6100a66101a23660046114fd565b6104aa565b3480156101b357600080fd5b506101bc6105c4565b6040516101099190611643565b3330146101f15760405162461bcd60e51b81526004016101e890611680565b60405180910390fd5b6101fa8161066f565b50565b33301461021c5760405162461bcd60e51b81526004016101e890611680565b60005b81518110156102685761025582828151811061023d5761023d611690565b6020026020010151600061070a90919063ffffffff16565b5080610260816116bc565b91505061021f565b5060016102756000610728565b10156101fa5760405162461bcd60e51b81526004016101e890611708565b60008083516001600160401b038111156102af576102af611085565b6040519080825280602002602001820160405280156102d8578160200160208202803683370190505b50905060005b8451811015610337578481815181106102f9576102f9611690565b60200260200101518051906020012082828151811061031a5761031a611690565b60209081029190910101528061032f816116bc565b9150506102de565b506000600080516020611e1683398151915260001b878760405160200161035e919061174f565b6040516020818303038152906040528051906020012084604051602001610385919061179e565b60405160208183030381529060405280519060200120876040516020016103b09594939291906117aa565b6040516020818303038152906040528051906020012090507f0000000000000000000000000000000000000000000000000000000000000000816040516020016103fb9291906117fc565b6040516020818303038152906040528051906020012092505050949350505050565b33301461043c5760405162461bcd60e51b81526004016101e890611680565b6040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015610472573d6000803e3d6000fd5b505050565b3330146104965760405162461bcd60e51b81526004016101e890611680565b6104726001600160a01b0384168383610732565b6104b5600033610788565b6104d15760405162461bcd60e51b81526004016101e890611856565b6104de858585858561079d565b6104fa5760405162461bcd60e51b81526004016101e89061188f565b60005b84518110156105675761055484828151811061051b5761051b611690565b602002602001015186838151811061053557610535611690565b60200260200101516001600160a01b031661098590919063ffffffff16565b508061055f816116bc565b9150506104fd565b5060008581526002602052604090819020805460ff191660011790555185907ff7895055d9d9195b192e92072edf0f7084d4615ce19bf37fa823b1980b283bd6906105b59087908790611969565b60405180910390a25050505050565b606060006105d26000610728565b9050806001600160401b038111156105ec576105ec611085565b604051908082528060200260200182016040528015610615578160200160208202803683370190505b50915060005b8181101561066a5761062e6000826109c7565b83828151811061064057610640611690565b6001600160a01b039092166020928302919091019091015280610662816116bc565b91505061061b565b505090565b60005b81518110156107065760006001600160a01b031682828151811061069857610698611690565b60200260200101516001600160a01b0316036106c65760405162461bcd60e51b81526004016101e8906119c2565b6106f38282815181106106db576106db611690565b602002602001015160006109d390919063ffffffff16565b50806106fe816116bc565b915050610672565b5050565b600061071f836001600160a01b0384166109e8565b90505b92915050565b6000610722825490565b6104728363a9059cbb60e01b84846040516024016107519291906119d2565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610adb565b600061071f836001600160a01b038416610b6a565b600085815260026020819052604082205460ff16156107ce5760405162461bcd60e51b81526004016101e890611a12565b80835110156107ef5760405162461bcd60e51b81526004016101e890611a4b565b84518651146108105760405162461bcd60e51b81526004016101e890611a8c565b82518451146108315760405162461bcd60e51b81526004016101e890611a8c565b600083516001600160401b0381111561084c5761084c611085565b604051908082528060200260200182016040528015610875578160200160208202803683370190505b50905060005b845181101561094f574286828151811061089757610897611690565b602002602001015110156108bd5760405162461bcd60e51b81526004016101e890611aba565b60006108e48a8a8a8a86815181106108d7576108d7611690565b6020026020010151610293565b90506109128683815181106108fb576108fb611690565b602002602001015182610b8290919063ffffffff16565b83838151811061092457610924611690565b6001600160a01b03909216602092830291909101909101525080610947816116bc565b91505061087b565b5061095981610ba6565b6109755760405162461bcd60e51b81526004016101e890611af0565b6001925050505b95945050505050565b606061071f83836040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c65640000815250610c96565b600061071f8383610caf565b600061071f836001600160a01b038416610cd9565b60008181526001830160205260408120548015610ad1576000610a0c600183611b00565b8554909150600090610a2090600190611b00565b9050818114610a85576000866000018281548110610a4057610a40611690565b9060005260206000200154905080876000018481548110610a6357610a63611690565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610a9657610a96611b13565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610722565b6000915050610722565b6000610b30826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610c969092919063ffffffff16565b8051909150156104725780806020019051810190610b4e9190611b3c565b6104725760405162461bcd60e51b81526004016101e890611ba7565b60009081526001919091016020526040902054151590565b6000806000610b918585610d23565b91509150610b9e81610d91565b509392505050565b6000610bb26000610728565b82511115610bc257506000919050565b60005b8251811015610c8d57610bfb838281518110610be357610be3611690565b6020026020010151600061078890919063ffffffff16565b610c085750600092915050565b60005b81811015610c7a57838181518110610c2557610c25611690565b60200260200101516001600160a01b0316848381518110610c4857610c48611690565b60200260200101516001600160a01b031603610c68575060009392505050565b80610c72816116bc565b915050610c0b565b5080610c85816116bc565b915050610bc5565b50600192915050565b6060610ca58484600085610e71565b90505b9392505050565b6000826000018281548110610cc657610cc6611690565b9060005260206000200154905092915050565b6000610ce58383610b6a565b610d1b57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610722565b506000610722565b6000808251604103610d595760208301516040840151606085015160001a610d4d87828585610f33565b94509450505050610d8a565b8251604003610d825760208301516040840151610d77868383611009565b935093505050610d8a565b506000905060025b9250929050565b6000816004811115610da557610da5611bb7565b03610dad5750565b6001816004811115610dc157610dc1611bb7565b03610dde5760405162461bcd60e51b81526004016101e890611bfc565b6002816004811115610df257610df2611bb7565b03610e0f5760405162461bcd60e51b81526004016101e890611c40565b6003816004811115610e2357610e23611bb7565b03610e405760405162461bcd60e51b81526004016101e890611c8f565b6004816004811115610e5457610e54611bb7565b036101fa5760405162461bcd60e51b81526004016101e890611cde565b606082471015610e935760405162461bcd60e51b81526004016101e890611d31565b6001600160a01b0385163b610eba5760405162461bcd60e51b81526004016101e890611d75565b600080866001600160a01b03168587604051610ed69190611da7565b60006040518083038185875af1925050503d8060008114610f13576040519150601f19603f3d011682016040523d82523d6000602084013e610f18565b606091505b5091509150610f28828286611042565b979650505050505050565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b03831115610f605750600090506003611000565b8460ff16601b14158015610f7857508460ff16601c14155b15610f895750600090506004611000565b600060018787878760405160008152602001604052604051610fae9493929190611dbc565b6020604051602081039080840390855afa158015610fd0573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610ff957600060019250925050611000565b9150600090505b94509492505050565b6000806001600160ff1b0383168161102660ff86901c601b611df1565b905061103487828885610f33565b935093505050935093915050565b60608315611051575081610ca8565b8251156110615782518084602001fd5b8160405162461bcd60e51b81526004016101e89190611e04565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b6110a48261107b565b81018181106001600160401b03821117156110c1576110c1611085565b6040525050565b60006110d360405190565b90506110df828261109b565b919050565b60006001600160401b038211156110fd576110fd611085565b5060209081020190565b60006001600160a01b038216610722565b61112181611107565b81146101fa57600080fd5b803561072281611118565b600061114a611145846110e4565b6110c8565b8381529050602080820190840283018581111561116957611169600080fd5b835b8181101561118d578061117e888261112c565b8452506020928301920161116b565b5050509392505050565b600082601f8301126111ab576111ab600080fd5b81356111bb848260208601611137565b949350505050565b6000602082840312156111d8576111d8600080fd5b81356001600160401b038111156111f1576111f1600080fd5b6111bb84828501611197565b805b82525050565b6020810161072282846111fd565b80611121565b803561072281611213565b60006001600160401b0382111561123d5761123d611085565b6112468261107b565b60200192915050565b82818337506000910152565b600061126961114584611224565b90508281526020810184848401111561128457611284600080fd5b610b9e84828561124f565b600082601f8301126112a3576112a3600080fd5b81356111bb84826020860161125b565b60006112c1611145846110e4565b838152905060208082019084028301858111156112e0576112e0600080fd5b835b8181101561118d5780356001600160401b0381111561130357611303600080fd5b808601611310898261128f565b85525050602092830192016112e2565b600082601f83011261133457611334600080fd5b81356111bb8482602086016112b3565b6000806000806080858703121561135d5761135d600080fd5b60006113698787611219565b94505060208501356001600160401b0381111561138857611388600080fd5b61139487828801611197565b93505060408501356001600160401b038111156113b3576113b3600080fd5b6113bf87828801611320565b92505060606113d087828801611219565b91505092959194509250565b600080604083850312156113f2576113f2600080fd5b60006113fe858561112c565b925050602061140f85828601611219565b9150509250929050565b600061072282611107565b61112181611419565b803561072281611424565b60008060006060848603121561145057611450600080fd5b600061145c868661142d565b935050602061146d8682870161112c565b925050604061147e86828701611219565b9150509250925092565b6000611496611145846110e4565b838152905060208082019084028301858111156114b5576114b5600080fd5b835b8181101561118d57806114ca8882611219565b845250602092830192016114b7565b600082601f8301126114ed576114ed600080fd5b81356111bb848260208601611488565b600080600080600060a0868803121561151857611518600080fd5b60006115248888611219565b95505060208601356001600160401b0381111561154357611543600080fd5b61154f88828901611197565b94505060408601356001600160401b0381111561156e5761156e600080fd5b61157a88828901611320565b93505060608601356001600160401b0381111561159957611599600080fd5b6115a5888289016114d9565b92505060808601356001600160401b038111156115c4576115c4600080fd5b6115d088828901611320565b9150509295509295909350565b6111ff81611107565b60006115f283836115dd565b505060200190565b6000611604825190565b80845260209384019383018060005b8381101561163857815161162788826115e6565b975060208301925050600101611613565b509495945050505050565b6020808252810161071f81846115fa565b60128152600060208201711b9bdd081bdddb995c8818dbdb9d1c9858dd60721b815291505b5060200190565b6020808252810161072281611654565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982036116cf576116cf6116a6565b5060010190565b60208082527f636f6e7472616374206174206c65617374206e656564206f6e65206f776e657291019081526000611679565b60208082528101610722816116d6565b6000611722825190565b602083018060005b8381101561163857815161173e88826115e6565b97506020830192505060010161172a565b6000610ca88284611718565b60006115f283836111fd565b6000611771825190565b602083018060005b8381101561163857815161178d888261175b565b975060208301925050600101611779565b6000610ca88284611767565b60a081016117b882886111fd565b6117c560208301876111fd565b6117d260408301866111fd565b6117df60608301856111fd565b6117ec60808301846111fd565b9695505050505050565b806111ff565b61190160f01b8152600201600061181382856117f6565b60208201915061182382846117f6565b5060200192915050565b601281526000602082017131b0b63632b91034b9b713ba1037bbb732b960711b81529150611679565b602080825281016107228161182d565b6012815260006020820171696e76616c6964207369676e61747572657360701b81529150611679565b6020808252810161072281611866565b60005b838110156118ba5781810151838201526020016118a2565b50506000910152565b60006118cd825190565b8084526020840193506118e481856020860161189f565b6118ed8161107b565b9093019392505050565b600061071f83836118c3565b600061190d825190565b808452602084019350836020820285016119278560200190565b8060005b8581101561195c578484038952815161194485826118f7565b94506020830160209a909a019992505060010161192b565b5091979650505050505050565b6040808252810161197a81856115fa565b90508181036020830152610ca58184611903565b601e81526000602082017f496e76616c6964206f776e657220616464726573732070726f7669646564000081529150611679565b602080825281016107228161198e565b604081016119e082856115dd565b610ca860208301846111fd565b600e81526000602082016d1d1e081a5cc8195e1958dd5d195960921b81529150611679565b60208082528101610722816119ed565b60128152600060208201710e6d2ce40dceada40dcdee840cadcdeeaced60731b81529150611679565b6020808252810161072281611a22565b601a8152600060208201790929c869e9ca692a6a88a9ca8bea082a4829aa6be988a9c8ea8960331b81529150611679565b6020808252810161072281611a5b565b6007815260006020820166195e1c1a5c995960ca1b81529150611679565b6020808252810161072281611a9c565b600f81526000602082016e64697374696e6374206f776e65727360881b81529150611679565b6020808252810161072281611aca565b81810381811115610722576107226116a6565b634e487b7160e01b600052603160045260246000fd5b801515611121565b805161072281611b29565b600060208284031215611b5157611b51600080fd5b60006111bb8484611b31565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b602082015291505b5060400190565b6020808252810161072281611b5d565b634e487b7160e01b600052602160045260246000fd5b601881526000602082017745434453413a20696e76616c6964207369676e617475726560401b81529150611679565b6020808252810161072281611bcd565b601f81526000602082017f45434453413a20696e76616c6964207369676e6174757265206c656e6774680081529150611679565b6020808252810161072281611c0c565b602281526000602082017f45434453413a20696e76616c6964207369676e6174757265202773272076616c815261756560f01b60208201529150611ba0565b6020808252810161072281611c50565b602281526000602082017f45434453413a20696e76616c6964207369676e6174757265202776272076616c815261756560f01b60208201529150611ba0565b6020808252810161072281611c9f565b602681526000602082017f416464726573733a20696e73756666696369656e742062616c616e636520666f8152651c8818d85b1b60d21b60208201529150611ba0565b6020808252810161072281611cee565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150611679565b6020808252810161072281611d41565b6000611d8f825190565b611d9d81856020860161189f565b9290920192915050565b6000610ca88284611d85565b60ff81166111ff565b60808101611dca82876111fd565b611dd76020830186611db3565b611de460408301856111fd565b61097c60608301846111fd565b80820180821115610722576107226116a6565b6020808252810161071f81846118c356feea2b786765a2a3866619afc64bfb36f8668e4c2afac960ba57000f6a29c79d60a26469706673582212200be8bd7849a9e205331675b46898fe70377b096a5003ce9af81e8746f490d35364736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addOwner(address[])": {
        "params": {
          "owners": "array of addresses to be added"
        }
      },
      "constructor": {
        "params": {
          "owners_": "Add contract owner"
        }
      },
      "execute(uint256,address[],bytes[],uint256[],bytes[])": {
        "params": {
          "datas": "The method called by the corresponding contract and the abi-encoded array of its parameters",
          "deadlines": "array of valid times for signature",
          "id": "Event ID for signature",
          "sigs": "Array of signatures for multiple transactions",
          "targets": "Array of contract addresses to be called"
        }
      },
      "getOwners()": {
        "returns": {
          "owners": "address array"
        }
      },
      "hashTypeData(uint256,address[],bytes[],uint256)": {
        "params": {
          "datas": "The method called by the corresponding contract and the abi-encoded array of its parameters",
          "deadline": "Valid time for signature",
          "id": "Event ID for signature",
          "targets": "Array of contract addresses to be called"
        },
        "returns": {
          "digest": "Data encrypted according to the EIP712 specification"
        }
      },
      "removeOwner(address[])": {
        "params": {
          "owners": "array of addresses to be removed"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Executed(uint256,address[],bytes[])": {
        "notice": "Emitted when execute task"
      }
    },
    "kind": "user",
    "methods": {
      "EXECUTE_TYPEHASH()": {
        "notice": "keccak256(\"Execute(uint256 id,address[] targets,bytes[] datas,uint256 deadline)\")"
      },
      "addOwner(address[])": {
        "notice": "Add contract owner"
      },
      "constructor": {
        "notice": "Initialize parameters"
      },
      "execute(uint256,address[],bytes[],uint256[],bytes[])": {
        "notice": "Execute multi-transaction signature"
      },
      "getOwners()": {
        "notice": "Get owner list"
      },
      "hashTypeData(uint256,address[],bytes[],uint256)": {
        "notice": "Encrypt data for multisig operation"
      },
      "removeOwner(address[])": {
        "notice": "Remove contract owner"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1834,
        "contract": "contracts/msig/PawnMultiSig.sol:MultiSig",
        "label": "_owners",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AddressSet)1518_storage"
      },
      {
        "astId": 1838,
        "contract": "contracts/msig/PawnMultiSig.sol:MultiSig",
        "label": "isExecuted",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(AddressSet)1518_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1517,
            "contract": "contracts/msig/PawnMultiSig.sol:MultiSig",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1217_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1217_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1212,
            "contract": "contracts/msig/PawnMultiSig.sol:MultiSig",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1216,
            "contract": "contracts/msig/PawnMultiSig.sol:MultiSig",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}