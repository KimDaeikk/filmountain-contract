{
  "address": "0xAb0Dd7da44a8223c4A2637E070e8dfA563AB0cD1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "allowedSigners",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidShortString",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "StringTooLong",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EIP712DomainChanged",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "forwarderAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "batchFlushERC1155ForwarderTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domainSeparatorV4",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "forwarderAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "flushERC1155ForwarderTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "forwarderAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "flushERC721ForwarderTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "forwarderAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenContractAddress",
          "type": "address"
        }
      ],
      "name": "flushForwarderTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNextSequenceId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "expireTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sequenceId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "sendMultiSig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "expireTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sequenceId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "sendMultiSigToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarderAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "autoFlush",
          "type": "bool"
        }
      ],
      "name": "setAutoFlush1155",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarderAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "autoFlush",
          "type": "bool"
        }
      ],
      "name": "setAutoFlush721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "signers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "operationHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "expireTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sequenceId",
          "type": "uint256"
        }
      ],
      "name": "verifyMultiSig",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "numDeployments": 21,
  "solcInputHash": "97d1907190480a78daba5c6cfe572f6a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"allowedSigners\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"forwarderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchFlushERC1155ForwarderTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparatorV4\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"forwarderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"flushERC1155ForwarderTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"forwarderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"flushERC721ForwarderTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"forwarderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"}],\"name\":\"flushForwarderTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextSequenceId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expireTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sequenceId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"sendMultiSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expireTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sequenceId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"sendMultiSigToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarderAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"autoFlush\",\"type\":\"bool\"}],\"name\":\"setAutoFlush1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarderAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"autoFlush\",\"type\":\"bool\"}],\"name\":\"setAutoFlush721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operationHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expireTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sequenceId\",\"type\":\"uint256\"}],\"name\":\"verifyMultiSig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"batchFlushERC1155ForwarderTokens(address,address,uint256[])\":{\"params\":{\"forwarderAddress\":\"the address of the forwarder address to flush the tokens from\",\"tokenContractAddress\":\"the address of the erc1155 token contract\"}},\"eip712Domain()\":{\"details\":\"See {EIP-5267}. _Available since v4.9._\"},\"flushERC1155ForwarderTokens(address,address,uint256)\":{\"params\":{\"forwarderAddress\":\"the address of the forwarder address to flush the tokens from\",\"tokenContractAddress\":\"the address of the erc1155 token contract\",\"tokenId\":\"the token id associated with the ERC1155\"}},\"flushERC721ForwarderTokens(address,address,uint256)\":{\"params\":{\"forwarderAddress\":\"the address of the forwarder address to flush the tokens from\",\"tokenContractAddress\":\"the address of the erc20 token contract\"}},\"flushForwarderTokens(address,address)\":{\"params\":{\"forwarderAddress\":\"the address of the forwarder address to flush the tokens from\",\"tokenContractAddress\":\"the address of the erc20 token contract\"}},\"sendMultiSigToken(address,uint256,address,uint256,uint256,bytes)\":{\"params\":{\"expireTime\":\"the number of seconds since 1970 for which this transaction is valid\",\"sequenceId\":\"the unique sequence id obtainable from getNextSequenceId\",\"signature\":\"see Data Formats\",\"toAddress\":\"the destination address to send an outgoing transaction\",\"tokenContractAddress\":\"the address of the erc20 token contract\",\"value\":\"the amount in tokens to be sent\"}},\"setAutoFlush1155(address,bool)\":{\"params\":{\"autoFlush\":\"whether to autoflush erc1155 tokens\",\"forwarderAddress\":\"the address of the forwarder to toggle.\"}},\"setAutoFlush721(address,bool)\":{\"params\":{\"autoFlush\":\"whether to autoflush erc721 tokens\",\"forwarderAddress\":\"the address of the forwarder to toggle.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchFlushERC1155ForwarderTokens(address,address,uint256[])\":{\"notice\":\"Execute a ERC1155 batch token flush from one of the forwarder addresses. This transfer needs only a single signature and can be done by any signer.\"},\"flushERC1155ForwarderTokens(address,address,uint256)\":{\"notice\":\"Execute a ERC1155 token flush from one of the forwarder addresses. This transfer needs only a single signature and can be done by any signer.\"},\"flushERC721ForwarderTokens(address,address,uint256)\":{\"notice\":\"Execute a ERC721 token flush from one of the forwarder addresses. This transfer needs only a single signature and can be done by any signer\"},\"flushForwarderTokens(address,address)\":{\"notice\":\"Execute a token flush from one of the forwarder addresses. This transfer needs only a single signature and can be done by any signer\"},\"getNextSequenceId()\":{\"notice\":\"Gets the next available sequence ID for signing when using executeAndConfirm returns the sequenceId one higher than the highest currently stored\"},\"sendMultiSigToken(address,uint256,address,uint256,uint256,bytes)\":{\"notice\":\"Execute a multi-signature token transfer from this wallet using 2 signers: one from msg.sender and the other from ecrecover. Sequence IDs are numbers starting from 1. They are used to prevent replay attacks and may not be repeated.\"},\"setAutoFlush1155(address,bool)\":{\"notice\":\"Sets the autoflush 721 parameter on the forwarder.\"},\"setAutoFlush721(address,bool)\":{\"notice\":\"Sets the autoflush 721 parameter on the forwarder.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/msig/WalletSimple.sol\":\"WalletSimple\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xac6c2efc64baccbde4904ae18ed45139c9aa8cff96d6888344d1e4d2eb8b659f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(_FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0e310c163edf15db45d4ff938113ab357f94fa86e61ea8e790853c4d2e13256\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../ShortStrings.sol\\\";\\nimport \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _name.toStringWithFallback(_nameFallback),\\n            _version.toStringWithFallback(_versionFallback),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x8432884527a7ad91e6eed1cfc5a0811ae2073e5bca107bd0ca442e9236b03dbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/msig/WalletSimple.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.20;\\nimport './utils/TransferHelper.sol';\\nimport './interfaces/IForwarder.sol';\\nimport \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n\\ncontract WalletSimple is EIP712 {\\n  event Deposited(address, uint256, bytes);\\n  // Public fields\\n  mapping(address => bool) public signers; // The addresses that can co-sign transactions on the wallet\\n\\n  // Internal fields\\n  uint256 private constant MAX_SEQUENCE_ID_INCREASE = 10000;\\n  uint256 constant SEQUENCE_ID_WINDOW_SIZE = 10;\\n  uint256[SEQUENCE_ID_WINDOW_SIZE] recentSequenceIds;\\n\\n  // EIP-712 related constants\\n  string constant SEND_MULTI_SIG_TYPEHASH = \\\"SendMultiSig(address toAddress,uint256 value,bytes data,uint256 expireTime,uint256 sequenceId)\\\";\\n  bytes32 constant SEND_MULTI_SIG_TYPEHASH_HASH = keccak256(abi.encodePacked(SEND_MULTI_SIG_TYPEHASH));\\n\\n  string constant BATCH_TYPEHASH = \\\"BatchTransfer(address[] recipients,uint256[] values,uint256 expireTime,uint256 sequenceId)\\\";\\n  bytes32 constant BATCH_TYPEHASH_HASH = keccak256(abi.encodePacked(BATCH_TYPEHASH));\\n\\n  string constant TOKEN_TRANSFER_TYPEHASH = \\\"TokenTransfer(address toAddress,uint256 value,address tokenContractAddress,uint256 expireTime,uint256 sequenceId)\\\";\\n  bytes32 constant TOKEN_TRANSFER_TYPEHASH_HASH = keccak256(abi.encodePacked(TOKEN_TRANSFER_TYPEHASH));\\n\\n  constructor(address[] memory allowedSigners) EIP712(\\\"WalletSimple\\\", \\\"1\\\") {\\n    require(allowedSigners.length == 4, 'Invalid number of signers');\\n\\n    for (uint8 i = 0; i < allowedSigners.length; i++) {\\n      require(allowedSigners[i] != address(0), 'Invalid signer');\\n      signers[allowedSigners[i]] = true;\\n    }\\n  }\\n\\n  function getNetworkId() internal view virtual returns (string memory) {\\n    return Strings.toString(block.chainid);\\n  }\\n\\n  modifier onlySigner() {\\n    require(signers[msg.sender], 'Non-signer in onlySigner method');\\n    _;\\n  }\\n\\n  fallback() external payable {\\n    if (msg.value > 0) {\\n      // Fire deposited event if we are receiving funds\\n      emit Deposited(msg.sender, msg.value, msg.data);\\n    }\\n  }\\n\\n  receive() external payable {\\n    if (msg.value > 0) {\\n      // Fire deposited event if we are receiving funds\\n      // message data is always empty for receive. If there is data it is sent to fallback function.\\n      emit Deposited(msg.sender, msg.value, '');\\n    }\\n  }\\n\\n  function sendMultiSig(\\n    address toAddress,\\n    uint256 value,\\n    bytes calldata data,\\n    uint256 expireTime,\\n    uint256 sequenceId,\\n    bytes calldata signature\\n  ) external onlySigner {\\n    bytes32 structHash = keccak256(abi.encode(\\n        SEND_MULTI_SIG_TYPEHASH_HASH,\\n        toAddress,\\n        value,\\n        keccak256(data),\\n        expireTime,\\n        sequenceId\\n    ));\\n\\n    bytes32 hash = _hashTypedDataV4(structHash);\\n    address signer = verifyMultiSig(hash, signature, expireTime, sequenceId);\\n\\n    // require(signer != msg.sender, \\\"Signers cannot be equal\\\");\\n\\n    // (bool success, ) = toAddress.call{value: value}(data);\\n    // require(success, \\\"Call execution failed\\\");\\n}\\n\\n  /**\\n   * Transfer funds in a batch to each of recipients\\n   * @param recipients The list of recipients to send to\\n   * @param values The list of values to send to recipients.\\n   *  The recipient with index i in recipients array will be sent values[i].\\n   *  Thus, recipients and values must be the same length\\n   */\\n  function batchTransfer(\\n    address[] calldata recipients,\\n    uint256[] calldata values\\n  ) private {\\n    for (uint256 i = 0; i < recipients.length; i++) {\\n      require(address(this).balance >= values[i], 'Insufficient funds');\\n\\n      (bool success, ) = recipients[i].call{ value: values[i] }('');\\n      require(success, 'Call failed');\\n    }\\n  }\\n\\n  /**\\n   * Execute a multi-signature token transfer from this wallet using 2 signers: one from msg.sender and the other from ecrecover.\\n   * Sequence IDs are numbers starting from 1. They are used to prevent replay attacks and may not be repeated.\\n   *\\n   * @param toAddress the destination address to send an outgoing transaction\\n   * @param value the amount in tokens to be sent\\n   * @param tokenContractAddress the address of the erc20 token contract\\n   * @param expireTime the number of seconds since 1970 for which this transaction is valid\\n   * @param sequenceId the unique sequence id obtainable from getNextSequenceId\\n   * @param signature see Data Formats\\n   */\\n  function sendMultiSigToken(\\n    address toAddress,\\n    uint256 value,\\n    address tokenContractAddress,\\n    uint256 expireTime,\\n    uint256 sequenceId,\\n    bytes calldata signature\\n  ) external onlySigner {\\n      bytes32 operationHash = _hashTypedDataV4(keccak256(abi.encode(\\n          TOKEN_TRANSFER_TYPEHASH_HASH,\\n          toAddress,\\n          value,\\n          tokenContractAddress,\\n          expireTime,\\n          sequenceId\\n      )));\\n      verifyMultiSig(operationHash, signature, expireTime, sequenceId);\\n      TransferHelper.safeTransfer(tokenContractAddress, toAddress, value);\\n  }\\n\\n  /**\\n   * Execute a token flush from one of the forwarder addresses. This transfer needs only a single signature and can be done by any signer\\n   *\\n   * @param forwarderAddress the address of the forwarder address to flush the tokens from\\n   * @param tokenContractAddress the address of the erc20 token contract\\n   */\\n  function flushForwarderTokens(\\n    address payable forwarderAddress,\\n    address tokenContractAddress\\n  ) external onlySigner {\\n    IForwarder forwarder = IForwarder(forwarderAddress);\\n    forwarder.flushTokens(tokenContractAddress);\\n  }\\n\\n  /**\\n   * Execute a ERC721 token flush from one of the forwarder addresses. This transfer needs only a single signature and can be done by any signer\\n   *\\n   * @param forwarderAddress the address of the forwarder address to flush the tokens from\\n   * @param tokenContractAddress the address of the erc20 token contract\\n   */\\n  function flushERC721ForwarderTokens(\\n    address payable forwarderAddress,\\n    address tokenContractAddress,\\n    uint256 tokenId\\n  ) external onlySigner {\\n    IForwarder forwarder = IForwarder(forwarderAddress);\\n    forwarder.flushERC721Token(tokenContractAddress, tokenId);\\n  }\\n\\n  /**\\n   * Execute a ERC1155 batch token flush from one of the forwarder addresses.\\n   * This transfer needs only a single signature and can be done by any signer.\\n   *\\n   * @param forwarderAddress the address of the forwarder address to flush the tokens from\\n   * @param tokenContractAddress the address of the erc1155 token contract\\n   */\\n  function batchFlushERC1155ForwarderTokens(\\n    address payable forwarderAddress,\\n    address tokenContractAddress,\\n    uint256[] calldata tokenIds\\n  ) external onlySigner {\\n    IForwarder forwarder = IForwarder(forwarderAddress);\\n    forwarder.batchFlushERC1155Tokens(tokenContractAddress, tokenIds);\\n  }\\n\\n  /**\\n   * Execute a ERC1155 token flush from one of the forwarder addresses.\\n   * This transfer needs only a single signature and can be done by any signer.\\n   *\\n   * @param forwarderAddress the address of the forwarder address to flush the tokens from\\n   * @param tokenContractAddress the address of the erc1155 token contract\\n   * @param tokenId the token id associated with the ERC1155\\n   */\\n  function flushERC1155ForwarderTokens(\\n    address payable forwarderAddress,\\n    address tokenContractAddress,\\n    uint256 tokenId\\n  ) external onlySigner {\\n    IForwarder forwarder = IForwarder(forwarderAddress);\\n    forwarder.flushERC1155Tokens(tokenContractAddress, tokenId);\\n  }\\n\\n  /**\\n   * Sets the autoflush 721 parameter on the forwarder.\\n   *\\n   * @param forwarderAddress the address of the forwarder to toggle.\\n   * @param autoFlush whether to autoflush erc721 tokens\\n   */\\n  function setAutoFlush721(address forwarderAddress, bool autoFlush)\\n    external\\n    onlySigner\\n  {\\n    IForwarder forwarder = IForwarder(forwarderAddress);\\n    forwarder.setAutoFlush721(autoFlush);\\n  }\\n\\n  /**\\n   * Sets the autoflush 721 parameter on the forwarder.\\n   *\\n   * @param forwarderAddress the address of the forwarder to toggle.\\n   * @param autoFlush whether to autoflush erc1155 tokens\\n   */\\n  function setAutoFlush1155(address forwarderAddress, bool autoFlush)\\n    external\\n    onlySigner\\n  {\\n    IForwarder forwarder = IForwarder(forwarderAddress);\\n    forwarder.setAutoFlush1155(autoFlush);\\n  }\\n\\n  function verifyMultiSig(\\n    bytes32 operationHash,\\n    bytes calldata signature,\\n    uint256 expireTime,\\n    uint256 sequenceId\\n  ) public returns (address) {\\n    address otherSigner = ECDSA.recover(operationHash, signature);\\n\\n    require(expireTime >= block.timestamp, 'Transaction expired');\\n    tryInsertSequenceId(sequenceId);\\n    require(signers[otherSigner], 'Invalid signer');\\n    require(otherSigner != msg.sender, 'Signers cannot be equal');\\n\\n    return otherSigner;\\n  }\\n\\n  function domainSeparatorV4() public view returns (bytes32) {\\n    return _domainSeparatorV4();\\n  }\\n\\n  /**\\n   * Verify that the sequence id has not been used before and inserts it. Throws if the sequence ID was not accepted.\\n   * We collect a window of up to 10 recent sequence ids, and allow any sequence id that is not in the window and\\n   * greater than the minimum element in the window.\\n   * @param sequenceId to insert into array of stored ids\\n   */\\n  function tryInsertSequenceId(uint256 sequenceId) private {\\n    // Keep a pointer to the lowest value element in the window\\n    uint256 lowestValueIndex = 0;\\n    // fetch recentSequenceIds into memory for function context to avoid unnecessary sloads\\n\\n    uint256[SEQUENCE_ID_WINDOW_SIZE]\\n      memory _recentSequenceIds = recentSequenceIds;\\n    for (uint256 i = 0; i < SEQUENCE_ID_WINDOW_SIZE; i++) {\\n      require(_recentSequenceIds[i] != sequenceId, 'Sequence ID already used');\\n\\n      if (_recentSequenceIds[i] < _recentSequenceIds[lowestValueIndex]) {\\n        lowestValueIndex = i;\\n      }\\n    }\\n\\n    // The sequence ID being used is lower than the lowest value in the window\\n    // so we cannot accept it as it may have been used before\\n    require(\\n      sequenceId > _recentSequenceIds[lowestValueIndex],\\n      'Sequence ID below window'\\n    );\\n\\n    // Block sequence IDs which are much higher than the lowest value\\n    // This prevents people blocking the contract by using very large sequence IDs quickly\\n    require(\\n      sequenceId <=\\n        (_recentSequenceIds[lowestValueIndex] + MAX_SEQUENCE_ID_INCREASE),\\n      'Sequence ID above maximum'\\n    );\\n\\n    recentSequenceIds[lowestValueIndex] = sequenceId;\\n  }\\n\\n  /**\\n   * Gets the next available sequence ID for signing when using executeAndConfirm\\n   * returns the sequenceId one higher than the highest currently stored\\n   */\\n  function getNextSequenceId() external view returns (uint256) {\\n    uint256 highestSequenceId = 0;\\n    for (uint256 i = 0; i < SEQUENCE_ID_WINDOW_SIZE; i++) {\\n      if (recentSequenceIds[i] > highestSequenceId) {\\n        highestSequenceId = recentSequenceIds[i];\\n      }\\n    }\\n    return highestSequenceId + 1;\\n  }\\n}\",\"keccak256\":\"0x64d2b71fe3e37913d3b0d15ae2aef54b4b6ba45bac9ed191312dce6f7ec3a492\",\"license\":\"Apache-2.0\"},\"contracts/msig/interfaces/IForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.20;\\n\\nimport '@openzeppelin/contracts/utils/introspection/IERC165.sol';\\n\\ninterface IForwarder is IERC165 {\\n  /**\\n   * Sets the autoflush721 parameter.\\n   *\\n   * @param autoFlush whether to autoflush erc721 tokens\\n   */\\n  function setAutoFlush721(bool autoFlush) external;\\n\\n  /**\\n   * Sets the autoflush1155 parameter.\\n   *\\n   * @param autoFlush whether to autoflush erc1155 tokens\\n   */\\n  function setAutoFlush1155(bool autoFlush) external;\\n\\n  /**\\n   * Execute a token transfer of the full balance from the forwarder to the parent address\\n   *\\n   * @param tokenContractAddress the address of the erc20 token contract\\n   */\\n  function flushTokens(address tokenContractAddress) external;\\n\\n  /**\\n   * Execute a nft transfer from the forwarder to the parent address\\n   *\\n   * @param tokenContractAddress the address of the ERC721 NFT contract\\n   * @param tokenId The token id of the nft\\n   */\\n  function flushERC721Token(address tokenContractAddress, uint256 tokenId)\\n    external;\\n\\n  /**\\n   * Execute a nft transfer from the forwarder to the parent address.\\n   *\\n   * @param tokenContractAddress the address of the ERC1155 NFT contract\\n   * @param tokenId The token id of the nft\\n   */\\n  function flushERC1155Tokens(address tokenContractAddress, uint256 tokenId)\\n    external;\\n\\n  /**\\n   * Execute a batch nft transfer from the forwarder to the parent address.\\n   *\\n   * @param tokenContractAddress the address of the ERC1155 NFT contract\\n   * @param tokenIds The token ids of the nfts\\n   */\\n  function batchFlushERC1155Tokens(\\n    address tokenContractAddress,\\n    uint256[] calldata tokenIds\\n  ) external;\\n}\",\"keccak256\":\"0xacbe489859a2e8fce7f50fc85ad53ef0c06724a497d633deb82222799d541fd1\",\"license\":\"Apache-2.0\"},\"contracts/msig/utils/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// source: https://github.com/Uniswap/solidity-lib/blob/master/contracts/libraries/TransferHelper.sol\\npragma solidity 0.8.20;\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n  function safeTransfer(\\n    address token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n    (bool success, bytes memory data) = token.call(\\n      abi.encodeWithSelector(0xa9059cbb, to, value)\\n    );\\n    require(\\n      success && (data.length == 0 || abi.decode(data, (bool))),\\n      'TransferHelper::safeTransfer: transfer failed'\\n    );\\n  }\\n\\n  function safeTransferFrom(\\n    address token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n    (bool success, bytes memory returndata) = token.call(\\n      abi.encodeWithSelector(0x23b872dd, from, to, value)\\n    );\\n    Address.verifyCallResult(success, returndata, \\\"TransferHelper: safeTransferFrom call failed\\\");\\n  }\\n}\",\"keccak256\":\"0x9e7d9c1b582835654b2ffe178881d08819b3d508696ec37f1573ce58ca7d0ec2\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200254b3803806200254b833981016040819052620000359162000405565b604080518082018252600c81526b57616c6c657453696d706c6560a01b602080830191909152825180840190935260018352603160f81b90830152906200007e826000620001c0565b610120526200008f816001620001c0565b61014052815160208084019190912060e052815190820120610100524660a052620000b9620001f9565b60805250503060c0528051600414620000ef5760405162461bcd60e51b8152600401620000e6906200047c565b60405180910390fd5b60005b81518160ff161015620001b85760006001600160a01b0316828260ff16815181106200012257620001226200048e565b60200260200101516001600160a01b031603620001535760405162461bcd60e51b8152600401620000e690620004ca565b600160026000848460ff16815181106200017157620001716200048e565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580620001af81620004f2565b915050620000f2565b505062000835565b6000602083511015620001e057620001d88362000255565b9050620001f3565b81620001ed848262000635565b5060ff90505b92915050565b60e051610100516040516000926200023a927f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f924690309060200162000717565b60405160208183030381529060405280519060200120905090565b600080829050601f8151111562000283578260405163305a27a960e01b8152600401620000e69190620007cc565b80516200029082620007f1565b179392505050565b90565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b620002c6826200029b565b81018181106001600160401b0382111715620002e657620002e6620002a5565b6040525050565b6000620002f960405190565b9050620003078282620002bb565b919050565b60006001600160401b03821115620003285762000328620002a5565b5060209081020190565b60006001600160a01b038216620001f3565b6200034f8162000332565b81146200035b57600080fd5b50565b8051620001f38162000344565b6000620003826200037c846200030c565b620002ed565b83815290506020808201908402830185811115620003a357620003a3600080fd5b835b81811015620003cb5780620003bb88826200035e565b84525060209283019201620003a5565b5050509392505050565b600082601f830112620003eb57620003eb600080fd5b8151620003fd8482602086016200036b565b949350505050565b6000602082840312156200041c576200041c600080fd5b81516001600160401b03811115620004375762000437600080fd5b620003fd84828501620003d5565b601981526000602082017f496e76616c6964206e756d626572206f66207369676e65727300000000000000815291505b5060200190565b60208082528101620001f38162000445565b634e487b7160e01b600052603260045260246000fd5b600e81526000602082016d24b73b30b634b21039b4b3b732b960911b8152915062000475565b60208082528101620001f381620004a4565b634e487b7160e01b600052601160045260246000fd5b60ff16600060fe1982016200050b576200050b620004dc565b5060010190565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806200053d57607f821691505b60208210810362000552576200055262000512565b50919050565b6000620001f3620002988381565b620005718362000558565b815460001960089490940293841b1916921b91909117905550565b60006200059b81848462000566565b505050565b81811015620005bf57620005b66000826200058c565b600101620005a0565b5050565b601f8211156200059b576000818152602090206020601f85010481016020851015620005ec5750805b620006006020601f860104830182620005a0565b5050505050565b6000196008929092029190911c191690565b600062000627838362000607565b600290930290921792915050565b81516001600160401b03811115620006515762000651620002a5565b6200065d825462000528565b6200066a828285620005c3565b6020601f8311600181146200069d5760008415620006885750858201515b62000694858262000619565b865550620006fc565b600085815260208120601f198616915b82811015620006cf5788850151825560209485019460019092019101620006ad565b86831015620006ef5784890151620006eb601f89168262000607565b8355505b6001600288020188555050505b505050505050565b805b82525050565b620007068162000332565b60a0810162000727828862000704565b62000736602083018762000704565b62000745604083018662000704565b62000754606083018562000704565b6200076360808301846200070c565b9695505050505050565b60005b838110156200078a57818101518382015260200162000770565b50506000910152565b60006200079e825190565b808452602084019350620007b78185602086016200076d565b620007c2816200029b565b9093019392505050565b60208082528101620007df818462000793565b9392505050565b6000620001f3825190565b6000620007fc825190565b602083016200080b81620007e6565b925060208210156200082e5762000829600019836020036008021b90565b831692505b5050919050565b60805160a05160c05160e051610100516101205161014051611cbb6200089060003960006107690152600061073f01526000610d4d01526000610d2c01526000610a6501526000610a8f01526000610ab90152611cbb6000f3fe6080604052600436106100a65760003560e01c80630dcd7a6c146101055780632da034091461012557806334f940471461014557806339125215146101655780635a953d0a14610185578063736c0d5b146101a557806378e890ba146101eb578063813565b81461020d57806384b0196e1461023a5780639246777614610262578063a0b7967b14610282578063c137878414610297578063e6bd0aa4146102b7576100db565b366100db5734156100d957600080516020611c6683398151915233346040516100d0929190610fce565b60405180910390a15b005b34156100d957600080516020611c6683398151915233346000366040516100d09493929190611041565b34801561011157600080fd5b506100d96101203660046110f3565b6102d7565b34801561013157600080fd5b506100d961014036600461119d565b6103ad565b34801561015157600080fd5b506100d9610160366004611224565b610441565b34801561017157600080fd5b506100d9610180366004611291565b6104db565b34801561019157600080fd5b506100d96101a0366004611359565b6105bb565b3480156101b157600080fd5b506101d56101c03660046113a9565b60026020526000908152604090205460ff1681565b6040516101e291906113d2565b60405180910390f35b3480156101f757600080fd5b50610200610648565b6040516101e291906113e0565b34801561021957600080fd5b5061022d6102283660046113ee565b610657565b6040516101e29190611471565b34801561024657600080fd5b5061024f610731565b6040516101e2979695949392919061153a565b34801561026e57600080fd5b506100d961027d3660046115c9565b6107b9565b34801561028e57600080fd5b50610200610816565b3480156102a357600080fd5b506100d96102b23660046115c9565b61087c565b3480156102c357600080fd5b506100d96102d2366004611359565b6108d9565b3360009081526002602052604090205460ff1661030f5760405162461bcd60e51b815260040161030690611633565b60405180910390fd5b60006103886040518060a0016040528060718152602001611bf56071913960405160200161033d9190611665565b60405160208183030381529060405280519060200120898989898960405160200161036d96959493929190611678565b60405160208183030381529060405280519060200120610938565b90506103978184848888610657565b506103a386898961096b565b5050505050505050565b3360009081526002602052604090205460ff166103dc5760405162461bcd60e51b815260040161030690611633565b604051633ef1336760e01b815282906001600160a01b03821690633ef133679061040a908590600401611471565b600060405180830381600087803b15801561042457600080fd5b505af1158015610438573d6000803e3d6000fd5b50505050505050565b3360009081526002602052604090205460ff166104705760405162461bcd60e51b815260040161030690611633565b6040516331a8b74960e21b815284906001600160a01b0382169063c6a2dd24906104a290879087908790600401611714565b600060405180830381600087803b1580156104bc57600080fd5b505af11580156104d0573d6000803e3d6000fd5b505050505050505050565b3360009081526002602052604090205460ff1661050a5760405162461bcd60e51b815260040161030690611633565b60006040518060800160405280605e8152602001611b97605e91396040516020016105359190611665565b604051602081830303815290604052805190602001208989898960405161055d929190611742565b604051908190038120610579949392918a908a9060200161174f565b604051602081830303815290604052805190602001209050600061059c82610938565b905060006105ad8286868a8a610657565b505050505050505050505050565b3360009081526002602052604090205460ff166105ea5760405162461bcd60e51b815260040161030690611633565b60405163159e44d760e01b815283906001600160a01b0382169063159e44d79061061a9086908690600401611784565b600060405180830381600087803b15801561063457600080fd5b505af11580156103a3573d6000803e3d6000fd5b6000610652610a58565b905090565b60008061069a8787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ae392505050565b9050428410156106bc5760405162461bcd60e51b8152600401610306906117c9565b6106c583610b07565b6001600160a01b03811660009081526002602052604090205460ff166106fd5760405162461bcd60e51b8152600401610306906117fe565b336001600160a01b038216036107255760405162461bcd60e51b81526004016103069061183c565b90505b95945050505050565b6000606080828080836107647f000000000000000000000000000000000000000000000000000000000000000083610c5c565b61078f7f00000000000000000000000000000000000000000000000000000000000000006001610c5c565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b3360009081526002602052604090205460ff166107e85760405162461bcd60e51b815260040161030690611633565b60405163456600df60e11b815282906001600160a01b03821690638acc01be9061040a9085906004016113d2565b600080805b600a81101561086a5781600382600a81106108385761083861184c565b0154111561085857600381600a81106108535761085361184c565b015491505b8061086281611878565b91505061081b565b50610876816001611892565b91505090565b3360009081526002602052604090205460ff166108ab5760405162461bcd60e51b815260040161030690611633565b60405163c59f9f1960e01b815282906001600160a01b0382169063c59f9f199061040a9085906004016113d2565b3360009081526002602052604090205460ff166109085760405162461bcd60e51b815260040161030690611633565b60405163225cb05f60e21b815283906001600160a01b03821690638972c17c9061061a9086908690600401611784565b6000610965610945610a58565b8360405161190160f01b8152600281019290925260228201526042902090565b92915050565b600080846001600160a01b031663a9059cbb8585604051602401610990929190611784565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516109c99190611665565b6000604051808303816000865af19150503d8060008114610a06576040519150601f19603f3d011682016040523d82523d6000602084013e610a0b565b606091505b5091509150818015610a35575080511580610a35575080806020019051810190610a3591906118b0565b610a515760405162461bcd60e51b81526004016103069061191e565b5050505050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015610ab157507f000000000000000000000000000000000000000000000000000000000000000046145b15610adb57507f000000000000000000000000000000000000000000000000000000000000000090565b610652610d07565b6000806000610af28585610d9d565b91509150610aff81610de2565b509392505050565b60408051610140810191829052600091829190600390600a9082845b815481526020019060010190808311610b23575050505050905060005b600a811015610bc857838282600a8110610b5c57610b5c61184c565b602002015103610b7e5760405162461bcd60e51b81526004016103069061195d565b8183600a8110610b9057610b9061184c565b60200201518282600a8110610ba757610ba761184c565b60200201511015610bb6578092505b80610bc081611878565b915050610b40565b508082600a8110610bdb57610bdb61184c565b60200201518311610bfe5760405162461bcd60e51b81526004016103069061199c565b6127108183600a8110610c1357610c1361184c565b6020020151610c229190611892565b831115610c415760405162461bcd60e51b8152600401610306906119dc565b82600383600a8110610c5557610c5561184c565b0155505050565b606060ff8314610c7657610c6f83610e94565b9050610965565b818054610c8290611a02565b80601f0160208091040260200160405190810160405280929190818152602001828054610cae90611a02565b8015610cfb5780601f10610cd057610100808354040283529160200191610cfb565b820191906000526020600020905b815481529060010190602001808311610cde57829003601f168201915b50505050509050610965565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000004630604051602001610d82959493929190611a2e565b60405160208183030381529060405280519060200120905090565b6000808251604103610dd35760208301516040840151606085015160001a610dc787828585610ed3565b94509450505050610ddb565b506000905060025b9250929050565b6000816004811115610df657610df6611a70565b03610dfe5750565b6001816004811115610e1257610e12611a70565b03610e2f5760405162461bcd60e51b815260040161030690611ab5565b6002816004811115610e4357610e43611a70565b03610e605760405162461bcd60e51b815260040161030690611af9565b6003816004811115610e7457610e74611a70565b03610e915760405162461bcd60e51b815260040161030690611b48565b50565b60606000610ea183610f80565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b03831115610f005750600090506003610f77565b600060018787878760405160008152602001604052604051610f259493929190611b61565b6020604051602081039080840390855afa158015610f47573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610f7057600060019250925050610f77565b9150600090505b94509492505050565b600060ff8216601f81111561096557604051632cd44ac360e21b815260040160405180910390fd5b60006001600160a01b038216610965565b610fc281610fa8565b82525050565b80610fc2565b60608101610fdc8285610fb9565b610fe96020830184610fc8565b818103604083015260008152602081015b949350505050565b82818337506000910152565b601f01601f191690565b818352600060208401935061102e838584611002565b6110378361100e565b9093019392505050565b6060810161104f8287610fb9565b61105c6020830186610fc8565b818103604083015261106f818486611018565b9695505050505050565b61108281610fa8565b8114610e9157600080fd5b803561096581611079565b80611082565b803561096581611098565b60008083601f8401126110be576110be600080fd5b5081356001600160401b038111156110d8576110d8600080fd5b602083019150836001820283011115610ddb57610ddb600080fd5b600080600080600080600060c0888a03121561111157611111600080fd5b600061111d8a8a61108d565b975050602061112e8a828b0161109e565b965050604061113f8a828b0161108d565b95505060606111508a828b0161109e565b94505060806111618a828b0161109e565b93505060a08801356001600160401b0381111561118057611180600080fd5b61118c8a828b016110a9565b925092505092959891949750929550565b600080604083850312156111b3576111b3600080fd5b60006111bf858561108d565b92505060206111d08582860161108d565b9150509250929050565b60008083601f8401126111ef576111ef600080fd5b5081356001600160401b0381111561120957611209600080fd5b602083019150836020820283011115610ddb57610ddb600080fd5b6000806000806060858703121561123d5761123d600080fd5b6000611249878761108d565b945050602061125a8782880161108d565b93505060408501356001600160401b0381111561127957611279600080fd5b611285878288016111da565b95989497509550505050565b60008060008060008060008060c0898b0312156112b0576112b0600080fd5b60006112bc8b8b61108d565b98505060206112cd8b828c0161109e565b97505060408901356001600160401b038111156112ec576112ec600080fd5b6112f88b828c016110a9565b9650965050606061130b8b828c0161109e565b945050608061131c8b828c0161109e565b93505060a08901356001600160401b0381111561133b5761133b600080fd5b6113478b828c016110a9565b92509250509295985092959890939650565b60008060006060848603121561137157611371600080fd5b600061137d868661108d565b935050602061138e8682870161108d565b925050604061139f8682870161109e565b9150509250925092565b6000602082840312156113be576113be600080fd5b6000610ffa848461108d565b801515610fc2565b6020810161096582846113ca565b602081016109658284610fc8565b60008060008060006080868803121561140957611409600080fd5b6000611415888861109e565b95505060208601356001600160401b0381111561143457611434600080fd5b611440888289016110a9565b945094505060406114538882890161109e565b92505060606114648882890161109e565b9150509295509295909350565b602081016109658284610fb9565b6001600160f81b03198116610fc2565b60005b838110156114aa578181015183820152602001611492565b50506000910152565b60006114bd825190565b8084526020840193506114d481856020860161148f565b6110378161100e565b60006114e98383610fc8565b505060200190565b60006114fb825190565b80845260209384019383018060005b8381101561152f57815161151e88826114dd565b97506020830192505060010161150a565b509495945050505050565b60e08101611548828a61147f565b818103602083015261155a81896114b3565b9050818103604083015261156e81886114b3565b905061157d6060830187610fc8565b61158a6080830186610fb9565b61159760a0830185610fc8565b81810360c08301526115a981846114f1565b9998505050505050505050565b801515611082565b8035610965816115b6565b600080604083850312156115df576115df600080fd5b60006115eb858561108d565b92505060206111d0858286016115be565b601f81526000602082017f4e6f6e2d7369676e657220696e206f6e6c795369676e6572206d6574686f6400815291505b5060200190565b60208082528101610965816115fc565b600061164d825190565b61165b81856020860161148f565b9290920192915050565b60006116718284611643565b9392505050565b60c081016116868289610fc8565b6116936020830188610fb9565b6116a06040830187610fc8565b6116ad6060830186610fb9565b6116ba6080830185610fc8565b6116c760a0830184610fc8565b979650505050505050565b82818337505050565b81835260006020840193506001600160fb1b038311156116fd576116fd600080fd5b60208302925061170e8385846116d2565b50500190565b604081016117228286610fb9565b81810360208301526107288184866116db565b600061170e838584611002565b6000610ffa828486611735565b60c0810161175d8289610fc8565b61176a6020830188610fb9565b6117776040830187610fc8565b6116ad6060830186610fc8565b604081016117928285610fb9565b6116716020830184610fc8565b6013815260006020820172151c985b9cd858dd1a5bdb88195e1c1a5c9959606a1b8152915061162c565b602080825281016109658161179f565b600e81526000602082016d24b73b30b634b21039b4b3b732b960911b8152915061162c565b60208082528101610965816117d9565b601781526000602082017614da59db995c9cc818d85b9b9bdd08189948195c5d585b604a1b8152915061162c565b602080825281016109658161180e565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019820361188b5761188b611862565b5060010190565b8082018082111561096557610965611862565b8051610965816115b6565b6000602082840312156118c5576118c5600080fd5b6000610ffa84846118a5565b602d81526000602082017f5472616e7366657248656c7065723a3a736166655472616e736665723a20747281526c185b9cd9995c8819985a5b1959609a1b602082015291505b5060400190565b60208082528101610965816118d1565b601881526000602082017714d95c5d595b98d948125108185b1c9958591e481d5cd95960421b8152915061162c565b602080825281016109658161192e565b601881526000602082017753657175656e63652049442062656c6f772077696e646f7760401b8152915061162c565b602080825281016109658161196d565b601981526000602082017853657175656e63652049442061626f7665206d6178696d756d60381b8152915061162c565b60208082528101610965816119ac565b634e487b7160e01b600052602260045260246000fd5b600281046001821680611a1657607f821691505b602082108103611a2857611a286119ec565b50919050565b60a08101611a3c8288610fc8565b611a496020830187610fc8565b611a566040830186610fc8565b611a636060830185610fc8565b61106f6080830184610fb9565b634e487b7160e01b600052602160045260246000fd5b601881526000602082017745434453413a20696e76616c6964207369676e617475726560401b8152915061162c565b6020808252810161096581611a86565b601f81526000602082017f45434453413a20696e76616c6964207369676e6174757265206c656e677468008152915061162c565b6020808252810161096581611ac5565b602281526000602082017f45434453413a20696e76616c6964207369676e6174757265202773272076616c815261756560f01b60208201529150611917565b6020808252810161096581611b09565b60ff8116610fc2565b60808101611b6f8287610fc8565b611b7c6020830186611b58565b611b896040830185610fc8565b6107286060830184610fc856fe53656e644d756c7469536967286164647265737320746f416464726573732c75696e743235362076616c75652c627974657320646174612c75696e743235362065787069726554696d652c75696e743235362073657175656e6365496429546f6b656e5472616e73666572286164647265737320746f416464726573732c75696e743235362076616c75652c6164647265737320746f6b656e436f6e7472616374416464726573732c75696e743235362065787069726554696d652c75696e743235362073657175656e63654964296e89d517057028190560dd200cf6bf792842861353d1173761dfa362e1c133f0a2646970667358221220809b16dacb7830b0a649b0bd9c12c16080b56b548555953762996eda4cf60d5864736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100a65760003560e01c80630dcd7a6c146101055780632da034091461012557806334f940471461014557806339125215146101655780635a953d0a14610185578063736c0d5b146101a557806378e890ba146101eb578063813565b81461020d57806384b0196e1461023a5780639246777614610262578063a0b7967b14610282578063c137878414610297578063e6bd0aa4146102b7576100db565b366100db5734156100d957600080516020611c6683398151915233346040516100d0929190610fce565b60405180910390a15b005b34156100d957600080516020611c6683398151915233346000366040516100d09493929190611041565b34801561011157600080fd5b506100d96101203660046110f3565b6102d7565b34801561013157600080fd5b506100d961014036600461119d565b6103ad565b34801561015157600080fd5b506100d9610160366004611224565b610441565b34801561017157600080fd5b506100d9610180366004611291565b6104db565b34801561019157600080fd5b506100d96101a0366004611359565b6105bb565b3480156101b157600080fd5b506101d56101c03660046113a9565b60026020526000908152604090205460ff1681565b6040516101e291906113d2565b60405180910390f35b3480156101f757600080fd5b50610200610648565b6040516101e291906113e0565b34801561021957600080fd5b5061022d6102283660046113ee565b610657565b6040516101e29190611471565b34801561024657600080fd5b5061024f610731565b6040516101e2979695949392919061153a565b34801561026e57600080fd5b506100d961027d3660046115c9565b6107b9565b34801561028e57600080fd5b50610200610816565b3480156102a357600080fd5b506100d96102b23660046115c9565b61087c565b3480156102c357600080fd5b506100d96102d2366004611359565b6108d9565b3360009081526002602052604090205460ff1661030f5760405162461bcd60e51b815260040161030690611633565b60405180910390fd5b60006103886040518060a0016040528060718152602001611bf56071913960405160200161033d9190611665565b60405160208183030381529060405280519060200120898989898960405160200161036d96959493929190611678565b60405160208183030381529060405280519060200120610938565b90506103978184848888610657565b506103a386898961096b565b5050505050505050565b3360009081526002602052604090205460ff166103dc5760405162461bcd60e51b815260040161030690611633565b604051633ef1336760e01b815282906001600160a01b03821690633ef133679061040a908590600401611471565b600060405180830381600087803b15801561042457600080fd5b505af1158015610438573d6000803e3d6000fd5b50505050505050565b3360009081526002602052604090205460ff166104705760405162461bcd60e51b815260040161030690611633565b6040516331a8b74960e21b815284906001600160a01b0382169063c6a2dd24906104a290879087908790600401611714565b600060405180830381600087803b1580156104bc57600080fd5b505af11580156104d0573d6000803e3d6000fd5b505050505050505050565b3360009081526002602052604090205460ff1661050a5760405162461bcd60e51b815260040161030690611633565b60006040518060800160405280605e8152602001611b97605e91396040516020016105359190611665565b604051602081830303815290604052805190602001208989898960405161055d929190611742565b604051908190038120610579949392918a908a9060200161174f565b604051602081830303815290604052805190602001209050600061059c82610938565b905060006105ad8286868a8a610657565b505050505050505050505050565b3360009081526002602052604090205460ff166105ea5760405162461bcd60e51b815260040161030690611633565b60405163159e44d760e01b815283906001600160a01b0382169063159e44d79061061a9086908690600401611784565b600060405180830381600087803b15801561063457600080fd5b505af11580156103a3573d6000803e3d6000fd5b6000610652610a58565b905090565b60008061069a8787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ae392505050565b9050428410156106bc5760405162461bcd60e51b8152600401610306906117c9565b6106c583610b07565b6001600160a01b03811660009081526002602052604090205460ff166106fd5760405162461bcd60e51b8152600401610306906117fe565b336001600160a01b038216036107255760405162461bcd60e51b81526004016103069061183c565b90505b95945050505050565b6000606080828080836107647f000000000000000000000000000000000000000000000000000000000000000083610c5c565b61078f7f00000000000000000000000000000000000000000000000000000000000000006001610c5c565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b3360009081526002602052604090205460ff166107e85760405162461bcd60e51b815260040161030690611633565b60405163456600df60e11b815282906001600160a01b03821690638acc01be9061040a9085906004016113d2565b600080805b600a81101561086a5781600382600a81106108385761083861184c565b0154111561085857600381600a81106108535761085361184c565b015491505b8061086281611878565b91505061081b565b50610876816001611892565b91505090565b3360009081526002602052604090205460ff166108ab5760405162461bcd60e51b815260040161030690611633565b60405163c59f9f1960e01b815282906001600160a01b0382169063c59f9f199061040a9085906004016113d2565b3360009081526002602052604090205460ff166109085760405162461bcd60e51b815260040161030690611633565b60405163225cb05f60e21b815283906001600160a01b03821690638972c17c9061061a9086908690600401611784565b6000610965610945610a58565b8360405161190160f01b8152600281019290925260228201526042902090565b92915050565b600080846001600160a01b031663a9059cbb8585604051602401610990929190611784565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516109c99190611665565b6000604051808303816000865af19150503d8060008114610a06576040519150601f19603f3d011682016040523d82523d6000602084013e610a0b565b606091505b5091509150818015610a35575080511580610a35575080806020019051810190610a3591906118b0565b610a515760405162461bcd60e51b81526004016103069061191e565b5050505050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015610ab157507f000000000000000000000000000000000000000000000000000000000000000046145b15610adb57507f000000000000000000000000000000000000000000000000000000000000000090565b610652610d07565b6000806000610af28585610d9d565b91509150610aff81610de2565b509392505050565b60408051610140810191829052600091829190600390600a9082845b815481526020019060010190808311610b23575050505050905060005b600a811015610bc857838282600a8110610b5c57610b5c61184c565b602002015103610b7e5760405162461bcd60e51b81526004016103069061195d565b8183600a8110610b9057610b9061184c565b60200201518282600a8110610ba757610ba761184c565b60200201511015610bb6578092505b80610bc081611878565b915050610b40565b508082600a8110610bdb57610bdb61184c565b60200201518311610bfe5760405162461bcd60e51b81526004016103069061199c565b6127108183600a8110610c1357610c1361184c565b6020020151610c229190611892565b831115610c415760405162461bcd60e51b8152600401610306906119dc565b82600383600a8110610c5557610c5561184c565b0155505050565b606060ff8314610c7657610c6f83610e94565b9050610965565b818054610c8290611a02565b80601f0160208091040260200160405190810160405280929190818152602001828054610cae90611a02565b8015610cfb5780601f10610cd057610100808354040283529160200191610cfb565b820191906000526020600020905b815481529060010190602001808311610cde57829003601f168201915b50505050509050610965565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000004630604051602001610d82959493929190611a2e565b60405160208183030381529060405280519060200120905090565b6000808251604103610dd35760208301516040840151606085015160001a610dc787828585610ed3565b94509450505050610ddb565b506000905060025b9250929050565b6000816004811115610df657610df6611a70565b03610dfe5750565b6001816004811115610e1257610e12611a70565b03610e2f5760405162461bcd60e51b815260040161030690611ab5565b6002816004811115610e4357610e43611a70565b03610e605760405162461bcd60e51b815260040161030690611af9565b6003816004811115610e7457610e74611a70565b03610e915760405162461bcd60e51b815260040161030690611b48565b50565b60606000610ea183610f80565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b03831115610f005750600090506003610f77565b600060018787878760405160008152602001604052604051610f259493929190611b61565b6020604051602081039080840390855afa158015610f47573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610f7057600060019250925050610f77565b9150600090505b94509492505050565b600060ff8216601f81111561096557604051632cd44ac360e21b815260040160405180910390fd5b60006001600160a01b038216610965565b610fc281610fa8565b82525050565b80610fc2565b60608101610fdc8285610fb9565b610fe96020830184610fc8565b818103604083015260008152602081015b949350505050565b82818337506000910152565b601f01601f191690565b818352600060208401935061102e838584611002565b6110378361100e565b9093019392505050565b6060810161104f8287610fb9565b61105c6020830186610fc8565b818103604083015261106f818486611018565b9695505050505050565b61108281610fa8565b8114610e9157600080fd5b803561096581611079565b80611082565b803561096581611098565b60008083601f8401126110be576110be600080fd5b5081356001600160401b038111156110d8576110d8600080fd5b602083019150836001820283011115610ddb57610ddb600080fd5b600080600080600080600060c0888a03121561111157611111600080fd5b600061111d8a8a61108d565b975050602061112e8a828b0161109e565b965050604061113f8a828b0161108d565b95505060606111508a828b0161109e565b94505060806111618a828b0161109e565b93505060a08801356001600160401b0381111561118057611180600080fd5b61118c8a828b016110a9565b925092505092959891949750929550565b600080604083850312156111b3576111b3600080fd5b60006111bf858561108d565b92505060206111d08582860161108d565b9150509250929050565b60008083601f8401126111ef576111ef600080fd5b5081356001600160401b0381111561120957611209600080fd5b602083019150836020820283011115610ddb57610ddb600080fd5b6000806000806060858703121561123d5761123d600080fd5b6000611249878761108d565b945050602061125a8782880161108d565b93505060408501356001600160401b0381111561127957611279600080fd5b611285878288016111da565b95989497509550505050565b60008060008060008060008060c0898b0312156112b0576112b0600080fd5b60006112bc8b8b61108d565b98505060206112cd8b828c0161109e565b97505060408901356001600160401b038111156112ec576112ec600080fd5b6112f88b828c016110a9565b9650965050606061130b8b828c0161109e565b945050608061131c8b828c0161109e565b93505060a08901356001600160401b0381111561133b5761133b600080fd5b6113478b828c016110a9565b92509250509295985092959890939650565b60008060006060848603121561137157611371600080fd5b600061137d868661108d565b935050602061138e8682870161108d565b925050604061139f8682870161109e565b9150509250925092565b6000602082840312156113be576113be600080fd5b6000610ffa848461108d565b801515610fc2565b6020810161096582846113ca565b602081016109658284610fc8565b60008060008060006080868803121561140957611409600080fd5b6000611415888861109e565b95505060208601356001600160401b0381111561143457611434600080fd5b611440888289016110a9565b945094505060406114538882890161109e565b92505060606114648882890161109e565b9150509295509295909350565b602081016109658284610fb9565b6001600160f81b03198116610fc2565b60005b838110156114aa578181015183820152602001611492565b50506000910152565b60006114bd825190565b8084526020840193506114d481856020860161148f565b6110378161100e565b60006114e98383610fc8565b505060200190565b60006114fb825190565b80845260209384019383018060005b8381101561152f57815161151e88826114dd565b97506020830192505060010161150a565b509495945050505050565b60e08101611548828a61147f565b818103602083015261155a81896114b3565b9050818103604083015261156e81886114b3565b905061157d6060830187610fc8565b61158a6080830186610fb9565b61159760a0830185610fc8565b81810360c08301526115a981846114f1565b9998505050505050505050565b801515611082565b8035610965816115b6565b600080604083850312156115df576115df600080fd5b60006115eb858561108d565b92505060206111d0858286016115be565b601f81526000602082017f4e6f6e2d7369676e657220696e206f6e6c795369676e6572206d6574686f6400815291505b5060200190565b60208082528101610965816115fc565b600061164d825190565b61165b81856020860161148f565b9290920192915050565b60006116718284611643565b9392505050565b60c081016116868289610fc8565b6116936020830188610fb9565b6116a06040830187610fc8565b6116ad6060830186610fb9565b6116ba6080830185610fc8565b6116c760a0830184610fc8565b979650505050505050565b82818337505050565b81835260006020840193506001600160fb1b038311156116fd576116fd600080fd5b60208302925061170e8385846116d2565b50500190565b604081016117228286610fb9565b81810360208301526107288184866116db565b600061170e838584611002565b6000610ffa828486611735565b60c0810161175d8289610fc8565b61176a6020830188610fb9565b6117776040830187610fc8565b6116ad6060830186610fc8565b604081016117928285610fb9565b6116716020830184610fc8565b6013815260006020820172151c985b9cd858dd1a5bdb88195e1c1a5c9959606a1b8152915061162c565b602080825281016109658161179f565b600e81526000602082016d24b73b30b634b21039b4b3b732b960911b8152915061162c565b60208082528101610965816117d9565b601781526000602082017614da59db995c9cc818d85b9b9bdd08189948195c5d585b604a1b8152915061162c565b602080825281016109658161180e565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019820361188b5761188b611862565b5060010190565b8082018082111561096557610965611862565b8051610965816115b6565b6000602082840312156118c5576118c5600080fd5b6000610ffa84846118a5565b602d81526000602082017f5472616e7366657248656c7065723a3a736166655472616e736665723a20747281526c185b9cd9995c8819985a5b1959609a1b602082015291505b5060400190565b60208082528101610965816118d1565b601881526000602082017714d95c5d595b98d948125108185b1c9958591e481d5cd95960421b8152915061162c565b602080825281016109658161192e565b601881526000602082017753657175656e63652049442062656c6f772077696e646f7760401b8152915061162c565b602080825281016109658161196d565b601981526000602082017853657175656e63652049442061626f7665206d6178696d756d60381b8152915061162c565b60208082528101610965816119ac565b634e487b7160e01b600052602260045260246000fd5b600281046001821680611a1657607f821691505b602082108103611a2857611a286119ec565b50919050565b60a08101611a3c8288610fc8565b611a496020830187610fc8565b611a566040830186610fc8565b611a636060830185610fc8565b61106f6080830184610fb9565b634e487b7160e01b600052602160045260246000fd5b601881526000602082017745434453413a20696e76616c6964207369676e617475726560401b8152915061162c565b6020808252810161096581611a86565b601f81526000602082017f45434453413a20696e76616c6964207369676e6174757265206c656e677468008152915061162c565b6020808252810161096581611ac5565b602281526000602082017f45434453413a20696e76616c6964207369676e6174757265202773272076616c815261756560f01b60208201529150611917565b6020808252810161096581611b09565b60ff8116610fc2565b60808101611b6f8287610fc8565b611b7c6020830186611b58565b611b896040830185610fc8565b6107286060830184610fc856fe53656e644d756c7469536967286164647265737320746f416464726573732c75696e743235362076616c75652c627974657320646174612c75696e743235362065787069726554696d652c75696e743235362073657175656e6365496429546f6b656e5472616e73666572286164647265737320746f416464726573732c75696e743235362076616c75652c6164647265737320746f6b656e436f6e7472616374416464726573732c75696e743235362065787069726554696d652c75696e743235362073657175656e63654964296e89d517057028190560dd200cf6bf792842861353d1173761dfa362e1c133f0a2646970667358221220809b16dacb7830b0a649b0bd9c12c16080b56b548555953762996eda4cf60d5864736f6c63430008140033",
  "devdoc": {
    "events": {
      "EIP712DomainChanged()": {
        "details": "MAY be emitted to signal that the domain could have changed."
      }
    },
    "kind": "dev",
    "methods": {
      "batchFlushERC1155ForwarderTokens(address,address,uint256[])": {
        "params": {
          "forwarderAddress": "the address of the forwarder address to flush the tokens from",
          "tokenContractAddress": "the address of the erc1155 token contract"
        }
      },
      "eip712Domain()": {
        "details": "See {EIP-5267}. _Available since v4.9._"
      },
      "flushERC1155ForwarderTokens(address,address,uint256)": {
        "params": {
          "forwarderAddress": "the address of the forwarder address to flush the tokens from",
          "tokenContractAddress": "the address of the erc1155 token contract",
          "tokenId": "the token id associated with the ERC1155"
        }
      },
      "flushERC721ForwarderTokens(address,address,uint256)": {
        "params": {
          "forwarderAddress": "the address of the forwarder address to flush the tokens from",
          "tokenContractAddress": "the address of the erc20 token contract"
        }
      },
      "flushForwarderTokens(address,address)": {
        "params": {
          "forwarderAddress": "the address of the forwarder address to flush the tokens from",
          "tokenContractAddress": "the address of the erc20 token contract"
        }
      },
      "sendMultiSigToken(address,uint256,address,uint256,uint256,bytes)": {
        "params": {
          "expireTime": "the number of seconds since 1970 for which this transaction is valid",
          "sequenceId": "the unique sequence id obtainable from getNextSequenceId",
          "signature": "see Data Formats",
          "toAddress": "the destination address to send an outgoing transaction",
          "tokenContractAddress": "the address of the erc20 token contract",
          "value": "the amount in tokens to be sent"
        }
      },
      "setAutoFlush1155(address,bool)": {
        "params": {
          "autoFlush": "whether to autoflush erc1155 tokens",
          "forwarderAddress": "the address of the forwarder to toggle."
        }
      },
      "setAutoFlush721(address,bool)": {
        "params": {
          "autoFlush": "whether to autoflush erc721 tokens",
          "forwarderAddress": "the address of the forwarder to toggle."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "batchFlushERC1155ForwarderTokens(address,address,uint256[])": {
        "notice": "Execute a ERC1155 batch token flush from one of the forwarder addresses. This transfer needs only a single signature and can be done by any signer."
      },
      "flushERC1155ForwarderTokens(address,address,uint256)": {
        "notice": "Execute a ERC1155 token flush from one of the forwarder addresses. This transfer needs only a single signature and can be done by any signer."
      },
      "flushERC721ForwarderTokens(address,address,uint256)": {
        "notice": "Execute a ERC721 token flush from one of the forwarder addresses. This transfer needs only a single signature and can be done by any signer"
      },
      "flushForwarderTokens(address,address)": {
        "notice": "Execute a token flush from one of the forwarder addresses. This transfer needs only a single signature and can be done by any signer"
      },
      "getNextSequenceId()": {
        "notice": "Gets the next available sequence ID for signing when using executeAndConfirm returns the sequenceId one higher than the highest currently stored"
      },
      "sendMultiSigToken(address,uint256,address,uint256,uint256,bytes)": {
        "notice": "Execute a multi-signature token transfer from this wallet using 2 signers: one from msg.sender and the other from ecrecover. Sequence IDs are numbers starting from 1. They are used to prevent replay attacks and may not be repeated."
      },
      "setAutoFlush1155(address,bool)": {
        "notice": "Sets the autoflush 721 parameter on the forwarder."
      },
      "setAutoFlush721(address,bool)": {
        "notice": "Sets the autoflush 721 parameter on the forwarder."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1308,
        "contract": "contracts/msig/WalletSimple.sol:WalletSimple",
        "label": "_nameFallback",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1310,
        "contract": "contracts/msig/WalletSimple.sol:WalletSimple",
        "label": "_versionFallback",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2482,
        "contract": "contracts/msig/WalletSimple.sol:WalletSimple",
        "label": "signers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2492,
        "contract": "contracts/msig/WalletSimple.sol:WalletSimple",
        "label": "recentSequenceIds",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)10_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)10_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[10]",
        "numberOfBytes": "320"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}